[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1_1.html",
    "href": "Hands-on_Ex1/Hands-on_Ex1_1.html",
    "title": "Hands-on Exercise 1.1: Geospatial Data Wrangling with R",
    "section": "",
    "text": "In this hands-on exercise, I will learn how to import and wrangle geospatial data using appropriate R packages:\n\ninstalling and loading sf and tidyverse packages into R environment,\nimporting geospatial data by using appropriate functions of sf package,\nimporting aspatial data by using appropriate function of readr package,\nexploring the content of simple feature data frame by using appropriate Base R and sf functions,\nassigning or transforming coordinate systems by using appropriate sf functions,\nconverting an aspatial data into a sf data frame by using appropriate function of sf package,\nperforming geoprocessing tasks by using appropriate functions of sf package,\nperforming data wrangling tasks by using appropriate functions of dplyr package and\nperforming Exploratory Data Analysis (EDA) by using appropriate functions from ggplot2 package."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1_1.html#data-acquisition",
    "href": "Hands-on_Ex1/Hands-on_Ex1_1.html#data-acquisition",
    "title": "Hands-on Exercise 1.1: Geospatial Data Wrangling with R",
    "section": "1.2 Data Acquisition",
    "text": "1.2 Data Acquisition\nIn this hands-on exercise, data is acquired from the following sources:\n\nMaster Plan 2014 Subzone Boundary (Web) from data.gov.sg\nPre-Schools Location from data.gov.sg\nCycling Path from LTADataMall\nLatest version of Singapore Airbnb listing data from Inside Airbnb"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1_1.html#getting-started",
    "href": "Hands-on_Ex1/Hands-on_Ex1_1.html#getting-started",
    "title": "Hands-on Exercise 1.1: Geospatial Data Wrangling with R",
    "section": "1.3 Getting Started",
    "text": "1.3 Getting Started\nThe code chunk below install and load sf and tidyverse packages into R environment:\n\n\nShow the code\npacman::p_load(sf, tidyverse)\n\n\n\nsf for importing, managing, and processing geospatial data, and\ntidyverse for performing data science tasks such as importing, wrangling and visualising data.\n\nThe sp package provides classes and methods for spatial data types in 2005. The sf package was released in 2016 to give standardise support for vector data in R. It is also coherent with tidyverse, that consists of the following (not exhaustive):\n\nreadr for importing csv data,\nreadxl for importing Excel worksheet,\ntidyr for manipulating data,\ndplyr for transforming data, and\nggplot2 for visualising data"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1_1.html#importing-geospatial-data",
    "href": "Hands-on_Ex1/Hands-on_Ex1_1.html#importing-geospatial-data",
    "title": "Hands-on Exercise 1.1: Geospatial Data Wrangling with R",
    "section": "1.4 Importing Geospatial data",
    "text": "1.4 Importing Geospatial data\nThe data that we will be importing takes the following forms:\n\nMP14_SUBZONE_WEB_PL, a polygon feature layer in ESRI shapefile format,\nCyclingPath, a line feature layer in ESRI shapefile format, and\nPreSchool, a point feature layer in kml file format.\n\n\n1.4.1 Importing polygon feature data in shapefile format\nst_read() is a func from sf package, used to read files in shapefile format.\ndsn- data source name (aka data path)\nlayer - shapefile name. No extensions like .shp, .dbf, .prj and .shx are needed.\n\n\nShow the code\nmpsz <- st_read(dsn=\"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\yixin-neo\\ISSS624_AGA\\Hands-on_Ex1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\ngeospatial objects are multipolygon features\ntotal of 323 multipolygon features and 15 fields in mpsz simple feature data frame.\nmpsz is in svy21 projected coordinates systems\nx extend and y extend of the data are given\n\n\n\nShow the code\nlibrary(knitr)\nkable(head(mpsz, n = 3))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOBJECTID\nSUBZONE_NO\nSUBZONE_N\nSUBZONE_C\nCA_IND\nPLN_AREA_N\nPLN_AREA_C\nREGION_N\nREGION_C\nINC_CRC\nFMEL_UPD_D\nX_ADDR\nY_ADDR\nSHAPE_Leng\nSHAPE_Area\ngeometry\n\n\n\n\n1\n1\nMARINA SOUTH\nMSSZ01\nY\nMARINA SOUTH\nMS\nCENTRAL REGION\nCR\n5ED7EB253F99252E\n2014-12-05\n31595.84\n29220.19\n5267.381\n1630379.3\nMULTIPOLYGON (((31495.56 30…\n\n\n2\n1\nPEARL’S HILL\nOTSZ01\nY\nOUTRAM\nOT\nCENTRAL REGION\nCR\n8C7149B9EB32EEFC\n2014-12-05\n28679.06\n29782.05\n3506.107\n559816.2\nMULTIPOLYGON (((29092.28 30…\n\n\n3\n3\nBOAT QUAY\nSRSZ03\nY\nSINGAPORE RIVER\nSR\nCENTRAL REGION\nCR\nC35FEFF02B13E0E5\n2014-12-05\n29654.96\n29974.66\n1740.926\n160807.5\nMULTIPOLYGON (((29932.33 29…\n\n\n\n\n\n\n\n1.4.2 Importing polyline feature data in shapefile form\nThe code chunk below uses st_read() function of sf package to import CyclingPath shapefile into R as line feature data frame.\n\n\nShow the code\ncyclingpath = st_read(dsn='data/geospatial', layer='CyclingPathGazette')\n\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\yixin-neo\\ISSS624_AGA\\Hands-on_Ex1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 2248 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\n\n\nShow the code\nkable(head(cyclingpath, n = 3))\n\n\n\n\n\nPLANNING_A\nPLANNING_1\ngeometry\n\n\n\n\nNA\nNA\nMULTILINESTRING ((16001.13 …\n\n\nNA\nNA\nMULTILINESTRING ((16012.86 …\n\n\nNA\nNA\nMULTILINESTRING ((16021.49 …\n\n\n\n\n\n\n\n1.4.3 Importing GIS data in kml format\nThe pre-schools-location-kml is in kml format.\n\n\nShow the code\npreschool = st_read('data/geospatial/pre-schools-location-kml.kml')\n\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\yixin-neo\\ISSS624_AGA\\Hands-on_Ex1\\data\\geospatial\\pre-schools-location-kml.kml' \n  using driver `KML'\nSimple feature collection with 1925 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nNote that preschool is in WSG84 coordinates system (3D).\n\n\nShow the code\nkable(head(preschool, n = 3))\n\n\n\n\n\n\n\n\n\n\nName\nDescription\ngeometry\n\n\n\n\nkml_1\n\nPOINT Z (103.7009 1.338325 0)\n\n\nkml_2\n\nPOINT Z (103.8987 1.39044 0)\n\n\nkml_3\n\nPOINT Z (103.8068 1.438017 0)\n\n\n\n\n\n\n\n1.5.1 Working with st_geometry()\nThe column in the sf data.frame that contains the geometries is a list, of class sfc. We can retrieve the geometry list-column in this case by mpsz$geom or mpsz[[1]], but the more general way uses st_geometry() as shown in the code chunk below.\n\n\nShow the code\nclass(mpsz)\n\n\n[1] \"sf\"         \"data.frame\"\n\n\n\n\nShow the code\nst_geometry(mpsz)\n\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\n\n\n1.5.2 Working with glimpse()\nBeside the basic feature information, we also would like to learn more about the associated attribute information in the data frame. This is the time you will find glimpse() of dplyr. very handy as shown in the code chunk below.\n\n\nShow the code\nglimpse(head(mpsz))\n\n\nRows: 6\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\"\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\"\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\"\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\"\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05,…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913\n$ SHAPE_Area <dbl> 1630379.3, 559816.2, 160807.5, 595428.9, 387429.4, 1030378.8\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (((29092.28 30…\n\n\nglimpse() report reveals the data type of each fields. For example FMEL-UPD_D field is in date data type and X_ADDR, Y_ADDR, SHAPE_L and SHAPE_AREA fields are all in double-precision values.\n\n\n1.5.3 Working with head()\nSometimes we would like to reveal complete information of a feature object, this is the job of head() of Base R\n\n\nShow the code\nhead(mpsz,3)\n\n\nSimple feature collection with 3 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 28160.23 ymin: 28369.47 xmax: 32362.39 ymax: 30247.18\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO    SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N PLN_AREA_C\n1        1          1 MARINA SOUTH    MSSZ01      Y    MARINA SOUTH         MS\n2        2          1 PEARL'S HILL    OTSZ01      Y          OUTRAM         OT\n3        3          3    BOAT QUAY    SRSZ03      Y SINGAPORE RIVER         SR\n        REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR\n1 CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84 29220.19\n2 CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06 29782.05\n3 CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96 29974.66\n  SHAPE_Leng SHAPE_Area                       geometry\n1   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3   1740.926   160807.5 MULTIPOLYGON (((29932.33 29..."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1_1.html#theories",
    "href": "Hands-on_Ex1/Hands-on_Ex1_1.html#theories",
    "title": "Hands-on Exercise 1.1: Geospatial Data Wrangling with R",
    "section": "Theories",
    "text": "Theories\n\nKML and shapefiles\nA KMZ file is a zipped (or compressed) KML file, and a SHZ is a zipped/compressed Shapefile.\nA shapefile is an Esri vector data storage format for storing the location, shape, and attributes of geographic features. It is stored as a set of related files and contains one feature class.\nThe shapefile format can spatially describe vector features: points, lines, and polygons, representing, for example, water wells, rivers, and lakes. Each item usually has attributes that describe it, such as name or temperature.\nKML and Shapefiles could contain the exact same data, however KML (Keyhole Markup Language) is much more suited to displaying time based track information, whereas shapefiles are more suited to displaying Geometries, like boundaries, areas, roads, etc.\nShapefiles are composed of 3 mandatory files\n·       . shp (geometry), <- multipolygon, polylines or points. Can only be one type in each file , can combined in layers\n·       . dbf (attributes) <- table\n·       . shx (index)  <- binds first two together\n\n\nGCS [Geographic Coordinate System] (3D) and PCS [Projected Coordinate System ] (2D)\nGCS: uses lat, long, elevation to locate positions on Earth. Units are in degree and metres. Earth is represented as a sphere. Eg. WGS84 (world Gedetic system 1984)\nPCS: Units are usually metres to locate position on a Flat surface. Involves projecting 3D Earth into a 2D plane. It distorts the true shapes, areas, distances, or directions to some extent, depending on the projection method chosen.\nPreserve:\n·       Conformal projections minimize distortion in shape\n·       Equidistant projections minimize distortion in distance\n·       Equal-area projection minimize distortion in area\n·       Azimuthal or True-direction projections minimize distortion in direction.\nGoogle maps uses Mercator projection system. It is chosen as it preserves direction and angles. It is useful for navigation (google map) . It is originally created for sea navigation in older days. The cons are that this projection does not preserve area and shape.\nSingapore uses SVY21 or the EPSG:3414 projected coordinate system.\n\n\nGeospatial data handling functions\n\nst_read & read sf: read simple features from file or database, or retrieve layer names and their geometry type(s)\nst write &write_sf: write simple features object to file or database\nst_as_sf: convert a sf object from a non-geospatial tabular data frame\nst as_text: convert to Well Known Text(WKT)\nst as_binary: convert to Well Known Binary(WKB)\nst_as_sfc: convert geometries to sfc (e.g., from WKT, WKB) as(x, “Spatial”): convert to Spatial*\nst transform(x, crs, …): convert coordinates of x to a different coordinate reference system\n\nThe code chunk below allows us to unsf the mpsz and work tbl_df or data.frame.\n\n\nShow the code\nmpsz_tbl_df <- as_tibble(mpsz)"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1_2.html#getting-started",
    "href": "Hands-on_Ex1/Hands-on_Ex1_2.html#getting-started",
    "title": "Hands-on Exercise 1.2: Choropleth Mapping with R",
    "section": "Getting Started",
    "text": "Getting Started\n\n\nShow the code\npacman::p_load(sf, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1_2.html#learning-outcome",
    "href": "Hands-on_Ex1/Hands-on_Ex1_2.html#learning-outcome",
    "title": "Hands-on Exercise 1.2: Choropleth Mapping with R",
    "section": "1.1 Learning Outcome",
    "text": "1.1 Learning Outcome"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1_2.html#importing-geospatial-data",
    "href": "Hands-on_Ex1/Hands-on_Ex1_2.html#importing-geospatial-data",
    "title": "Hands-on Exercise 1.2: Choropleth Mapping with R",
    "section": "Importing Geospatial data",
    "text": "Importing Geospatial data\n\nImporting polygon feature data\nst_read() is a func from sf package, used to read files in shapefile format.\ndsn- data source name\n\n\nShow the code\nmpsz <- st_read(dsn=\"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\yixin-neo\\ISSS624_AGA\\Hands-on_Ex1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n\nShow the code\nmpsz_tbl_df <- as_tibble(mpsz)"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1_2.html#theories",
    "href": "Hands-on_Ex1/Hands-on_Ex1_2.html#theories",
    "title": "Hands-on Exercise 1.2: Choropleth Mapping with R",
    "section": "Theories",
    "text": "Theories"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2_1.html#getting-started",
    "href": "Hands-on_Ex2/Hands-on_Ex2_1.html#getting-started",
    "title": "Hands-on Exercise 2.1: Spatial Weights and Applications",
    "section": "Getting Started",
    "text": "Getting Started\n\n\nShow the code\npacman::p_load(sf, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2_1.html#learning-outcome",
    "href": "Hands-on_Ex2/Hands-on_Ex2_1.html#learning-outcome",
    "title": "Hands-on Exercise 2.1: Spatial Weights and Applications",
    "section": "1.1 Learning Outcome",
    "text": "1.1 Learning Outcome"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2_1.html#importing-geospatial-data",
    "href": "Hands-on_Ex2/Hands-on_Ex2_1.html#importing-geospatial-data",
    "title": "Hands-on Exercise 2.1: Spatial Weights and Applications",
    "section": "Importing Geospatial data",
    "text": "Importing Geospatial data"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2_1.html#theories",
    "href": "Hands-on_Ex2/Hands-on_Ex2_1.html#theories",
    "title": "Hands-on Exercise 2.1: Spatial Weights and Applications",
    "section": "Theories",
    "text": "Theories"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2_2.html#getting-started",
    "href": "Hands-on_Ex2/Hands-on_Ex2_2.html#getting-started",
    "title": "Hands-on Exercise 2.2: Global Measures of Spatial Autocorrelation",
    "section": "Getting Started",
    "text": "Getting Started\n\n\nShow the code\npacman::p_load(sf, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2_2.html#learning-outcome",
    "href": "Hands-on_Ex2/Hands-on_Ex2_2.html#learning-outcome",
    "title": "Hands-on Exercise 2.2: Global Measures of Spatial Autocorrelation",
    "section": "1.1 Learning Outcome",
    "text": "1.1 Learning Outcome"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2_2.html#importing-geospatial-data",
    "href": "Hands-on_Ex2/Hands-on_Ex2_2.html#importing-geospatial-data",
    "title": "Hands-on Exercise 2.2: Global Measures of Spatial Autocorrelation",
    "section": "Importing Geospatial data",
    "text": "Importing Geospatial data"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2_2.html#theories",
    "href": "Hands-on_Ex2/Hands-on_Ex2_2.html#theories",
    "title": "Hands-on Exercise 2.2: Global Measures of Spatial Autocorrelation",
    "section": "Theories",
    "text": "Theories"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2_3.html#getting-started",
    "href": "Hands-on_Ex2/Hands-on_Ex2_3.html#getting-started",
    "title": "Hands-on Exercise 2.3:Local Measures of Spatial Autocorrelation",
    "section": "Getting Started",
    "text": "Getting Started\n\n\nShow the code\npacman::p_load(sf, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2_3.html#learning-outcome",
    "href": "Hands-on_Ex2/Hands-on_Ex2_3.html#learning-outcome",
    "title": "Hands-on Exercise 2.3:Local Measures of Spatial Autocorrelation",
    "section": "1.1 Learning Outcome",
    "text": "1.1 Learning Outcome"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2_3.html#importing-geospatial-data",
    "href": "Hands-on_Ex2/Hands-on_Ex2_3.html#importing-geospatial-data",
    "title": "Hands-on Exercise 2.3:Local Measures of Spatial Autocorrelation",
    "section": "Importing Geospatial data",
    "text": "Importing Geospatial data"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2_3.html#theories",
    "href": "Hands-on_Ex2/Hands-on_Ex2_3.html#theories",
    "title": "Hands-on Exercise 2.3:Local Measures of Spatial Autocorrelation",
    "section": "Theories",
    "text": "Theories"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS624_AGA",
    "section": "",
    "text": "Welcome to my Applied Geospatial Analysis Website.\nI will be sharing my learning journey with you."
  }
]