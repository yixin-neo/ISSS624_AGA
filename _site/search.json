[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1_1.html",
    "href": "Hands-on_Ex1/Hands-on_Ex1_1.html",
    "title": "Hands-on Exercise 1.1: Geospatial Data Wrangling with R",
    "section": "",
    "text": "In this hands-on exercise, I will learn how to import and wrangle geospatial data using appropriate R packages:\n\ninstalling and loading sf and tidyverse packages into R environment,\nimporting geospatial data by using appropriate functions of sf package,\nimporting aspatial data by using appropriate function of readr package,\nexploring the content of simple feature data frame by using appropriate Base R and sf functions,\nassigning or transforming coordinate systems by using appropriate sf functions,\nconverting an aspatial data into a sf data frame by using appropriate function of sf package,\nperforming geoprocessing tasks by using appropriate functions of sf package,\nperforming data wrangling tasks by using appropriate functions of dplyr package and\nperforming Exploratory Data Analysis (EDA) by using appropriate functions from ggplot2 package."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1_1.html#data-acquisition",
    "href": "Hands-on_Ex1/Hands-on_Ex1_1.html#data-acquisition",
    "title": "Hands-on Exercise 1.1: Geospatial Data Wrangling with R",
    "section": "1.2 Data Acquisition",
    "text": "1.2 Data Acquisition\nIn this hands-on exercise, data is acquired from the following sources:\n\nMaster Plan 2014 Subzone Boundary (Web) from data.gov.sg\nPre-Schools Location from data.gov.sg\nCycling Path from LTADataMall\nLatest version of Singapore Airbnb listing data from Inside Airbnb"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1_1.html#getting-started",
    "href": "Hands-on_Ex1/Hands-on_Ex1_1.html#getting-started",
    "title": "Hands-on Exercise 1.1: Geospatial Data Wrangling with R",
    "section": "1.3 Getting Started",
    "text": "1.3 Getting Started\nThe code chunk below install and load sf and tidyverse packages into R environment:\n\n\nShow the code\npacman::p_load(sf, tidyverse)\n\n\n\nsf for importing, managing, and processing geospatial data, and\ntidyverse for performing data science tasks such as importing, wrangling and visualising data.\n\nThe sp package provides classes and methods for spatial data types in 2005. The sf package was released in 2016 to give standardise support for vector data in R. It is also coherent with tidyverse, that consists of the following (not exhaustive):\n\nreadr for importing csv data,\nreadxl for importing Excel worksheet,\ntidyr for manipulating data,\ndplyr for transforming data, and\nggplot2 for visualising data"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1_1.html#importing-geospatial-data",
    "href": "Hands-on_Ex1/Hands-on_Ex1_1.html#importing-geospatial-data",
    "title": "Hands-on Exercise 1.1: Geospatial Data Wrangling with R",
    "section": "1.4 Importing Geospatial data",
    "text": "1.4 Importing Geospatial data\nThe data that we will be importing takes the following forms:\n\nMP14_SUBZONE_WEB_PL, a polygon feature layer in ESRI shapefile format,\nCyclingPath, a line feature layer in ESRI shapefile format, and\nPreSchool, a point feature layer in kml file format.\n\n\n1.4.1 Importing polygon feature data in shapefile format\nst_read() is a func from sf package, used to read files in shapefile format.\ndsn- data source name (aka data path)\nlayer - shapefile name. No extensions like .shp, .dbf, .prj and .shx are needed.\n\n\nShow the code\nmpsz <- st_read(dsn=\"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\yixin-neo\\ISSS624_AGA\\Hands-on_Ex1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\ngeospatial objects are multipolygon features\ntotal of 323 multipolygon features and 15 fields in mpsz simple feature data frame.\nmpsz is in svy21 projected coordinates systems\nx extend and y extend of the data are given\n\n\n\nShow the code\nlibrary(knitr)\nkable(head(mpsz, n = 3))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOBJECTID\nSUBZONE_NO\nSUBZONE_N\nSUBZONE_C\nCA_IND\nPLN_AREA_N\nPLN_AREA_C\nREGION_N\nREGION_C\nINC_CRC\nFMEL_UPD_D\nX_ADDR\nY_ADDR\nSHAPE_Leng\nSHAPE_Area\ngeometry\n\n\n\n\n1\n1\nMARINA SOUTH\nMSSZ01\nY\nMARINA SOUTH\nMS\nCENTRAL REGION\nCR\n5ED7EB253F99252E\n2014-12-05\n31595.84\n29220.19\n5267.381\n1630379.3\nMULTIPOLYGON (((31495.56 30…\n\n\n2\n1\nPEARL’S HILL\nOTSZ01\nY\nOUTRAM\nOT\nCENTRAL REGION\nCR\n8C7149B9EB32EEFC\n2014-12-05\n28679.06\n29782.05\n3506.107\n559816.2\nMULTIPOLYGON (((29092.28 30…\n\n\n3\n3\nBOAT QUAY\nSRSZ03\nY\nSINGAPORE RIVER\nSR\nCENTRAL REGION\nCR\nC35FEFF02B13E0E5\n2014-12-05\n29654.96\n29974.66\n1740.926\n160807.5\nMULTIPOLYGON (((29932.33 29…\n\n\n\n\n\n\n\n1.4.2 Importing polyline feature data in shapefile form\nThe code chunk below uses st_read() function of sf package to import CyclingPath shapefile into R as line feature data frame.\n\n\nShow the code\ncyclingpath = st_read(dsn='data/geospatial', layer='CyclingPathGazette')\n\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\yixin-neo\\ISSS624_AGA\\Hands-on_Ex1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 2248 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\n\n\nShow the code\nkable(head(cyclingpath, n = 3))\n\n\n\n\n\nPLANNING_A\nPLANNING_1\ngeometry\n\n\n\n\nNA\nNA\nMULTILINESTRING ((16001.13 …\n\n\nNA\nNA\nMULTILINESTRING ((16012.86 …\n\n\nNA\nNA\nMULTILINESTRING ((16021.49 …\n\n\n\n\n\n\n\n1.4.3 Importing GIS data in kml format\nThe pre-schools-location-kml is in kml format.\n\n\nShow the code\npreschool = st_read('data/geospatial/pre-schools-location-kml.kml')\n\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\yixin-neo\\ISSS624_AGA\\Hands-on_Ex1\\data\\geospatial\\pre-schools-location-kml.kml' \n  using driver `KML'\nSimple feature collection with 1925 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nNote that preschool is in WSG84 coordinates system (3D).\n\n\nShow the code\nkable(head(preschool, n = 3))\n\n\n\n\n\n\n\n\n\n\nName\nDescription\ngeometry\n\n\n\n\nkml_1\n\nPOINT Z (103.7009 1.338325 0)\n\n\nkml_2\n\nPOINT Z (103.8987 1.39044 0)\n\n\nkml_3\n\nPOINT Z (103.8068 1.438017 0)\n\n\n\n\n\n\n\n1.5.1 Working with st_geometry()\nThe column in the sf data.frame that contains the geometries is a list, of class sfc. We can retrieve the geometry list-column in this case by mpsz$geom or mpsz[[1]], but the more general way uses st_geometry() as shown in the code chunk below.\n\n\nShow the code\nclass(mpsz)\n\n\n[1] \"sf\"         \"data.frame\"\n\n\n\n\nShow the code\nst_geometry(mpsz)\n\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\n\n\n1.5.2 Working with glimpse()\nBeside the basic feature information, we also would like to learn more about the associated attribute information in the data frame. This is the time you will find glimpse() of dplyr. very handy as shown in the code chunk below.\n\n\nShow the code\nglimpse(head(mpsz))\n\n\nRows: 6\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\"\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\"\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\"\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\"\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05,…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913\n$ SHAPE_Area <dbl> 1630379.3, 559816.2, 160807.5, 595428.9, 387429.4, 1030378.8\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (((29092.28 30…\n\n\nglimpse() report reveals the data type of each fields. For example FMEL-UPD_D field is in date data type and X_ADDR, Y_ADDR, SHAPE_L and SHAPE_AREA fields are all in double-precision values.\n\n\n1.5.3 Working with head()\nSometimes we would like to reveal complete information of a feature object, this is the job of head() of Base R\n\n\nShow the code\nhead(mpsz,3)\n\n\nSimple feature collection with 3 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 28160.23 ymin: 28369.47 xmax: 32362.39 ymax: 30247.18\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO    SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N PLN_AREA_C\n1        1          1 MARINA SOUTH    MSSZ01      Y    MARINA SOUTH         MS\n2        2          1 PEARL'S HILL    OTSZ01      Y          OUTRAM         OT\n3        3          3    BOAT QUAY    SRSZ03      Y SINGAPORE RIVER         SR\n        REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR\n1 CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84 29220.19\n2 CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06 29782.05\n3 CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96 29974.66\n  SHAPE_Leng SHAPE_Area                       geometry\n1   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3   1740.926   160807.5 MULTIPOLYGON (((29932.33 29..."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1_1.html#plotting-the-geospatial-data",
    "href": "Hands-on_Ex1/Hands-on_Ex1_1.html#plotting-the-geospatial-data",
    "title": "Hands-on Exercise 1.1: Geospatial Data Wrangling with R",
    "section": "1.6 Plotting the Geospatial Data",
    "text": "1.6 Plotting the Geospatial Data\nIn geospatial data science, by looking at the feature information is not enough. We are also interested to visualise the geospatial features. One of the ways is to use the plot() of R Graphic.\n\n\nShow the code\nplot(mpsz)\n\n\n\n\n\nThe default plot of an sf object is a multi-plot of all attributes, up to a reasonable maximum as shown above. We can, however, choose to plot only the geometry (multi-polygon) by using the code chunk below.\n\n\nShow the code\nplot(st_geometry(mpsz))\n\n\n\n\n\nAlternatively, we can also choose the plot the sf object by using a specific attribute as shown in the code chunk below.\n\n\nShow the code\nplot(mpsz[\"REGION_N\"])\n\n\n\n\n\n\n\n\n\n\n\nNote: plot() is mean for plotting the geospatial object for quick look. For high cartographic quality plot, other R package such as tmap should be used."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1_1.html#working-with-projection",
    "href": "Hands-on_Ex1/Hands-on_Ex1_1.html#working-with-projection",
    "title": "Hands-on Exercise 1.1: Geospatial Data Wrangling with R",
    "section": "1.7 Working with Projection",
    "text": "1.7 Working with Projection\nMap projection is an important property of a geospatial data. In order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system.\nIn this section, you will learn how to project a simple feature data frame from one coordinate system to another coordinate system. The technical term of this process is called projection transformation.\n\n1.7.1 Assigning EPSG code to a simple feature data frame\nCommon issues:\n\ncoordinate system of the source data was missing (such as due to missing .proj for ESRI shapefile)\nwrongly assigned during the importing process\n\nUsing the st_crs() to check in detail of the mpszreveals that although it claims to be in svy21 (singapore proj sys), reading until end of print shows that it is wrongly in EPSG9001 (singapore uses epsg3414)\n\n\nShow the code\nst_crs(mpsz)\n\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nIn order to assign the correct EPSG code to mpsz data frame, st_set_crs() of sf package is used as shown in the code chunk below.\n\n\nShow the code\nmpsz3414 <- st_transform(mpsz, 3414)\n\n\nRecheck\n\n\nShow the code\nst_crs(mpsz3414)\n\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNotice that the EPSG code is 3414 now.\n\n\n1.7.2 Transforming the projection of preschool from wgs84 to svy21 (EPSG3414).\nIn geospatial analytics, it is very common for us to transform the original data from geographic coordinate system (3D) to projected coordinate system (2D). This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.\nLet us take preschool simple feature data frame as an example. The print below reveals that it is in wgs84 coordinate system (3D).\n\n\nShow the code\nst_geometry(preschool)\n\n\nGeometry set for 1925 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\n\n\nShow the code\nst_crs(preschool)\n\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\n\nNote that st_set_crs() is not appropriate and st_transform() of sf package should be used. This is because we need to reproject preschool from one coordinate system to another coordinate system mathemetically.\nLet us perform the projection transformation by using the code chunk below.\n\n\nShow the code\npreschool3414 <- st_transform(preschool, crs=3414)\n\n\nRecheck\n\n\nGeometry set for 1925 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11203.01 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\nNotice that it is in svy21 projected coordinate system now. Furthermore, if we refer to Bounding box:, the values are greater than 0-360 range of decimal degree commonly used by most of the geographic coordinate systems."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1_1.html#importing-and-converting-an-aspatial-data",
    "href": "Hands-on_Ex1/Hands-on_Ex1_1.html#importing-and-converting-an-aspatial-data",
    "title": "Hands-on Exercise 1.1: Geospatial Data Wrangling with R",
    "section": "1.8 Importing and Converting An Aspatial Data",
    "text": "1.8 Importing and Converting An Aspatial Data\nIn practice, it is not unusual that we will come across data such as listing of Inside Airbnb. We call this kind of data aspatial data. This is because it is not a geospatial data but among the data fields, there are two fields that capture the x- (long) and y-coordinates (lat) of the data points.\nIn this section, we will learn how to\n\nimport an aspatial data into R environment and save it as a tibble data frame\nconvert it into a simple feature data frame.\n\nThe listings.csv data downloaded from AirBnb will be used.\n\n1.8.1 Importing the aspatial data\nSince listings data set is in csv file format, we will use read_csv() of readr package to import listing.csv as shown the code chunk below. The output R object is called listings and it is a tibble data frame.\n\n\nShow the code\nlistings <- read_csv('data/aspatial/listings.csv')\nclass(listings)\n\n\n[1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\" \n\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\nThe code chunk below shows list() of Base R instead of glimpse() is used to do the job.\n\n\nShow the code\nlist(listings)\n\n\n[[1]]\n# A tibble: 4,161 × 18\n       id name      host_id host_name neighbourhood_group neighbourhood latitude\n    <dbl> <chr>       <dbl> <chr>     <chr>               <chr>            <dbl>\n 1  50646 Pleasant…  227796 Sujatha   Central Region      Bukit Timah       1.33\n 2  71609 Ensuite …  367042 Belinda   East Region         Tampines          1.35\n 3  71896 B&B  Roo…  367042 Belinda   East Region         Tampines          1.35\n 4  71903 Room 2-n…  367042 Belinda   East Region         Tampines          1.35\n 5 275344 15 mins … 1439258 Kay       Central Region      Bukit Merah       1.29\n 6 289234 Booking …  367042 Belinda   East Region         Tampines          1.34\n 7 294281 5 mins w… 1521514 Elizabeth Central Region      Newton            1.31\n 8 324945 Cozy Blu… 1439258 Kay       Central Region      Bukit Merah       1.29\n 9 330089 Cozy Blu… 1439258 Kay       Central Region      Bukit Merah       1.29\n10 330095 10 mins … 1439258 Kay       Central Region      Bukit Merah       1.29\n# ℹ 4,151 more rows\n# ℹ 11 more variables: longitude <dbl>, room_type <chr>, price <dbl>,\n#   minimum_nights <dbl>, number_of_reviews <dbl>, last_review <date>,\n#   reviews_per_month <dbl>, calculated_host_listings_count <dbl>,\n#   availability_365 <dbl>, number_of_reviews_ltm <dbl>, license <chr>\n\n\nOther ways of displaying tabular data in R:\n\nkablegtDT (interactive table)\n\n\n\n\nShow the code\nkable(head(listings))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nid\nname\nhost_id\nhost_name\nneighbourhood_group\nneighbourhood\nlatitude\nlongitude\nroom_type\nprice\nminimum_nights\nnumber_of_reviews\nlast_review\nreviews_per_month\ncalculated_host_listings_count\navailability_365\nnumber_of_reviews_ltm\nlicense\n\n\n\n\n50646\nPleasant Room along Bukit Timah\n227796\nSujatha\nCentral Region\nBukit Timah\n1.33432\n103.7852\nPrivate room\n80\n92\n18\n2014-12-26\n0.18\n1\n365\n0\nNA\n\n\n71609\nEnsuite Room (Room 1 & 2) near EXPO\n367042\nBelinda\nEast Region\nTampines\n1.34537\n103.9589\nPrivate room\n145\n92\n20\n2020-01-17\n0.15\n6\n340\n0\nNA\n\n\n71896\nB&B Room 1 near Airport & EXPO\n367042\nBelinda\nEast Region\nTampines\n1.34754\n103.9596\nPrivate room\n85\n92\n24\n2019-10-13\n0.18\n6\n265\n0\nNA\n\n\n71903\nRoom 2-near Airport & EXPO\n367042\nBelinda\nEast Region\nTampines\n1.34531\n103.9610\nPrivate room\n85\n92\n47\n2020-01-09\n0.34\n6\n365\n0\nNA\n\n\n275344\n15 mins to Outram MRT Single Room\n1439258\nKay\nCentral Region\nBukit Merah\n1.28836\n103.8114\nPrivate room\n49\n60\n14\n2022-07-09\n0.11\n44\n296\n1\nS0399\n\n\n289234\nBooking for 3 bedrooms\n367042\nBelinda\nEast Region\nTampines\n1.34490\n103.9598\nPrivate room\n184\n92\n12\n2019-01-01\n0.10\n6\n285\n0\nNA\n\n\n\n\n\n\n\n\n\nShow the code\nlibrary(gt)\nhead(listings) %>% gt() %>% tab_header(title = \"AirBnB listings\")\n\n\n\n\n\n\n  \n    \n      AirBnB listings\n    \n    \n    \n      id\n      name\n      host_id\n      host_name\n      neighbourhood_group\n      neighbourhood\n      latitude\n      longitude\n      room_type\n      price\n      minimum_nights\n      number_of_reviews\n      last_review\n      reviews_per_month\n      calculated_host_listings_count\n      availability_365\n      number_of_reviews_ltm\n      license\n    \n  \n  \n    50646\nPleasant Room along Bukit Timah\n227796\nSujatha\nCentral Region\nBukit Timah\n1.33432\n103.7852\nPrivate room\n80\n92\n18\n2014-12-26\n0.18\n1\n365\n0\nNA\n    71609\nEnsuite Room (Room 1 & 2) near EXPO\n367042\nBelinda\nEast Region\nTampines\n1.34537\n103.9589\nPrivate room\n145\n92\n20\n2020-01-17\n0.15\n6\n340\n0\nNA\n    71896\nB&B  Room 1 near Airport & EXPO\n367042\nBelinda\nEast Region\nTampines\n1.34754\n103.9596\nPrivate room\n85\n92\n24\n2019-10-13\n0.18\n6\n265\n0\nNA\n    71903\nRoom 2-near Airport & EXPO\n367042\nBelinda\nEast Region\nTampines\n1.34531\n103.9610\nPrivate room\n85\n92\n47\n2020-01-09\n0.34\n6\n365\n0\nNA\n    275344\n15 mins to Outram MRT Single Room\n1439258\nKay\nCentral Region\nBukit Merah\n1.28836\n103.8114\nPrivate room\n49\n60\n14\n2022-07-09\n0.11\n44\n296\n1\nS0399\n    289234\nBooking for 3 bedrooms\n367042\nBelinda\nEast Region\nTampines\n1.34490\n103.9598\nPrivate room\n184\n92\n12\n2019-01-01\n0.10\n6\n285\n0\nNA\n  \n  \n  \n\n\n\n\n\n\n\n\nShow the code\nlibrary(DT)\ndatatable(head(listings), class = 'cell-border stripe', options = list(pageLength = 3))\n\n\n\n\n\nTwo useful fields we need are latitude and longitude and they are in decimal degree format. As a best guess, we will assume that the data is in wgs84 Geographic Coordinate System.\n\n\n1.8.2 Creating a simple feature data frame from an aspatial data frame\nThe code chunk below converts listing data frame into a simple feature data frame by using st_as_sf() of sf packages.\nEPSG 4326 is associated with WGS84.\n\n\nShow the code\nlistings_sf <- st_as_sf(listings,\n                        coords = c('longitude','latitude'),\n                        crs=4326) %>%\n  st_transform(crs=3414)\n\nclass(listings_sf)\n\n\n[1] \"sf\"         \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\nThings to learn from the arguments above:\n\ncoords argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\ncrs argument requires you to provide the coordinates system in epsg format. EPSG: 4326 is wgs84 Geographic Coordinate System and EPSG: 3414 is Singapore SVY21 Projected Coordinate System. You can search for other country’s epsg code by referring to epsg.io.\n\nLet us examine the content of our newly created sf dataframe\n\n\nShow the code\nglimpse(listings_sf)\n\n\nRows: 4,161\nColumns: 17\n$ id                             <dbl> 50646, 71609, 71896, 71903, 275344, 289…\n$ name                           <chr> \"Pleasant Room along Bukit Timah\", \"Ens…\n$ host_id                        <dbl> 227796, 367042, 367042, 367042, 1439258…\n$ host_name                      <chr> \"Sujatha\", \"Belinda\", \"Belinda\", \"Belin…\n$ neighbourhood_group            <chr> \"Central Region\", \"East Region\", \"East …\n$ neighbourhood                  <chr> \"Bukit Timah\", \"Tampines\", \"Tampines\", …\n$ room_type                      <chr> \"Private room\", \"Private room\", \"Privat…\n$ price                          <dbl> 80, 145, 85, 85, 49, 184, 79, 49, 55, 5…\n$ minimum_nights                 <dbl> 92, 92, 92, 92, 60, 92, 92, 60, 60, 60,…\n$ number_of_reviews              <dbl> 18, 20, 24, 47, 14, 12, 133, 17, 12, 3,…\n$ last_review                    <date> 2014-12-26, 2020-01-17, 2019-10-13, 20…\n$ reviews_per_month              <dbl> 0.18, 0.15, 0.18, 0.34, 0.11, 0.10, 1.0…\n$ calculated_host_listings_count <dbl> 1, 6, 6, 6, 44, 6, 7, 44, 44, 44, 6, 7,…\n$ availability_365               <dbl> 365, 340, 265, 365, 296, 285, 365, 181,…\n$ number_of_reviews_ltm          <dbl> 0, 0, 0, 0, 1, 0, 0, 3, 2, 0, 1, 0, 0, …\n$ license                        <chr> NA, NA, NA, NA, \"S0399\", NA, NA, \"S0399…\n$ geometry                       <POINT [m]> POINT (22646.02 35167.9), POINT (…\n\n\nA new column geometry has been added at the back of the df. Additionally, lat long columns were both dropped from the df."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1_1.html#geoprocessing-with-sf-package",
    "href": "Hands-on_Ex1/Hands-on_Ex1_1.html#geoprocessing-with-sf-package",
    "title": "Hands-on Exercise 1.1: Geospatial Data Wrangling with R",
    "section": "1.9 Geoprocessing with sf package",
    "text": "1.9 Geoprocessing with sf package\nBesides providing functions to handling (i.e. importing, exporting, assigning projection, transforming projection etc) geospatial data, sf package also offers a wide range of geoprocessing (also known as GIS analysis) functions.\nIn this section, we will learn how to perform two commonly used geoprocessing functions, namely buffering and point in polygon count.\n\n1.9.1 Buffering\nThe scenario:\nThe authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.\nThe solution:\nA buffer is a zone around a spatial object, recall that cyclingpath is a multiline-string sf object.\n\n\nShow the code\nst_geometry(cyclingpath)\n\n\nGeometry set for 2248 features \nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nFirstly, st_buffer() of sf package is used to compute the 5-meter buffers around cyclingpath .\n\nbuffer_cycling <- st_buffer(cyclingpath,\n                            dist = 5,\n                            nQuadSegs = 30)\n\nTake a peak at this df before calculating area.\n\n\nShow the code\nhead(buffer_cycling)\n\n\nSimple feature collection with 6 features and 2 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 15867.37 ymin: 36795.67 xmax: 16026.95 ymax: 36953.73\nProjected CRS: SVY21\n  PLANNING_A PLANNING_1                       geometry\n1       <NA>       <NA> POLYGON ((16004.15 36799.78...\n2       <NA>       <NA> POLYGON ((16013.15 36849.86...\n3       <NA>       <NA> POLYGON ((16016.91 36892.98...\n4       <NA>       <NA> POLYGON ((16017.59 36864, 1...\n5       <NA>       <NA> POLYGON ((16022.36 36900.57...\n6       <NA>       <NA> POLYGON ((15903.87 36941.12...\n\n\nNow, we will calculate the area of the buffers as shown in the code chunk below.\nWe are also adding a derived column to buffer_cycling too.\n\nbuffer_cycling$AREA <- st_area(buffer_cycling)\nkable(head(buffer_cycling))\n\n\n\n\n\n\n\n\n\n\nPLANNING_A\nPLANNING_1\ngeometry\nAREA\n\n\n\n\nNA\nNA\nPOLYGON ((16004.15 36799.78…\n186.2934 [m^2]\n\n\nNA\nNA\nPOLYGON ((16013.15 36849.86…\n293.4840 [m^2]\n\n\nNA\nNA\nPOLYGON ((16016.91 36892.98…\n284.8275 [m^2]\n\n\nNA\nNA\nPOLYGON ((16017.59 36864, 1…\n144.8915 [m^2]\n\n\nNA\nNA\nPOLYGON ((16022.36 36900.57…\n281.2016 [m^2]\n\n\nNA\nNA\nPOLYGON ((15903.87 36941.12…\n398.7081 [m^2]\n\n\n\n\n\nLastly, sum() of Base R will be used to derive the total land involved\n\n\nShow the code\nsum(buffer_cycling$AREA)\n\n\n1556978 [m^2]\n\n\nGood Job!\nMission Accomplished!\n\n\n1.9.2 Point-in-polygon count\nThe scenario:\nA pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.\nBefore that, lets double confirm both data are using same projection system.\n\n\nShow the code\nidentical(st_crs(mpsz3414), st_crs(preschool3414))\n\n\n[1] TRUE\n\n\nThe solution:\nThe code chunk below performs two operations at one go.\n\nidentify pre-schools located inside each Planning Subzone by using st_intersects().\nlength() of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.\n\n\n\nShow the code\nmpsz3414$`PreSch Count` <- lengths(st_intersects(mpsz3414,preschool3414))\n\n\n\n\n\n\n\n\nst_intersects(): count points in polygon\nst_intersection(): find polygon areas overlap\n\n\n\nNow check summary stats of PreSch Count column in each subzone.\n\n\nShow the code\nsummary(mpsz3414$`PreSch Count`)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    3.00    5.96    9.00   58.00 \n\n\nTo list the planning subzone with the most number of pre-school, the top_n() of dplyr package can be used.\n\n\nShow the code\nkable(top_n(mpsz3414, 3, `PreSch Count`) %>%\n        arrange(desc(`PreSch Count`)))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOBJECTID\nSUBZONE_NO\nSUBZONE_N\nSUBZONE_C\nCA_IND\nPLN_AREA_N\nPLN_AREA_C\nREGION_N\nREGION_C\nINC_CRC\nFMEL_UPD_D\nX_ADDR\nY_ADDR\nSHAPE_Leng\nSHAPE_Area\nPreSch Count\ngeometry\n\n\n\n\n189\n2\nTAMPINES EAST\nTMSZ02\nN\nTAMPINES\nTM\nEAST REGION\nER\n21658EAAF84F4D8D\n2014-12-05\n41122.55\n37392.39\n10180.624\n4339824\n58\nMULTIPOLYGON (((42196.76 38…\n\n\n290\n3\nWOODLANDS EAST\nWDSZ03\nN\nWOODLANDS\nWD\nNORTH REGION\nNR\nC90769E43EE6B0F2\n2014-12-05\n24506.64\n46991.63\n6603.608\n2553464\n47\nMULTIPOLYGON (((24786.75 46…\n\n\n199\n4\nBEDOK NORTH\nBDSZ04\nN\nBEDOK\nBD\nEAST REGION\nER\nA2254301F85C1EDF\n2014-12-05\n39429.21\n34737.62\n8414.962\n3203663\n31\nMULTIPOLYGON (((40284.24 35…\n\n\n\n\n\nTo calculate the density (# schools/subzone area) of preschool by planning subzone :\n\n\nShow the code\nmpsz3414 <- mpsz3414 %>%\n  mutate(AREA = st_area(mpsz3414),\n         DENSITY = `PreSch Count` /AREA * 1000000) %>% \n  arrange(desc(DENSITY))\n\nkable(head(mpsz3414))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOBJECTID\nSUBZONE_NO\nSUBZONE_N\nSUBZONE_C\nCA_IND\nPLN_AREA_N\nPLN_AREA_C\nREGION_N\nREGION_C\nINC_CRC\nFMEL_UPD_D\nX_ADDR\nY_ADDR\nSHAPE_Leng\nSHAPE_Area\nPreSch Count\nAREA\nDENSITY\ngeometry\n\n\n\n\n27\n8\nCECIL\nDTSZ08\nY\nDOWNTOWN CORE\nDT\nCENTRAL REGION\nCR\n65AA82AF6F4D925D\n2014-12-05\n29730.20\n29011.33\n2116.0947\n196619.86\n7\n196619.86 [m^2]\n35.60169 [1/m^2]\nMULTIPOLYGON (((29808.18 28…\n\n\n278\n3\nMANDAI ESTATE\nMDSZ03\nN\nMANDAI\nMD\nNORTH REGION\nNR\nF6266F7368DBB9AB\n2014-12-05\n27082.70\n45367.46\n1633.7084\n143137.94\n5\n143137.94 [m^2]\n34.93134 [1/m^2]\nMULTIPOLYGON (((27119.56 45…\n\n\n37\n4\nPHILLIP\nDTSZ04\nY\nDOWNTOWN CORE\nDT\nCENTRAL REGION\nCR\n615D4EDDEF809F8E\n2014-12-05\n29706.72\n29744.91\n871.5549\n39437.94\n1\n39437.94 [m^2]\n25.35630 [1/m^2]\nMULTIPOLYGON (((29814.11 29…\n\n\n291\n3\nSEMBAWANG CENTRAL\nSBSZ03\nN\nSEMBAWANG\nSB\nNORTH REGION\nNR\n772A64AB9A93FC3A\n2014-12-05\n26268.73\n47558.08\n3955.1176\n962437.40\n23\n962437.40 [m^2]\n23.89766 [1/m^2]\nMULTIPOLYGON (((26311.14 46…\n\n\n253\n3\nSERANGOON NORTH\nSGSZ03\nN\nSERANGOON\nSG\nNORTH-EAST REGION\nNER\nC685042EC58E5C55\n2014-12-05\n32458.80\n39597.64\n3610.7324\n684704.30\n15\n684704.30 [m^2]\n21.90727 [1/m^2]\nMULTIPOLYGON (((32860.5 397…\n\n\n272\n3\nSENGKANG TOWN CENTRE\nSESZ03\nN\nSENGKANG\nSE\nNORTH-EAST REGION\nNER\n5A2D0E9E6B285069\n2014-12-05\n35163.81\n41501.14\n5216.4005\n1455507.86\n30\n1455507.86 [m^2]\n20.61136 [1/m^2]\nMULTIPOLYGON (((35615.75 40…\n\n\n\n\n\nThe table above shows the top 6 highest density subzones ."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1_1.html#theories",
    "href": "Hands-on_Ex1/Hands-on_Ex1_1.html#theories",
    "title": "Hands-on Exercise 1.1: Geospatial Data Wrangling with R",
    "section": "Theories",
    "text": "Theories\n\nKML and shapefiles\nA KMZ file is a zipped (or compressed) KML file, and a SHZ is a zipped/compressed Shapefile.\nA shapefile is an Esri vector data storage format for storing the location, shape, and attributes of geographic features. It is stored as a set of related files and contains one feature class.\nThe shapefile format can spatially describe vector features: points, lines, and polygons, representing, for example, water wells, rivers, and lakes. Each item usually has attributes that describe it, such as name or temperature.\nKML and Shapefiles could contain the exact same data, however KML (Keyhole Markup Language) is much more suited to displaying time based track information, whereas shapefiles are more suited to displaying Geometries, like boundaries, areas, roads, etc.\nShapefiles are composed of 3 mandatory files\n·       . shp (geometry), <- multipolygon, polylines or points. Can only be one type in each file , can combined in layers\n·       . dbf (attributes) <- table\n·       . shx (index)  <- binds first two together\n\n\nGCS [Geographic Coordinate System] (3D) and PCS [Projected Coordinate System ] (2D)\nGCS: uses lat, long, elevation to locate positions on Earth. Units are in degree and metres. Earth is represented as a sphere. Eg. WGS84 (world Gedetic system 1984)\nPCS: Units are usually metres to locate position on a Flat surface. Involves projecting 3D Earth into a 2D plane. It distorts the true shapes, areas, distances, or directions to some extent, depending on the projection method chosen.\nPreserve:\n·       Conformal projections minimize distortion in shape\n·       Equidistant projections minimize distortion in distance\n·       Equal-area projection minimize distortion in area\n·       Azimuthal or True-direction projections minimize distortion in direction.\nGoogle maps uses Mercator projection system. It is chosen as it preserves direction and angles. It is useful for navigation (google map) . It is originally created for sea navigation in older days. The cons are that this projection does not preserve area and shape.\nSingapore uses SVY21 or the EPSG:3414 projected coordinate system.\n\n\nGeospatial data handling functions\n\nst_read & read sf: read simple features from file or database, or retrieve layer names and their geometry type(s)\nst write &write_sf: write simple features object to file or database\nst_as_sf: convert a sf object from a non-geospatial tabular data frame\nst as_text: convert to Well Known Text(WKT)\nst as_binary: convert to Well Known Binary(WKB)\nst_as_sfc: convert geometries to sfc (e.g., from WKT, WKB) as(x, “Spatial”): convert to Spatial*\nst transform(x, crs, …): convert coordinates of x to a different coordinate reference system\n\nThe code chunk below allows us to unsf the mpsz and work tbl_df or data.frame.\n\n\nShow the code\nmpsz_tbl_df <- as_tibble(mpsz)"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1_2.html#getting-started",
    "href": "Hands-on_Ex1/Hands-on_Ex1_2.html#getting-started",
    "title": "Hands-on Exercise 1.2: Choropleth Mapping with R",
    "section": "Getting Started",
    "text": "Getting Started\n\n\nShow the code\npacman::p_load(sf, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1_2.html#learning-outcome",
    "href": "Hands-on_Ex1/Hands-on_Ex1_2.html#learning-outcome",
    "title": "Hands-on Exercise 1.2: Choropleth Mapping with R",
    "section": "1.1 Learning Outcome",
    "text": "1.1 Learning Outcome"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1_2.html#importing-geospatial-data",
    "href": "Hands-on_Ex1/Hands-on_Ex1_2.html#importing-geospatial-data",
    "title": "Hands-on Exercise 1.2: Choropleth Mapping with R",
    "section": "Importing Geospatial data",
    "text": "Importing Geospatial data\n\nImporting polygon feature data\nst_read() is a func from sf package, used to read files in shapefile format.\ndsn- data source name\n\n\nShow the code\nmpsz <- st_read(dsn=\"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\yixin-neo\\ISSS624_AGA\\Hands-on_Ex1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n\nShow the code\nmpsz_tbl_df <- as_tibble(mpsz)"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1_2.html#theories",
    "href": "Hands-on_Ex1/Hands-on_Ex1_2.html#theories",
    "title": "Hands-on Exercise 1.2: Choropleth Mapping with R",
    "section": "Theories",
    "text": "Theories"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2_1.html#getting-started",
    "href": "Hands-on_Ex2/Hands-on_Ex2_1.html#getting-started",
    "title": "Hands-on Exercise 2.1: Spatial Weights and Applications",
    "section": "Getting Started",
    "text": "Getting Started\n\n\nShow the code\npacman::p_load(sf, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2_1.html#learning-outcome",
    "href": "Hands-on_Ex2/Hands-on_Ex2_1.html#learning-outcome",
    "title": "Hands-on Exercise 2.1: Spatial Weights and Applications",
    "section": "1.1 Learning Outcome",
    "text": "1.1 Learning Outcome"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2_1.html#importing-geospatial-data",
    "href": "Hands-on_Ex2/Hands-on_Ex2_1.html#importing-geospatial-data",
    "title": "Hands-on Exercise 2.1: Spatial Weights and Applications",
    "section": "Importing Geospatial data",
    "text": "Importing Geospatial data"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2_1.html#theories",
    "href": "Hands-on_Ex2/Hands-on_Ex2_1.html#theories",
    "title": "Hands-on Exercise 2.1: Spatial Weights and Applications",
    "section": "Theories",
    "text": "Theories"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2_2.html#getting-started",
    "href": "Hands-on_Ex2/Hands-on_Ex2_2.html#getting-started",
    "title": "Hands-on Exercise 2.2: Global Measures of Spatial Autocorrelation",
    "section": "Getting Started",
    "text": "Getting Started\n\n\nShow the code\npacman::p_load(sf, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2_2.html#learning-outcome",
    "href": "Hands-on_Ex2/Hands-on_Ex2_2.html#learning-outcome",
    "title": "Hands-on Exercise 2.2: Global Measures of Spatial Autocorrelation",
    "section": "1.1 Learning Outcome",
    "text": "1.1 Learning Outcome"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2_2.html#importing-geospatial-data",
    "href": "Hands-on_Ex2/Hands-on_Ex2_2.html#importing-geospatial-data",
    "title": "Hands-on Exercise 2.2: Global Measures of Spatial Autocorrelation",
    "section": "Importing Geospatial data",
    "text": "Importing Geospatial data"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2_2.html#theories",
    "href": "Hands-on_Ex2/Hands-on_Ex2_2.html#theories",
    "title": "Hands-on Exercise 2.2: Global Measures of Spatial Autocorrelation",
    "section": "Theories",
    "text": "Theories"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2_3.html#getting-started",
    "href": "Hands-on_Ex2/Hands-on_Ex2_3.html#getting-started",
    "title": "Hands-on Exercise 2.3:Local Measures of Spatial Autocorrelation",
    "section": "Getting Started",
    "text": "Getting Started\n\n\nShow the code\npacman::p_load(sf, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2_3.html#learning-outcome",
    "href": "Hands-on_Ex2/Hands-on_Ex2_3.html#learning-outcome",
    "title": "Hands-on Exercise 2.3:Local Measures of Spatial Autocorrelation",
    "section": "1.1 Learning Outcome",
    "text": "1.1 Learning Outcome"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2_3.html#importing-geospatial-data",
    "href": "Hands-on_Ex2/Hands-on_Ex2_3.html#importing-geospatial-data",
    "title": "Hands-on Exercise 2.3:Local Measures of Spatial Autocorrelation",
    "section": "Importing Geospatial data",
    "text": "Importing Geospatial data"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2_3.html#theories",
    "href": "Hands-on_Ex2/Hands-on_Ex2_3.html#theories",
    "title": "Hands-on Exercise 2.3:Local Measures of Spatial Autocorrelation",
    "section": "Theories",
    "text": "Theories"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS624_AGA",
    "section": "",
    "text": "Welcome to my Applied Geospatial Analysis Website.\nI will be sharing my learning journey with you."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1_1.html#explorotary-data-analysis-eda",
    "href": "Hands-on_Ex1/Hands-on_Ex1_1.html#explorotary-data-analysis-eda",
    "title": "Hands-on Exercise 1.1: Geospatial Data Wrangling with R",
    "section": "1.10 Explorotary Data Analysis (EDA)",
    "text": "1.10 Explorotary Data Analysis (EDA)\nIn practice, many geospatial analytics start with Exploratory Data Analysis. In this section, wewill learn how to use appropriate ggplot2 functions to create functional and yet truthful statistical graphs for EDA purposes.\nFirstly, we will plot a histogram to reveal the distribution of PreSch Density. Conventionally, hist() of R Graphics will be used as shown in the code chunk below.\n\n\nShow the code\nhist(mpsz3414$DENSITY)\n\n\n\n\n\nAlthough the syntax is very easy to use however the output is far from meeting publication quality. Furthermore, the function has limited room for further customisation.\nIn the code chunk below, appropriate ggplot2 functions will be used.\n\nStaticInteractive (plotly)\n\n\n\n\nShow the code\nq <- quantile(as.numeric(mpsz3414$DENSITY), probs = c(0.25, 0.5, 0.75))\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(DENSITY)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  geom_vline(xintercept = q[2]+1, linetype='dashed', size = 0.5, color='blue') +\n  geom_vline(xintercept = q[3]+1, linetype='dashed', size = 0.5) +\n  annotate('text' , x= 4, y=75, label='50th \\npercentile', size = 2) +\n  annotate('text' , x= 9, y=75, label='75th \\npercentile', size = 2) +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\n\n\n\n\n\nShow the code\nlibrary(plotly)\nq <- quantile(as.numeric(mpsz3414$DENSITY), probs = c(0.25, 0.5, 0.75))\n\np <- ggplot(data=mpsz3414, \n       aes(x= as.numeric(DENSITY)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  geom_vline(xintercept = q[2]+1, linetype='dashed', size = 0.5, color='blue') +\n  geom_vline(xintercept = q[3]+1, linetype='dashed', size = 0.5) +\n  annotate('text' , x= 4, y=75, label='50th \\npercentile', size = 2) +\n  annotate('text' , x= 9, y=75, label='75th \\npercentile', size = 2) +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\nggplotly(p)\n\n\n\n\n\n\n\n\n\nDIY: Using ggplot2 method, plot a scatterplot showing the relationship between Pre-school Density and Pre-school Count.\n\n\nShow the code\nggplot(data=mpsz3414, \n       aes(y = `PreSch Count`, \n           x= as.numeric(DENSITY)))+\n  geom_point(color=\"black\", \n             fill=\"light blue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school count\")"
  }
]