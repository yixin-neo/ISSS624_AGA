---
title: "Hands-on Exercise 1.2: Choropleth Mapping with R"
author: "NeoYX"
date: '15 Nov 2023'
date-modified: "`r Sys.Date()`"
editor: visual
execute: 
  freeze: auto
  warning: false
  #echo: false
  #message: false
format: 
  html:
    code-fold: false
    code-overflow: scroll
    code-summary: "Show the code"
    code-line-numbers: true
---

## 2.1 Overview

Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.

## 2.2 Getting Started

In this hands-on exercise, we learn how to plot functional and truthful choropleth maps by using r packages called **tmap** package.

Beside **tmap** package, four other R packages will be used. They are:

-   [**readr**](https://readr.tidyverse.org/) for importing delimited text file,

-   [**tidyr**](https://tidyr.tidyverse.org/) for tidying data,

-   [**dplyr**](https://dplyr.tidyverse.org/) for wrangling data and

-   [**sf**](https://cran.r-project.org/web/packages/sf/) for handling geospatial data.

Among the four packages, **readr**, **tidyr** and **dplyr** are part of **tidyverse** package.

Lets us first load all the required libraries.

```{r}
pacman::p_load(sf, tmap, tidyverse)
```

## 2.3 Importing Data into R

### 2.3.1 The Data

The Two datasets will be used to create the choropleth map are:

-   Master Plan 2014 Subzone Boundary (Web) (i.e. `MP14_SUBZONE_WEB_PL`) in ESRI shapefile format.

-   Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. `respopagesextod2011to2020.csv`). This is an aspatial data fie. It can be downloaded at [Department of Statistics, Singapore](https://www.singstat.gov.sg/), the specific link can be found [here](https://www.singstat.gov.sg/find-data/search-by-theme/population/geographic-distribution/latest-data). Although it does not contain any coordinates values, but it's PA and SZ fields can be used as unique identifiers to geocode to `MP14_SUBZONE_WEB_PL` shapefile.

### 2.3.2 Importing Geospatial Data into R

```{r}
mpsz <- st_read(dsn='data/geospatial',
                layer = 'MP14_SUBZONE_WEB_PL')
```

Check the projection system of mpsz. It is not in svy21 or epsg3414. We will need to convert it later.

```{r}
st_crs(mpsz)
```

Take a look at first few records of data

```{r}
glimpse(mpsz)
```

Lets convert to EPSG3414 now.

```{r}
mpsz3414 <- st_transform(mpsz, 3414)
st_crs(mpsz3414)
```

```{r}
head(mpsz3414,3)
```

### 2.3.3 Importing Attribute Data into R

Next, we will import *respopagsex2000to2020.csv* file into RStudio and save the file into an R dataframe called *popagsex*.

The task will be performed by using *read_csv()* function of **readr** package as shown in the code chunk below.

```{r}
popdata <- read_csv("data/aspatial/respopagesextod2011to2020.csv")
head(popdata)
```

Summary stats using skimr package.

```{r}
library(skimr)
skim(popdata)
```

## 2.3.4 Data preparation

Prepare a data table with year **2020** values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.

-   YOUNG: age group 0 to 4 until age group 20 to 24,

-   ECONOMY ACTIVE: age group 25-29 until age group 60-64,

-   AGED: age group 65 and above,

-   TOTAL: all age group, and

-   DEPENDENCY: the ratio between young and aged against economy active group

### 2.3.4.1 Data Wrangling

-   *pivot_wider()* (rows to column headers) of **tidyr** package, and

-   *mutate() (create new cal col)*, *filter() (subset rows)*, *group_by()* and *select() (select cols)* of **dplyr** package

The complete code chunk:

```{r}
popdata2020 <- popdata %>% 
  filter(Time==2020) %>% 
  group_by(PA,SZ,AG) %>%   #<< for calculating POP column below
  summarise(`POP` = sum(Pop)) %>% 
  ungroup() %>%
  pivot_wider(names_from = AG,
              values_from = POP) %>% 
  mutate(YOUNG = rowSums(.[3:6])
         +rowSums(.[14])) %>% 
  mutate(`ECONOMY ACTIVE` = rowSums(.[7:13])+rowSums(.[15])) %>%
  mutate(AGED = rowSums(.[16:21])) %>%
  mutate(TOTAL = rowSums(.[3:21])) %>% 
  mutate(DEPENDENCY = (YOUNG+AGED)/`ECONOMY ACTIVE`) %>% 
  select(PA, SZ,YOUNG,'ECONOMY ACTIVE', AGED, TOTAL, DEPENDENCY)

head(popdata2020)
```

To understand the first 6 lines of code in the code chunk above, print the output:

```{r}
#| echo: false
output <- popdata %>% 
  filter(Time==2020) %>% 
  group_by(PA,SZ,AG) %>%   #<< for calculating POP column below
  summarise(`POP` = sum(Pop)) %>% 
  ungroup() %>%
  pivot_wider(names_from = AG,
              values_from = POP)

head(output)
```

#### 2.3.4.2 Joining the attribute data and geospatial data

Before we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.

Since `mpsz`'s SUBZONE_N and PLN_AREA_N are in uppercase, we have to convert PA and SZ fields in `popdata2020` into all uppercase using:

1.  [mutate.at()](https://dplyr.tidyverse.org/reference/mutate_all.html)\<- mutate multiple columns

2.  first argument of mutate_at(): .var \<- list of columns generated by vars()

3.  second argument: .funs \<- a function fun, a quosure style lambda. The function used in toupper() \<- to upper case

There are many ways to achieve the final output

::: panel-tabset
##### Prof's book

```{r}
popdata2020 <- popdata2020 %>% 
  mutate_at(.vars= vars(PA, SZ),
            .funs = funs(toupper)) %>% 
  filter(`ECONOMY ACTIVE` >0)

popdata2020
```

The reason for filtering is because some subzones are not inhibited by residents as seen below.

##### Alternative

```{r}
#| eval: false
popdata2020 %>%
  mutate(PA = toupper(PA),
         SZ = toupper(SZ)) %>% 
  filter(`ECONOMY ACTIVE` >0)
```
:::

Next, *left_join()* of **dplyr** is used to join the geographical data and attribute table using planning subzone name e.g. *SUBZONE_N* and *SZ* as the common identifier.

```{r}
mpsz_pop2020 <-left_join(mpsz3414, popdata2020,
                         by = c('SUBZONE_N' = 'SZ'))
mpsz_pop2020
```

::: callout-important
*left_join()* of **dplyr** package is used with `mpsz` simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.
:::

Original \# rows in `mpsz3414` = 323

Original \# of rows in `popdata2022` = 234

Final \# of rows in mpsz_pop2020 = 323

Write the data as rds, can preserve the format of data.

```{r}
# write_rds(mpsz_pop2020, 'data/rds/mpszpop2020.rds')
# mpsz_pop2020 <- readRDS('data/rds/mpszpop2020.rds')
```

Lets take a look at the df mpsz_pop2020

## 2.4 Choropleth Mapping Geospatial Data Using *tmap*

Two approaches can be used to prepare thematic map using *tmap*, they are:

-   Plotting a thematic map quickly by using *qtm()*.

-   Plotting highly customisable thematic map by using tmap elements.

### 2.4.1 Plotting a choropleth map quickly by using *qtm()*

The easiest and quickest to draw a choropleth map using **tmap** is using *qtm()*. It is concise and provides a good default visualisation in many cases.

```{r}
tmap_mode('plot')
#tmap_mode('view')
#ttm()
#last_map()
#tmap_options(check.and.fix = TRUE)

qtm(mpsz_pop2020,
    fill='DEPENDENCY')
```

Things to learn from the code chunk above:

-   *tmap_mode()* with "plot" option is used to produce a static map. For interactive mode, "view" option should be used.

-   *fill* argument is used to map the attribute (i.e. DEPENDENCY)

### 2.4.2 Creating a Choropleth map by using [tmap's elements](https://www.rdocumentation.org/packages/tmap/versions/3.3-3/topics/tmap-element)

tmap' drawing elements (unlike qtm() ) is able to give us finer control over our chloropleth map.

[tm_shape()](https://www.rdocumentation.org/packages/tmap/versions/3.3-3/topics/tm_shape) \<- define input data and specify the shape object / spatial data object

[tm_fill()](https://www.rdocumentation.org/packages/tmap/versions/3.3-3/topics/tm_fill) \<- fills polygons (no border)

-   style: method to process the color scale when **`col (data variable)`** is a numeric variable. To process numeric and categorical use "cat"

-   [palette](https://renenyffenegger.ch/notes/development/languages/R/packages/tmaptools/index) : palettes names or vectors of colors. default is taken from tm_layout's aes.paletttes argument. To reverse the colour scheme , add a "-" prefix.

[tm_borders()]{.underline} \<- draws the borders of polygons (alpha is 0-1, transparency)

[tm_polygons()]{.underline} (= tm_fill() + tm_borders() )\<- fills the polygon and draws the polygon borders

***\*qtm = shape + polygon or \* qtm = shape + fill + border***

[tm_layout()](https://www.rdocumentation.org/packages/tmap/versions/3.3-3/topics/tm_layout) \<- specify map layout

-   aes.palette \<- 'seq' (sequential palettes), 'div' (diverging palettes) , 'cat' (categorical palettes)

[tm_compass()](https://www.rdocumentation.org/packages/tmap/versions/3.3-3/topics/tm_compass) \<- create map compass

[tm_scale_bar()]{.underline} \<- creates scale bar

[tm_grid()]{.underline} \<- creates grid lines (alpha is 0-1, transparency of grid lines)

[tm_credits()]{.underline} \<- create a text for credits

::: panel-tabset
## High quality graph

```{r}
#| code-fold: true
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Reds",
          title = "Dependency ratio") +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

## mpsz_pop2020 table

```{r}
library(knitr)
kable(head(mpsz_pop2020,3))
```
:::

#### 2.4.2.1 Drawing a base map

Basic building blocks are *tm_fill()* and *tm_polygons().*

*tm_polygons() = fill + borders*

::: panel-tabset
## tm_borders()

Base Map

```{r}
tm_shape(mpsz_pop2020) +
  tm_borders(lwd = 0.1,  alpha = 1)
```

## tm_fill()

To show the geographical distribution of a selected **variable** by planning subzone, we just need to assign the target variable such as *Dependency* to *tm_polygons()*.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill('DEPENDENCY')
```
:::

#### 2.4.2.2 Drawing a choropleth map using *tm_polygons()*

To draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as *Dependency* to *tm_polygons()*.

::: panel-tabset
## No variable

```{r}
tm_shape(mpsz_pop2020) +
  tm_polygons()
```

## With variable

```{r}
tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY")
```
:::

Things to learn from *tm_polygons()*:

-   The default interval binning used to draw the choropleth map is called \"**pretty**\". A detailed discussion of the data classification methods supported by **tmap** will be provided in sub-section 4.3.

-   The default colour scheme used is `YlOrRd` of **ColorBrewer**. You will learn more about the color scheme in sub-section 4.4.

-   By default, Missing value will be shaded in grey.

#### 2.4.2.3 Drawing a choropleth map using *tm_fill()* + \*tm_border()\*\*

Actually, *tm_polygons()* is a wraper of *tm_fill()* and *tm_border()*. *tm_fill()* shades the polygons by using the default colour scheme and *tm_borders()* adds the borders of the shapefile onto the choropleth map.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY") +
  tm_borders(lwd = 0.1,  alpha = 1)
```

Apart from alpha (transparency number 0 - 1), other arguments are

-   *col* = border colour,

-   *lwd* = border line width. The default is 1, and

-   *lty* = border line type. The default is \"solid\".

### 2.4.3 Data classification methods of **tmap**

Most choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.

**tmap** provides a total ten data classification methods, namely: *fixed*, *sd*, *equal*, *pretty* (default), *quantile*, *kmeans*, *hclust*, *bclust*, *fisher*, and *jenks*.

To define a data classification method, the ***style*** argument of *tm_fill()* **or** *tm_polygons()* will be used.

#### 2.4.3.1 Plotting choropleth maps with built-in classification methods

The codes below uses quantile classification with 5 classes.

::: panel-tabset
## fill + border

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "jenks") +
  tm_borders(alpha = 0.5)
```

Using equal classification method

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5)
```

Distribution of quantile data classification method are more evenly distributed then equal data classification method.

## polygons

```{r}
tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY",n = 5,
          style = "jenks" )
```
:::

> **Warning: Maps Lie!**

> DIY: Using what you had learned, prepare choropleth maps by using different classification methods supported by tmap and compare their differences.

Using tmap_arrange:

```{r}
kmeans<- tm_shape(mpsz_pop2020)+
    tm_fill("DEPENDENCY", n = 5, style = 'kmeans') +
  tm_borders(alpha = 0.5)

sd <- tm_shape(mpsz_pop2020)+
    tm_fill("DEPENDENCY", n = 5, style = 'sd') +
  tm_borders(alpha = 0.5)

fisher <- tm_shape(mpsz_pop2020)+
    tm_fill("DEPENDENCY", n = 5, style = 'fisher') +
  tm_borders(alpha = 0.5)

tmap_arrange(kmeans, sd, fisher, asp = 4, nrow=3)
```

> DIY: Preparing choropleth maps by using similar classification method but with different numbers of classes (i.e. 2, 6, 10, 20). Compare the output maps, what observation can you draw?

Assigning multiple values to at least one of the aesthetics arguments.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill(c('DEPENDENCY','DEPENDENCY'),
          style= c('jenks','jenks'),
          n = c(3,10),
          palette= list('Greens', 'Greens')) +
  tm_borders(alpha = 0.5) +
  tm_layout(legend.position = c('right','bottom'),
            legend.width = 0.5,
            legend.height = 0.4,
            legend.text.size = 0.35 )
```

#### 2.4.3.2 Plotting choropleth maps with custome break

The breakpoints can be set explicitly by means of the ***breaks*** argument to the *tm_fill().*

-   breaks include min and max

-   to have n categories, n+1 elements to be specified in breaks option

-   values must be in increasing order

Good practise: descriptive statistics on variable before setting break points

```{r}
summary(mpsz_pop2020$DEPENDENCY)
```

With reference to summary stats and boxplot above,

-   break points are 0.6, 0.7, 0.8, 0.9

-   min = 0 and max = 1.0

-   break vector is thus c(0, 0.6, 0.7, 0.8, 0.9, 1.0)

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", breaks = c(0, 0.6, 0.7, 0.8, 0.9, 1.0)) +
  tm_borders(alpha = 0.5)
```

### 2.4.4 Colour scheme

#### 2.4.4.1 Using ColourBrewer palette (predefined)

Assign the preferred colour to *palette* argument of *tm_fill()*

::: panel-tabset
## normal

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 6,
          style = "quantile",
          palette = "Blues") +
  tm_borders(alpha = 0.5)
```

## reverse

Reverse the colour scheme by adding \"-\"

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 6,
          style = "quantile",
          palette = "-Greens") +
  tm_borders(alpha = 0.5)
```
:::

### 2.4.5 Map Layouts

-   customise title, scale bar, compass, margins, aspect ratios

-   other than colour palette and data classification (breaks) which is done in tm_fill()

#### 2.4.5.1 Map Legend

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "jenks", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone \n(Jenks classification)",
            main.title.position = "center",
            main.title.size = 1,
            legend.height = 0.45, 
            legend.width = 0.35,
            legend.outside = FALSE,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```

#### 2.4.5.2 Map style

**tmap** allows a wide variety of layout settings to be changed. They can be called by using [tmap_style()](https://www.rdocumentation.org/packages/tmap/versions/3.3-3/topics/tm_layout)

Predefined styles: \'white\', \'gray\', \'natural\', \'bw\', \'classic\', \'cobalt\', albatross\', \'beaver\', \'col_blind\', \'watercolor\'

Below is an example of *classic* style

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 6,
          style = "quantile",
          palette = "-Greens") +
  tm_borders(alpha = 0.5)+
  tmap_style('natural')
```

#### 2.4.5.3 Cartographic Furniture

Can include other map furniture like compass, scale bar, and grid lines

tmap_style has to be used at the **last**, think cannot mix with tm

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Reds",
          title = "No. of persons") +
  tm_layout(main.title = "Distribution of Dependency Ratio \nby planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom")) +
  tmap_style('natural')
```

To reset the default style, refer below

```{r}
tmap_style("white")
```

```{r}

```

```{r}

```

```{r}
#| code-fold: True
#| eval: false
#| echo: false
```

## Theories

### 
