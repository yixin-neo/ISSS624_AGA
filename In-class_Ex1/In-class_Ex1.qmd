---
title: "In-class Exercise 1"
#subtitle:
author: "NeoYX"
date: '18 Nov 2023'
date-modified: "`r Sys.Date()`" #last-modified"
editor: visual
execute: 
  freeze: auto
  warning: false
  #echo: false
  #message: false
format: 
  html:
    code-fold: false
    code-overflow: scroll
    code-summary: "Show the code"
    code-line-numbers: true
---

## 

**The Task**

In this in-class exercise, we are required to prepare a choropleth map showing the distribution of passenger trips at planning sub-zone by integrating *Passenger Volume by Origin Destination Bus Stops* and bus stop data sets downloaded from LTA DataMall and Planning Sub-zone boundary of URA Master Plan 2019 downloaded from data.gov.sg.

The specific task of this in-class exercise are as follows:

-   to import *Passenger Volume by Origin Destination Bus Stops csv aspatial* data set downloaded from LTA DataMall in to RStudio environment,

-   to import geospatial data in ESRI shapefile format into sf data frame format,

-   to perform data wrangling by using appropriate functions from tidyverse and sf pakcges, and

-   to visualise the distribution of passenger trip by using tmap methods and functions.

## Getting started

Three R packages will be used in this in-class exercise, they are:

-   tidyverse for non-spatial data handling,

-   sf for geospatial data handling,

-   tmap for thematic mapping, and

-   knitr for creating html table.

The code chunk below loads the following packages:

-   tmap: for thematic mapping

-   sf: for geospatial data handling

-   tidyverse: for non spatial data handling

```{r}
pacman::p_load(sf, tmap, tidyverse, knitr, h3jsr, DT, skimr)
```

## Importing the OD data

Firstly we will import the *Passenger volume by Origin Destination Bus Stops* dataset downloaded from the LTA Datamall by using the read_csv() of the **readr** package (to read text data).

```{r}
odbus_aug <- read_csv("data\\aspatial\\origin_destination_bus_202308.csv")
#odbus_sep <- read_csv("data\\aspatial\\origin_destination_bus_202309.csv")
#odbus_oct <- read_csv("data\\aspatial\\origin_destination_bus_202310.csv")
```

Check the datafields

```{r}
glimpse(odbus_aug)
```

### Processing the aspatial OD data

The '*ORIGIN_PT_CODE*' and '*DESTINATION_PT_CODE*' field is in character field. We will convert it to factor data type.

```{r}
odbus_aug$ORIGIN_PT_CODE <- as.factor(odbus_aug$ORIGIN_PT_CODE)
odbus_aug$DESTINATION_PT_CODE <- as.factor(odbus_aug$DESTINATION_PT_CODE)
```

The code chunk below does the following:

1.  extract commuting flows on **weekday** and between **7 and 10** o'clock time intervals.

2.  Group data by '*ORIGIN_PT_CODE*' and create a new field call '*TRIPS*' by summarising the '*TOTAL_TRIPS*' column.

    ```{r}
    #| echo: false
    #| eval: false
    odbus_aug %>% 
      filter(DAY_TYPE == 'WEEKDAY') %>% 
      filter(TIME_PER_HOUR >= 7 & TIME_PER_HOUR <= 9) %>% 
      group_by(ORIGIN_PT_CODE) %>% 
      mutate(TRIPS_SUM = sum(TOTAL_TRIPS)) %>%
      ungroup() %>% 
      arrange(ORIGIN_PT_CODE)
    ```

```{r}
origin7_9 <- odbus_aug %>% 
  filter(DAY_TYPE == 'WEEKDAY') %>% 
  filter(TIME_PER_HOUR >= 7 &
           TIME_PER_HOUR <= 9) %>% 
  group_by(ORIGIN_PT_CODE) %>% 
  summarise(TRIPS = sum(TOTAL_TRIPS))

origin7_9 %>% 
  arrange(desc(TRIPS)) %>%
  head(10) %>% 
  kable()
```

Save the output in rds format for future use.

```{r}
#| eval: false
write_rds(origin7_9, "data/rds/origin7_9.rds")
```

The code chunk below will be used to import the save origin7_9.rds into R environment.

```{r}
origin7_9 <- read_rds("data/rds/origin7_9.rds")
```

## Importing the geospatial data

Two geospatial datasets will be used in this exercise.

-   BusStop: This data provides the location of bus stop as at last quarter of 2022.

-   MPSZ-2019: This data provides the sub-zone boundary of URA Master Plan 2019.

### Load the geospatial bustop shapefiles and immediately transform to Singapore projection system (EPSG 3414)

```{r}
busstop <- st_read(dsn="data\\geospatial\\BusStopLocation\\BusStopLocation_Jul2023", layer = "BusStop") %>% 
  st_transform(crs = 3414)

busstop
```

There are 5161 spatial units/**points** in `busstop` and three attributes, namely "BUS_STOP_N" "BUS_ROOF_N" "LOC_DESC".

```{r}
plot(busstop['BUS_STOP_N'])
```

### Load the geospatial MPSZ_19 shapefiles (basemap) from gov.sg (usually in WSG84 format) and transform to EPSG 3414

```{r}
mpsz <- st_read(dsn="data\\geospatial\\MPSZ-2019", layer='MPSZ-2019')  %>% 
  st_transform(crs = 3414)

mpsz
#colnames(mpsz)
```

There are 332 spatial units/**polygons** in `mpsz` and 6 attributes, namely "SUBZONE_N" "SUBZONE_C" "PLN_AREA_N" "PLN_AREA_C" "REGION_N" "REGION_C".

```{r}
plot(mpsz['SUBZONE_C'])
```

## **Geospatial data wrangling**

### **Combining Busstop and mpsz**

Code chunk below populates the planning subzone code (i.e.Â SUBZONE_C) of mpsz sf data frame into busstop sf data frame.

```{r}
busstop_mpsz <- st_intersection(busstop, mpsz) %>% 
  select(BUS_STOP_N, SUBZONE_C)

busstop_mpsz
```

> st_intersects(): count points in polygon
>
> st_intersection(): find polygon areas overlap

::: callout-note
-   `st_intersection()` is used to perform point and polygon overlap and the output will be in **point** sf object.

-   `select()` of dplyr package is then use to retain only BUS_STOP_N and SUBZONE_C in the busstop_mpsz sf data frame.

-   five bus stops are excluded in the resultant data frame because they are outside of Singapore boundary. Points reduced from 5161 to 5156 after combine.
:::

Drop the geometry because `busstop_mpsz` is a POINT sf object, there is no polygon geometry. Furthermore, we have to process the attribute data. To get back the planning sub-zone POLYGON geometry data, we can always left_join() `mpsz` df with our processed `busstop_mpsz` df again later.

```{r}
busstop_mpsz <- busstop_mpsz %>% 
  st_drop_geometry()

datatable(busstop_mpsz, class = 'cell-border stripe', options = list(pageLength = 5))
```

Save the output into rds format.

```{r}
write_rds(busstop_mpsz, 'data/rds/busstop_mpsz.csv')
```

### Combining `origin7_9` and `busstop_mpsz` dataframes

The '*BUS_STOP_N*' and '*ORIGIN_PT_CODE*' columns are the join columns.

::: panel-tabset
#### Combine

`origin7_9` has 5,019 rows

`busstop_mpsz` has 5,156 rows

After left_join(), `origin_data` has 5,031 rows.

```{r}
origin_data <- left_join(origin7_9, busstop_mpsz,
                         by = c('ORIGIN_PT_CODE' = 'BUS_STOP_N')) %>%
  rename(ORIGIN_BS = ORIGIN_PT_CODE,
         ORIGIN_SZ = SUBZONE_C) %>% 
  select(ORIGIN_SZ, 
         ORIGIN_BS, 
         TRIPS ) %>% 
  arrange(desc(TRIPS))

datatable(origin_data)
```

#### busstop_mpsz

There are 5,156 rows.

```{r}
#kable(head(busstop_mpsz,3))
datatable(busstop_mpsz, class = 'cell-border stripe', options = list(pageLength = 3))
```

#### origin7_9

There are 5,015 rows.

```{r}
#kable(head(origin7_9,3))
datatable(origin7_9, class = 'cell-border stripe', options = list(pageLength = 3))
```
:::

Before proceeding further, check for duplicates in the dataframe.

-   group by all columns and check for duplicate rows using *filter(n()\>1)*

`duplicate` contains all duplicate rows , including original row. Thus there are 13 duplicated rows. The reason for having 13 duplicated rows in `origin_data` df is because there are 13 duplicated rows in `busstop_mpsz` df. We should have done the check prior to left join.

```{r}
duplicate <- origin_data %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()

duplicate
#duplicated_rows <- origin_data[duplicated(origin_data), ]  #<< alternative code
```

To retain only the unique records, use the code chunk below

```{r}
origin_data <- unique(origin_data)
```

Double check there are indeed no more duplicates in `origin_data` df.

```{r}
origin_data[duplicated(origin_data), ]
```

Use the skim() from the skimr library

```{r}
skim(origin_data)
```

There are 55 missing values in its '*ORIGIN_SZ'* field and this could be due to missing bus stop code in the `busstop_mpsz` df.

**==== Unsure whether we have to aggregate the TRIPS by planning sub-zone level ====**

Currently, there are many rows per planning sub-zone. Calculate the aggregate **sum** of the '*TRIPS*' field by the 'ORIGIN_SZ' in the `origin_data` df since we are plotting passenger trips originating at sub-zone level.

```{r}
origin_data_sz <- origin_data %>% 
  group_by(ORIGIN_SZ) %>% 
  summarise(TTRIPS = sum(TRIPS)) %>% 
  ungroup()

origin_data_sz
```

## **Choropleth Visualisation**

Task: Prepare a choropleth map showing the distribution of passenger trips at planning sub-zone level.

The `origin_data` df is an aspatial df without any geometry, we could perform a left join with `mpsz` and `origin_data`to retain the sf property.

```{r}
mpsz_origtrip <- left_join(mpsz, origin_data,
                           by = c('SUBZONE_C' ='ORIGIN_SZ'))

mpsz_origtrip
```

Plotting the map

```{r}
#| fig-width: 14
#| fig-asp: 0.68
tm_shape(mpsz_origtrip)+
  tm_fill("TRIPS", 
          style = "quantile", 
          palette = "Blues",
          #legend.hist = TRUE, 
          #legend.is.portrait = TRUE,
          #legend.hist.z = 0.3,
          title = "Passengers Trip") +
  tm_layout(main.title = "Passenger trips generated by planning sub-zone level",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            #legend.outside = TRUE,
            #legend.text.size= 0.6,
            #inner.margins = c(0.01, 0.01, 0, .15),
            #legend.position = c("right", "top"),
            #bg.color = "black",
            #main.title.color = 'white',
            #legend.title.color = 'white',
            #legend.text.color= 'white',
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

If we are using the `origin_data_sz` df that contains the aggregated trips per subzone:

```{r}
mpsz_origtrip_sz <- left_join(mpsz, origin_data_sz,
                           by = c('SUBZONE_C' ='ORIGIN_SZ'))

mpsz_origtrip_sz
```

Examine any missing values.

```{r}
skim(mpsz_origtrip_sz)
```

Plot using aggregated sum of TRIPS by sub-zones

```{r}
#| fig-width: 14
#| fig-asp: 0.68
tm_shape(mpsz_origtrip_sz)+
  tm_fill("TTRIPS", 
          style = "quantile", 
          palette = "Blues",
          #legend.hist = TRUE, 
          #legend.is.portrait = TRUE,
          #legend.hist.z = 0.3,
          title = "Passengers Trip") +
  tm_layout(main.title = "Passenger trips generated by planning sub-zone level",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            #legend.outside = TRUE,
            #legend.text.size= 0.6,
            #inner.margins = c(0.01, 0.01, 0, .15),
            #legend.position = c("right", "top"),
            #bg.color = "black",
            #main.title.color = 'white',
            #legend.title.color = 'white',
            #legend.text.color= 'white',
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

```{r}
#| code-fold: True
#| eval: false
#| echo: false
#| fig-width: 14
#| fig-asp: 0.68

```
