---
title: "Hands-on Exercise 2.2 and 2.3: Global and Local Measures of Spatial Autocorrelation"
author: "NeoYX"
date: '22 Nov 2023'
date-modified: "`r Sys.Date()`"
editor: visual
execute: 
  freeze: auto
  warning: false
  #echo: false
  #message: false
format: 
  html:
    code-fold: false
    code-overflow: scroll
    code-summary: "Show the code"
    code-line-numbers: true
---

## **9.1 Overview**

In this hands-on exercise, we will learn to

-   compute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of **spdep** package,

    -   plot Moran scatterplot,

    -   compute and plot spatial correlogram using appropriate function of **spdep** package.

-   compute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers by using appropriate functions **spdep** package;

-   compute Getis-Ord's Gi-statistics for detecting hot spot or/and cold spot area by using appropriate functions of **spdep** package; and

-   to visualise the analysis output by using **tmap** package.

# 9 Hands-on_EX2_2: Global measures of spatial autocorrelation

## **9.2 Getting Started**

### 9.2.1 The analytical question

-   In spatial policy, local government/planners aims to ensure equal distribution of development in the province.

-   we should apply appropriate spatial statistical methods to discover if development are even distributed geographically in the province

-   if answer is NO, we ask "is there sign of clustering?" (GLOBAL spatial autocorrelation)

-   if YES, "Where are the clusters" (LOCAL spatial autocorrelation)

In this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Provice, People Republic of China. (https://en.wikipedia.org/wiki/Hunan)

### 

### 9.2.2 The Study Area and Data

Two data sets will be used in this hands-on exercise:

1.  Geospatial data: Hunan province administrative boundary layer at county level in ESRI shapefile format

2.  Aspatial data: *Hunan_2012.csv* containing local development indicators

### 9.2.3 Setting the Analytical Tools

Packages we need:

-   sf is use for importing and handling geospatial data in R,

-   tidyverse is mainly use for wrangling attribute data in R,

-   spdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and

-   tmap will be used to prepare cartographic quality chropleth map.

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr)
```

## **9.3 Getting the Data Into R Environment**

The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.

### **9.3.1 Import shapefile into r environment**

The code chunk below uses [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package to import Hunan shapefile into R. The imported shapefile will be **simple features** Object of **sf**.

`hunan` is in WSG84 geographical system.

```{r}
hunan <- st_read(dsn='data/geospatial',
                 layer='Hunan')
#st_crs(hunan)
head(hunan,3)
```

### **9.3.2 Import csv file into r environment**

Next, we will import *Hunan_2012.csv* into R by using *read_csv()* of **readr** package. The output is R data frame class.

```{r}
hunan2012 <- read_csv('data/aspatial/Hunan_2012.csv')
head(hunan2012,3)
```

### **9.3.3 Performing relational join**

The code chunk below will be used to update the attribute table of *hunan*'s SpatialPolygonsDataFrame (geospatial) with the attribute fields of *hunan2012* dataframe (aspatial) . This is performed by using *left_join()* of **dplyr** package. Since the join columns are not specified, identical columns names ('County') form both dataset will be used for the join.

Column 7 and 15 are the 'County' and 'GDPPC' columns respectively.

```{r}
hunan <- left_join(hunan, hunan2012) %>% 
  select(1:4, 7,15)
head(hunan,3)
```

### **9.3.4 Visualising Regional Development Indicator**

Now, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using *qtm()* of **tmap** package.

-   tm_fill() 's **n** refer to the number of equal intervals

```{r}
#| fig-width: 14
#| fig-asp: 0.68
equal <- tm_shape(hunan)+
  tm_fill('GDPPC',
          n=5,
          style='equal') +
  tm_borders(alpha=0.5) +
  tm_layout(main.title = 'Equal interval classification',
            main.title.size=1.5,
            legend.height = 0.25,
            legend.width = 0.25)

quantile <- tm_shape(hunan)+
  tm_fill('GDPPC',
          n=5,
          style='quantile') +
  tm_borders(alpha=0.5) +
  tm_layout(main.title = 'Equal quantile classification',
            main.title.size=1.5,
            legend.height = 0.25,
            legend.width = 0.25)

tmap_arrange(equal, quantile, asp =1, ncol=2)
```

## **9.4 Global Spatial Autocorrelation**

In this section, we will

-   compute global spatial autocorrelation statistics

-   perform spatial complete randomness test for global spatial autocorrelation (test for significance).

### **9.4.1 Computing Contiguity Spatial Weights**

Before we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.

In the code chunk below, [*poly2nb()*](https://r-spatial.github.io/spdep/reference/poly2nb.html) of **spdep** package is used to compute contiguity weight matrices for the study area. This function will

-   build a neighbours list based on regions with contiguous boundaries.

-   if 'queen' argument is TRUE: spatial units are considered neighbours if they share a common point. A list of first order neighbours using the Queen criteria will be returned.

-   if 'queen' argument is FALSE: spatial unit are considered neighbours if they share a least two common points.

More specifically, the code chunk below is used to compute Queen contiguity weight matrix.

```{r}
wm_q <- poly2nb(hunan,
                queen=TRUE)
summary(wm_q)
```

Sneakpeak at the neighbours' list of the first three polygons.

```{r}
wm_q[1:3]
```

The summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbours.

### **9.4.2 Row-standardised weights matrix**

Next, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style="W"). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors' values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we'll stick with the style="W" option for simplicity's sake but note that other more robust options are available, notably style="B".

```{r}
rswm_q <- nb2listw(wm_q,
                   style='W',
                   zero.policy=TRUE)
rswm_q
```

Sneak peak at the neighbour weights of the first three polygons

```{r}
rswm_q$weights[1:3]
```

The input of *nb2listw()* must be an object of class **nb**. The syntax of the function has two major arguments, namely style and zero.poly.

-   *style* can take values "W", "B", "C", "U", "minmax" and "S". B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).

-   If *zero policy* is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %\*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.

```{r}
attributes(rswm_q)
methods(class=class(rswm_q))
```

### **9.4.3 Global Spatial Autocorrelation: Moran's I**

In this section, we will learn how to perform Moran's I statistics testing by using [*moran.test()*](https://r-spatial.github.io/spdep/reference/moran.test.html) of **spdep**.

### **9.4.4 Moran's I test**

**Global** spatial association assesses the overall spatial pattern of a variable across the entire study area. It provides a single value or metric that summarizes the extent to which similar values cluster together or are dispersed across the entire geographic space.

**The Moran's I assumes data follows a normal distribution and are randomised.**

Moran's I values range from -1 to 1 while Geary's C ranges from 0 to 2. The chart below summarises our lecture material.

![](images/Global%20Moran%20stats%20test.png){width="357"}

The code chunk below performs Moran's I statistical testing using [*moran.test()*](https://r-spatial.github.io/spdep/reference/moran.test.html) of **spdep**. It takes in the main arguments:

-   variable

-   `listw` , our spatial weights matrix that defines the neighbourhood and relationship between them.

```{r}
moran.test(hunan$GDPPC,
           listw = rswm_q,
           zero.policy=TRUE,
           na.action=na.omit)
```

> The null hypothesis: Observed spatial patterns of values is equally likely as any random spatial pattern.
>
> Since the p-value is less than 0.05 and Moran I statistic is greater than 1, we can reject the null hypothesis and conclude that similar values tend to cluster together in our area of study.

#### 9.4.4.1 Computing Monte Carlo Moran's I

In the event we are unsure whether the data follows a normal distribution and are randomised, we can use the Monte Carlo Simulation to simulate Moran's I [n]{.underline} times under the assumption of no spatial pattern (shuffle/permutate the variable across all spatial units). This creates a baseline to compare with the observed Moran's I value from dataset.

The code chunk below performs permutation test for Moran's I statistic by using [*moran.mc()*](https://r-spatial.github.io/spdep/reference/moran.mc.html) of **spdep**. A total of 1000 simulation will be performed.

```{r}
set.seed(1234)
bperm = moran.mc(hunan$GDPPC,
                 listw=rswm_q,
                 nsim=999,
                 zero.policy=TRUE,
                 na.action=na.omit)
bperm
```

| Since the p-value is less than 0.05 and Moran I statistic is greater than 1, we can reject the null hypothesis and conclude that similar values tend to cluster together in our area of study.

#### 9.4.4.2 Visualising Monte Carlo Moran's I

It is always a good practice for us the examine the simulated Moran's I test statistics in greater detail. This can be achieved by plotting the distribution of the statistical values as a histogram by using the code chunk below.

In the code chunk below [*hist()*](https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/hist) and [*abline()*](https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/abline) of R Graphics are used.

Get the mean of simulated moran's I values. The 'res' column contains the simulated moran's i values.

```{r}
mean(bperm$res[1:999]) 
```

Get the variance

```{r}
var(bperm$res[1:999])
```

Summary statistics

```{r}
summary(bperm$res[1:999])
```

Plotting

::: panel-tabset
## ggplot2

We will use [ggplot2](https://ggplot2.tidyverse.org/) to create the histogram instead of base r.

[**ggthemes**](https://cran.r-project.org/web/packages/ggthemes/) provides ['ggplot2' themes](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/) that replicate the look of plots by Edward Tufte, Stephen Few, [Fivethirtyeight](https://fivethirtyeight.com/), [The Economist](https://www.economist.com/graphic-detail), 'Stata', 'Excel', and [The Wall Street Journal](https://www.pinterest.com/wsjgraphics/wsj-graphics/), among others.

```{r}
#| fig-width: 14
#| fig-asp: 0.68
#| code-fold: true
library(ggplot2)
library(ggthemes)

bperm_df <- as.data.frame(bperm$res)
colnames(bperm_df) <- c('res')

#q <- quantile(bperm_df$res[1:999], probs = c(0.25, 0.5, 0.75))
mean <- mean(bperm_df$res[1:999])
mean
ggplot(data=bperm_df,
       aes(x=res)) +
  geom_histogram(bins=20,
                 color='grey25',
                 fill='grey90',size=0.8) +
  #geom_vline(xintercept = q[2], linetype='dotted', size = 0.8, color='blue') +
  #geom_vline(xintercept = q[3], linetype='dotted', size = 0.8) +
  geom_vline(xintercept = mean, linetype='dotted', size = 0.8, color='red') +
  #annotate('text' , x= -0.055, y=180, label='50th \npercentile', size = 5, color='blue') +
  #annotate('text' , x= 0.06, y=180, label='75th \npercentile', size = 5) +
  annotate('text' , x= 0.015, y=180, label='mean', size = 5, color='red') +
  labs(y= 'Frequency', x="Moran's I values") +
  theme_economist() +
  theme(axis.title.y=element_text(angle = 0,
                                  vjust=0.9)) +
  ggtitle("Histogram of Simulated Moran's I")

```

## Base Graph

```{r}
hist(bperm$res,
     freq=TRUE,
     breaks=20,
     xlab="Simulated Moran's I",
     main = paste("Histogram of Simulated Moran I"))
abline(v=0,
       col='red')
```
:::

### **9.4.5 Global Spatial Autocorrelation: Geary's**

In this section, we will learn how to perform Geary's c statistics testing by using appropriate functions of **spdep** package.

#### 9.4.5.1 Geary's C test

The code chunk below performs Geary's C test for spatial autocorrelation by using [*geary.test()*](https://r-spatial.github.io/spdep/reference/geary.test.html) of **spdep**.

```{r}
geary.test(hunan$GDPPC, listw=rswm_q)
```

> The null hypothesis: Observed spatial patterns of values is equally likely as any random spatial pattern.
>
> Since the p-value is less than 0.05 and Geary's C statistic is greater 0 and less than 1, we can reject the null hypothesis and conclude that similar values tend to cluster together in our area of study.

#### 9.4.5.2 Computing Monte Carlo Geary's C

In the event we are unsure whether the data follows a normal distribution and are randomised, the code chunk below performs permutation test for Geary's C statistic by using [*geary.mc()*](https://r-spatial.github.io/spdep/reference/geary.mc.html) of **spdep**.

```{r}
set.seed(1234)
bperm=geary.mc(hunan$GDPPC, 
               listw=rswm_q, 
               nsim=999)
bperm
```

| Since the p-value is less than 0.05 and Geary's C statistic is greater 0 and less than 1, we can reject the null hypothesis and conclude that similar values tend to cluster together in our area of study.

#### 9.4.5.3 Visualising the Monte Carlo Geary's C

Next, we will plot a histogram to reveal the distribution of the simulated values by using the code chunk below.

Get the mean of simulated Geary's C

```{r}
mean(bperm$res[1:999])
```

Get the variance

```{r}
var(bperm$res[1:999])
```

Summary statistics

```{r}
summary(bperm$res[1:999])
```

Plot the histogram using ggplot2

```{r}
#| fig-width: 14
#| fig-asp: 0.68
#| code-fold: true

bperm_df <- as.data.frame(bperm$res)
colnames(bperm_df) <- c('res')

#q <- quantile(bperm_df$res[1:999], probs = c(0.25, 0.5, 0.75))
mean <- mean(bperm_df$res[1:999])
mean
ggplot(data=bperm_df,
       aes(x=res)) +
  geom_histogram(bins=20,
                 color='grey25',
                 fill='grey90',size=0.8) +
  geom_vline(xintercept = mean, linetype='dotted', size = 0.8, color='red') +
  annotate('text' , x= 1.05, y=180, label='mean', size = 5, color='red') +
  labs(y= 'Frequency', x="Geary's C values") +
  theme_economist() +
  theme(axis.title.y=element_text(angle = 0,
                                  vjust=0.9)) +
  ggtitle("Histogram of Simulated Geary's C")
```

## **9.5 Spatial Correlogram**

Spatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran's I or Geary's c) against distance.Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.

### **9.5.1 Compute Moran's I correlogram**

In the code chunk below, [*sp.correlogram()*](https://r-spatial.github.io/spdep/reference/sp.correlogram.html) of **spdep** package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran's I. The **plot()** of base Graph is then used to plot the output.

```{r}
MI_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="I", 
                          style="W")
plot(MI_corr)
```

Arguments:

-   'order' refers to number of layers away from each polygon using contiguity method. We want to check how the Moran's I values changes (and its statistical significance changes) as the neighbours get further and further away.

-   'method': 'corr' for correlation, 'I' for Moran's I and 'C' for Gerary's C.

| [Understanding the plot]{.underline}
| **Y-Axis:** The y-axis typically represents the Moran's I coefficient, which quantifies spatial autocorrelation. Above zero, similar values cluster. Below zero, dissimilar values cluster.
| **X-Axis:** The x-axis represents spatial distance lags. Each point on the correlogram corresponds to a specific distance lag (e.g., distance between observations). The points are usually organized in bins or distance classes.
| **Bars or Lines:** Bars or lines connect the Moran's I values at different distance lags, forming a pattern that shows how spatial autocorrelation changes with distance.
| [Usefulness of Moran's I Correlogram]{.underline}
| **Detecting Spatial Patterns:** A Moran's I correlogram provides insights into the presence and structure of spatial patterns in our data. It helps identify at what distances spatial autocorrelation is significant.

By plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.

```{r}
print(MI_corr)
```

We see that with the exception of Lag 4, the rest of the results are statistically significant at the 95% level of confidence.

As we consider order lag from 1 to 3, there is significant positive autocorrelation (similar values cluster) and we note the Moran's I values decreases as order increases. For order 5 and 6, there is significant negative autocorrelation (dissimilar values cluster)

[Possible reason for the change of polarity:]{.underline}

Local clusters could dominate at smaller distances while at larger distances, can detect dispersion more.

**9.5.2 Compute Geary's C correlogram and plot**

In the code chunk below, *sp.correlogram()* of **spdep** package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary's C. The **plot()** of base Graph is then used to plot the output.

```{r}
GC_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="C", 
                          style="W")
plot(GC_corr)
```

0\< Geary C \< 1 : similar values cluster

1 \< Geary C \< 2: dissimilar values cluster

Now examine the full report to check which values are significant.

```{r}
print(GC_corr)
```

The results of Geary's C statistics test is similar to Moran's I.

All lag orders except Lag order of 3, 4 and 6 are statistically significant at 95% confidence level.

Lag order 1 and 2: clustering of similar values, order 2 is less clustered than order 1. (Moran's I and Geary's C are inversely related.)

Lag order 5: clustering of dissimilar values.

# 

# 10 Hands-on_Ex2_3: **Local Measures of Spatial Autocorrelation**

## **10.6 Cluster and Outlier Analysis**

Local Indicators of Spatial Association or LISA are statistics that evaluate the existence of clusters in the spatial arrangement of a given variable. For instance if we are studying cancer rates among census tracts in a given city local clusters in the rates mean that there are **localised areas** that have higher or lower rates than is to be expected by chance alone; that is, the values occurring are above or below those of a random distribution in space.

In this section, we will learn how to apply appropriate Local Indicators for Spatial Association (LISA), especially local Moran'I to detect cluster (HH or LL) and/or outlier (HL, LH) from GDP per capita 2012 of Hunan Province, PRC.

### **10.6.1 Computing local Moran's I**

To compute local Moran's I, the [*localmoran()*](https://r-spatial.github.io/spdep/reference/localmoran.html) function of **spdep** will be used. It computes ***Ii*** values, given a set of ***zi*** values (variable) and a **listw** object (spatial weights matrix) providing neighbour weighting information for the polygon associated with the zi values.

The code chunks below are used to compute local Moran's I of *GDPPC2012* at the county level.

```{r}
fips <- order(hunan$County)
localMI <- localmoran(hunan$GDPPC, rswm_q)
head(localMI)

```

*localmoran()* function returns a matrix of values whose columns are:

-   Ii: the local Moran's I statistics

-   E.Ii: the expectation of local moran statistic under the randomisation hypothesis

-   Var.Ii: the variance of local moran statistic under the randomisation hypothesis

-   Z.Ii:the standard deviate of local moran statistic

-   Pr(z != E(Ii)): the p-value of local moran statistic

Note there is no County's name in the output above.

We must first create a dataframe that appends the County's name to its local moran (li) values.

-   Fips is an object of integer class. It contains the row ids if rows are to be arranged in alphabetical order.

-   localMI\[Fips,\] would arrange the rows of `localMI` in alphabetical order of its countys' name, retaining all the columns.

-   The row names would take the countys' name.

```{r}
data.frame(
  localMI[fips,],
  row.names=hunan$County[fips]) %>% 
  head()
```

The code chunk below list the content of the local Moran matrix derived by using [*printCoefmat()*](https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/printCoefmat).

```{r}
printCoefmat(data.frame(
  localMI[fips,], 
  row.names=hunan$County[fips]))
```

#### 10.6.1.1 Mapping the local Moran's I

Before mapping the local Moran's I map, it is wise to append the local Moran's I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame. The code chunks below can be used to perform the task. The out SpatialPolygonDataFrame is called *hunan.localMI*.

The `Pr.z….E.Ii..` containing p-value of the local moran I is renamed to `PR.Ii`

```{r}
hunan.localMI <- cbind(hunan,localMI) %>% 
    rename(Pr.Ii = Pr.z....E.Ii..)
```

#### 10.6.1.2 Mapping local Moran's I values

Using choropleth mapping functions of **tmap** package, we can plot the local Moran's I values by using the code chunks below. For paletter colours, refer to colorbrewers [link](https://r-graph-gallery.com/38-rcolorbrewers-palettes.html).

```{r}
#| fig-width: 14
#| fig-asp: 0.68
tm_shape(hunan.localMI) +
  tm_fill(col='Ii',
          style = 'pretty',
          #palette = 'RdBu', # << refer to colourbrewer
          title = 'Local Moran statistics') +
  tm_borders(alpha= 0.5) + 
  tm_layout(main.title = "Local Moran's I",
            legend.width= 0.25,
            legend.height = 0.25)
    
```

#### 10.6.1.3 Mapping local Moran's I p-values

The choropleth shows there is evidence for both positive and negative Ii values. However, it is useful to **consider the p-values** for each of these values, as consider above.

The code chunks below produce a choropleth map of Moran's I p-values by using functions of **tmap** package.

::: panel-tabset
## Various p values

```{r}
#| fig-width: 14
#| fig-asp: 0.68
tm_shape(hunan.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Local Moran's I p-values",
            legend.width= 0.25,
            legend.height = 0.25)
```

## p values at 95% confidence level

```{r}
#| fig-width: 14
#| fig-asp: 0.68
tm_shape(hunan.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks = c(-Inf, 0.05, Inf),
          palette = c('lightblue', 'grey'), 
          title = "Local Moran's I p-values") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Significant Local Moran's I \np-values at 95% Confidence level",
            main.title.size = 1,
            legend.width = 0.25,
            legend.height = 0.25)
```
:::

#### 10.6.1.4 Mapping both local Moran's I values and p-values

For effective interpretation, it is better to plot both the local Moran's I values map and its corresponding p-values map next to each other.

The code chunk below will be used to create such visualisation.

```{r}
#| fig-width: 14
#| fig-asp: 0.68
localMI.map <- tm_shape(hunan.localMI) +
  tm_fill(col='Ii',
          style = 'pretty',
          #palette = 'RdBu', # << reger to colourbrewer
          title = 'Local Moran statistics') +
  tm_borders(alpha= 0.5) + 
  tm_layout(main.title = "Local Moran's I",
            legend.width= 0.25,
            legend.height = 0.25)

pvalue.map <-tm_shape(hunan.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks = c(-Inf, 0.05, Inf),
          palette = c('lightblue', 'grey'), 
          title = "Local Moran's I p-values") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Significant Local Moran's I \np-values at 95% Confidence level",
            main.title.size = 1,
            legend.width = 0.25,
            legend.height = 0.25)

tmap_arrange(localMI.map, pvalue.map, asp=1,ncol=2)
```

> For the choropleth chart on the left, dark green represents clustering of similar values (HH or LL, to be determine by Moran scatterplot or LISAmap) while orange represents outlier regions (LH or HL). THe chart on the right would show us the significant clusters or outliers.

## **10.7 Creating a LISA Cluster Map**

The LISA Cluster Map shows the **significant** locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the **Moran scatterplot**.

### **10.7.1 Plotting Moran scatterplot**

The Moran scatterplot is an illustration of the **relationship** between the values of the **chosen attribute at each location** and the **average value of the same attribute at neighboring locations.**

The code chunk below plots the Moran scatterplot of GDPPC 2012 by using [*moran.plot()*](https://r-spatial.github.io/spdep/reference/moran.plot.html) of **spdep**.

```{r}
#| fig-width: 14
#| fig-asp: 0.68
nci <- moran.plot(hunan$GDPPC,
                  listw = rswm_q,
                  labels = as.character(hunan$County),
                  xlab = 'GDPPC 2012',
                  ylab = 'Spatially lag GDPPC 2012')
```

> The x -axis shows the original variable value at a particular spatial unit and the y-axis is the (weighted or without) average of the neighbouring variable values. The neighbour definition and relationship is embedded in the 'listw' argument where it could be
>
> -   spatial lag with row-standardised weights
>
> -   spatial lag as sum of neighbours values (binary)
>
> -   spatial window average (self-included)
>
> -   spatial window sum (self-included and binary)
>
> -   inverse-distance
>
> Notice that the plot is split in 4 quadrants.
>
> -   Clusters and + spatial autocorrelation: The top right corner belongs to areas that have high GDPPC and are surrounded by other areas that have the average level of GDPPC. This are the high-high locations in the lesson slide.
>
> -   Cluster and + spatial autocorrelation: Bottom left are the Low-low.
>
> -   Outlier and - spatial autocorrelation: Top left contains spatial units with low GDPPC and surrounded by higher values.
>
> -   Outlier and - spatial autocorrelation: Bottom right contains spatial units with higher GDPPC and surrounded by relatively lower values.

### **10.7.2 Plotting Moran scatterplot with standardised variable**

First we will use [*scale()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/scale) to centers and scales the variable. Here centering is done by [subtracting the mean]{.underline} (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their [standard deviations]{.underline}.

**`hunan$GDPPC`** will have a **mean of 0** and a **standard deviation of 1**.

```{r}
hunan$Z.GDPPC <- scale(hunan$GDPPC) %>% 
  as.vector 
```

The [*as.vector()*](https://www.rdocumentation.org/packages/pbdDMAT/versions/0.5-1/topics/as.vector) added to the end is to make sure that the data type we get out of this is a vector, that map neatly into our `hunan` dataframe

Without setting as vector, scale(hunan\$GDPPC) is a matrix array.

Now, plot the Moran scatterplot again by using the code chunk below.

```{r}
#| fig-width: 14
#| fig-asp: 0.68
nci2 <- moran.plot(hunan$Z.GDPPC,
                  listw = rswm_q,
                  labels = as.character(hunan$County),
                  xlab = 'GDPPC 2012',
                  ylab = 'Spatially lag z-GDPPC 2012')

```

> We notice that both axes are standardised with mean =0 and sd of 1.

**10.7.3 Preparing LISA map classes**

The code chunks below show the steps to prepare a LISA cluster map.

1.  The code initializes a numeric vector named **`quadrant`** with a length equal to the number of rows in the **`localMI`** data frame. The vector is initially filled with **`NA.`**

```{r}
quadrant <- vector(mode="numeric",length=nrow(localMI))
```

Next, derive the spatially lagged variable of interest (i.e. GDPPC) using `lag.listw()` from the *spdep* package and centers the spatially lagged variable around its mean via subtraction.

```{r}
hunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)
DV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     
class(DV)
```

Retrieve the first column (li aka Moran's I values) from the `localMI` matrix and centered around its mean via subtraction.

```{r}
#colnames(localMI)
LM_I <- localMI[,1] - mean(localMI[,1])
class(LM_I)
```

Next, we will set a statistical significance level for the local Moran.

```{r}
signif <- 0.05
```

These four command lines define the (1) low-low, (2) low-high , (3) high-low and (4) high-high categories. Comparing the local Moran's I values with its lag-variable values.

```{r}
quadrant[DV <0 & LM_I>0] <- 1 # LL
quadrant[DV >0 & LM_I<0] <- 2 # LH
quadrant[DV <0 & LM_I<0] <- 3 # HL
quadrant[DV >0 & LM_I>0] <- 4 # HH
```

> LM_I \> 0 : cluster of **similar** values.
>
> **(1)** When DV \< 0 and LM_I \> 0, low values of spatial **lag** variables cluster together with low non-lag variable. Thus Low-low.
>
> **(4)** When DV \> 0 and LM_I \> 0, high values of spatial **lag** variables cluster together with high non-lag variable. Thus high-high.
>
> LM_I \<0 : cluster of **dissimilar** values.
>
> **(2)** When DV \> 0 and LM \< 0, high values of spatial lag variables are among low non-lag variable, thus low-high. (see moran scatterplot's Y axis)
>
> **(3**) When DV \< 0 and LM_I \< 0 , low values of spatial lag variables are among the high non-lag variable, thus high-low.

```{r}
quadrant
```

Lastly, places non-significant Moran in the category 0. The fifth column of the `localMI` matrix is the significant value.

```{r}
quadrant[localMI[,5]>signif] <- 0
quadrant
```

Combining all the steps above into one code chunk:

```{r}
quadrant <- vector(mode="numeric",length=nrow(localMI))
hunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)
DV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     
LM_I <- localMI[,1]   
signif <- 0.05       
quadrant[DV <0 & LM_I>0] <- 1 # LL
quadrant[DV >0 & LM_I<0] <- 2 # LH
quadrant[DV <0 & LM_I<0] <- 3 # HL
quadrant[DV >0 & LM_I>0] <- 4 # HH
quadrant[localMI[,5]>signif] <- 0 # non-sig
```

### **10.7.4 Plotting LISA map**

Now, we can build the LISA map by using the code chunks below.

```{r}
#| fig-width: 14
#| fig-asp: 0.68
hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")


LISAmap <- tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], #index starts from 1
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_text('County',
          size = 0.5)+
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5) +
  tm_layout(main.title='LISA map (significant)',
            legend.width = 0.25,
            legend.height = 0.25)

LISAmap
```

For effective interpretation, it is better to plot both the **local Moran's I values map** and its corresponding LISA map next to each other.

The code chunk below will be used to create such visualisation.

```{r}
#| fig-width: 14
#| fig-asp: 0.68
tmap_arrange(localMI.map, LISAmap,
             asp=1,
             ncol=2 )
```

>
> 'Clustering of dissimilar values' (Local Moran I \< 0) is also known as 'dispersion' or 'outlier' region.
>
> The darker green regions shows signs of clustering of similar values while the orange regions shows signs of dispersion (cluster of dissimilar values). The LISA map on the right will be able to give more detailed insights, for e.g. for cluster regions whether is it HH or LL and for the outliers region whether its LH or HL.

The GDPPC and LISA Map can also be placed side by side .

```{r}
#| fig-width: 14
#| fig-asp: 0.68
gdppc <- qtm(hunan, 'GDPPC') +
  tm_layout(main.title= 'GDPPC')

tmap_arrange(gdppc, LISAmap,
             asp=1,
             ncol=2)
```

> LISAmap:
>
> The dark blue and red regions are clusters of LL and HH respectively.
>
> The light blue regions are outliers (LH), where those regions have relatively lower values than their neighbours.

## **10.8 Hot Spot and Cold Spot Area Analysis**

Beside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot (high values amongst high) and/or cold spot areas (low values amongst low).

The term \'hot spot\' has been used generically across disciplines to describe a region or value that is higher relative to its surroundings (Lepers et al 2005, Aben et al 2012, Isobe et al 2015).

### **10.8.1 Getis and Ord\'s G-Statistics**

An alternative spatial statistics to detect spatial anomalies is the Getis and Ord\'s G-statistics (Getis and Ord, 1972; Ord and Getis, 1995). It looks at neighbours within a **defined proximity (use of distance)** to identify where either high or low values cluster spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.

The analysis consists of three steps:

-   Deriving spatial weight matrix

-   Computing Gi statistics

-   Mapping Gi statistics

### **10.8.2 Deriving distance-based weight matrix**

First, we need to define a new set of neighbours. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining **neighbours based on distance. The spatial weights matrix used in this section is binary.**

There are two type of distance-based proximity matrix, they are:

-   fixed distance weight matrix; and

-   adaptive distance weight matrix.

From Hands-on_Ex2.1:

![](images/Summary%20of%20deriving%20weights%20matrix-01.png)

#### 10.8.2.1 Deriving the centroid

We will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running *st_centroid()* on the sf object: **us.bound**. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be *st_centroid()*. We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation

To get our longitude values we map the *st_centroid()* function over the geometry column of us.bound and access the longitude value through double bracket notation \[\[\]\] and 1. This allows us to get only the longitude, which is the first value in each centroid.

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

The latitude can be accessed using \[\[2\]\]

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

With both long and lat, we use cbind to put longitude and latitude into the same object. The object `coords` represents the CG of all 88 spatial units/ features/ polygons.

```{r}
coords <- cbind(longitude, latitude)
head(coords)
```

#### 10.8.2.2 Determine the cut-off distance

Firstly, we need to determine the upper limit for distance band by using the steps below:

-   Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using [*knearneigh()*](https://r-spatial.github.io/spdep/reference/knearneigh.html) of **spdep**. (k=1)

-   Convert the knn object returned by *knearneigh()* into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using [*knn2nb()*](https://r-spatial.github.io/spdep/reference/knn2nb.html).

-   Return the **length** (distance) of neighbour relationship edges by using [*nbdists()*](https://r-spatial.github.io/spdep/reference/nbdists.html) of **spdep**. The function returns in the units of the coordinates if the coordinates are projected, in **km** otherwise.

-   Remove the list structure of the returned object by using [**unlist()**](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/unlist). The purpose of doing so it to run the summary() function on it in order for us to decide on a distance threshold. Decide on a distance threshold value such that each spatial unit has at least a neighbour.

```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

The summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour. The threshold chosen is 62 km.

#### 10.8.2.3 Computing fixed distance weight matrix

Now, we will compute the 'nb' class by using [*dnearneigh()*](https://r-spatial.github.io/spdep/reference/dnearneigh.html) as shown in the code chunk below.

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
summary(wm_d62)
```

Sneak peak into neighbours lists of first 3 polygons

```{r}
wm_d62[1:3]
```

Next, *nb2listw()* is used to convert the nb object into spatial weights matrix object.

```{r}
wm62_lw <- nb2listw(wm_d62, style = 'B')
summary(wm62_lw)
```

Sneak peak of `wm62_lw` spatial weights matrix (binary). The class is 'listw' and 'nb'.

```{r}
wm62_lw$weights[1:3]
```

### **10.8.3 Computing adaptive distance weight matrix (Fixed \# of nb)**

One of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.

It is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.

`knn` is a nb object.

```{r}
knn <- knn2nb(knearneigh(coords, k=8))
knn
```

Sneak peak into the neighbour structure/list of `knn.`

```{r}
knn[1:3]
```

> Each spatial unit has exactly 8 neighbours.

Next, *nb2listw()* is used to convert the nb object into spatial weights object, `knn_lw`.

```{r}
knn_lw <- nb2listw(knn, style = 'B')
summary(knn_lw)
```

Sneak peak into the weights of `knn_lw` spatial weights matrix.

```{r}
knn_lw$weights[1:3]
# attributes(knn_lw)
```

## **10.9 Computing Gi statistics**

### **10.9.1 Gi statistics using fixed distance**

```{r}
fips <- order(hunan$County)
gi.fixed <- localG(hunan$GDPPC, wm62_lw)
gi.fixed
#attributes(gi.fixed)
```

The output of localG() is a vector of G or Gstar values, with attributes \"gstari\" set to FALSE (as default), \"call\" set to the function call, and class \"localG\".

The Gi statistics is represented as a **Z-score.** Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.

Next, we will join the Gi values to their corresponding hunan sf data frame by using the code chunk below.

```{r}
hunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%
  rename(gstat_fixed = as.matrix.gi.fixed.)
```

The code chunk above performs three tasks. First, it converts the output vector (i.e. *gi.fixed*) into r matrix object by using *as.matrix()*. Next, *cbind()* is used to join hunan\@data and *gi.fixed* matrix to produce a new SpatialPolygonDataFrame called *hunan.gi*. Lastly, the field name of the gi values is renamed to *gstat_fixed* by using *rename()*.

### **10.9.2 Mapping Gi values with fixed distance weights**

The code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.

```{r}
#| fig-width: 14
#| fig-asp: 0.68
gdppc <- qtm(hunan, "GDPPC") +
    tm_layout(main.title= 'GDPPC')

Gimap <-tm_shape(hunan.gi) +
  tm_fill(col = "gstat_fixed", 
          style = "pretty",
          palette="-RdBu",
          title = "local Gi") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title= 'local Gi (fixed-dist)')

tmap_arrange(gdppc, Gimap, asp=1, ncol=2)
```

> Chart on the right has Red regions (hotspots with high values clustering together) and Blue regions (Coldspots with low values clustering together).

But we are not sure of the hot/cold spots are statistically significant. We should extract the p-values in order to know.

#### **10.9.2.1 Including significant Gi values**

Examine the structure of `gi.fixed`

```{r}
str(gi.fixed)
```

**`gi.fixed`** is a numeric vector (or array) with some additional attributes. To access the Gi p-values, we can access the "Pr(z != E(Gi))" column using the attribute function **`attr()`**

```{r}
p_value_fix <- attr(gi.fixed, "internals")[, "Pr(z != E(Gi))"]
```

Append p-values to `hunan.gi`

```{r}
hunan.gi <- cbind(hunan.gi, as.vector(p_value_fix)) %>% 
  rename(p_value_fix = as.vector.p_value_fix.)
```

Plot only significant Gi regions

```{r}
#| fig-width: 14
#| fig-asp: 0.68
Gimap_sig<-tm_shape(hunan.gi) +
  tm_fill(col = "p_value_fix", 
          breaks = c(-Inf, 0.05, Inf),
          palette = c('lightgreen', 'grey'),
          title = "local Gi p-values") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title= 'local Gi signif 95%')

tmap_arrange(gdppc, Gimap, Gimap_sig,
             asp=1,
             nrow=2,
             ncol=2)

```

> The bottom left chart shows significant hot/cold spots at 95% confidence level.
> We can see that all of the coldspots are not statistically significant here.

### **10.9.3 Gi statistics using adaptive distance**

The code chunk below are used to compute the Gi values for GDPPC2012 by using an adaptive distance weight matrix (i.e *`knn_lw`*).

```{r}
fips <- order(hunan$County)
gi.adaptive <- localG(hunan$GDPPC, knn_lw)
hunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%
  rename(gstat_adaptive = as.matrix.gi.adaptive.)
```

### **10.9.4 Mapping Gi values with adaptive distance weights**

To visualise the locations of hot spot and cold spot areas. The choropleth mapping functions of **tmap** package will be used to map the Gi values.

The code chunk below shows the functions used to map the Gi values derived using adaptive distance weight matrix.

```{r}
#| fig-width: 14
#| fig-asp: 0.68
gdppc<- qtm(hunan, "GDPPC") +
    tm_layout(main.title= 'GDPPC')

Gimap <- tm_shape(hunan.gi) + 
  tm_fill(col = "gstat_adaptive", 
          style = "pretty", 
          palette="-RdBu", 
          title = "local Gi") + 
  tm_borders(alpha = 0.5)+
    tm_layout(main.title= 'local Gi (adaptive)')

tmap_arrange(gdppc, 
             Gimap, 
             asp=1, 
             ncol=2)
```

> From fixed-dist to adaptive-dist spatial weights matrix, the definition of neighbours and the way they interact with one another have changed, we can observe differences in identified cold/hot spots between the above chart and the one from the previous section.

## 11 References 

Tin Seong Kam. \"9 Global Measures of Spatial Autocorrelation\" From **R for Geospatial Data Science and Analytics** <https://r4gdsa.netlify.app/chap09>

Tin Seong Kam. \"10 Local Measures of Spatial Autocorrelation\" From **R for Geospatial Data Science and Analytics** <https://r4gdsa.netlify.app/chap10>

## 12 Summary 

![]()![](images/Summary%20of%20deriving%20weights%20matrixv2-01.png)

**Ways to check R object**

class(), methods(class=class(object_name)), str(), attributes(), spatial_weights_matrix\$weights

```{r}
#| eval: false
#| echo: false
#| code-fold: True
#| fig-width: 14
#| fig-asp: 0.68
```
