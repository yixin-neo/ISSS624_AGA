---
title: "Hands-on Exercise 2.3:Local Measures of Spatial Autocorrelation"
author: "NeoYX"
date: '22 Nov 2023'
date-modified: "`r Sys.Date()`"
editor: visual
execute: 
  freeze: auto
  warning: false
  #echo: false
  #message: false
format: 
  html:
    code-fold: False
    code-overflow: scroll
    code-summary: "Show the code"
    code-line-numbers: true
---

## **10.1 Overview**

In this hands-on exercise, wewill learn how to compute Global and Local Measure of Spatial Autocorrelation (GLSA) by using **spdep** package. By the end to this hands-on exercise, we will be able to:

-   compute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of **spdep** package,

    -   plot Moran scatterplot,

    -   compute and plot spatial correlogram using appropriate function of **spdep** package.

-   compute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers by using appropriate functions **spdep** package;

-   compute Getis-Ord\'s Gi-statistics for detecting hot spot or/and cold spot area by using appropriate functions of **spdep** package; and

-   to visualise the analysis output by using **tmap** package.

## **10.2 Getting Started**

### **10.2.1 The analytical question**

-   In spatial policy, local government/planners aims to ensure equal distribution of development in the province.

-   we should apply appropriate spatial statistical methods to discover if development are even distributed geographically in the province

-   if answer is NO, we ask \"is there sign of clustering?\" (GLOBAL spatial autocorrelation)

-   if YES, \"Where are the clusters\" (LOCAL spatial autocorrelation)

In this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e.Â GDP per capita) of Hunan Provice, People Republic of China. (https://en.wikipedia.org/wiki/Hunan)

### **10.2.2 The Study Area and Data**

Two data sets will be used in this hands-on exercise, they are:

1.  Geospatial data: Hunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.

2.  Aspatial data: Hunan_2012.csv: This csv file contains selected Hunan\'s local development indicators in 2012.

### **10.2.3 Setting the Analytical Toolls**

Packages that we will be using are:

-   sf is use for importing and handling geospatial data in R,

-   tidyverse is mainly use for wrangling attribute data in R,

-   spdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and

-   tmap will be used to prepare cartographic quality chropleth map.

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr)
```

## 
**10.3 Getting the Data Into R Environment**

The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.

### **10.3.1 Import shapefile into r environment**

The code chunk below uses [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package to import Hunan shapefile into R. The imported shapefile will be **simple features** Object of **sf**.

`hunan` is in WSG84 geographical system.

```{r}
hunan <- st_read(dsn='data/geospatial',
                 layer='Hunan')
```

### **10.3.2 Import csv file into r environment**

Next, we will import *Hunan_2012.csv* into R by using *read_csv()* of **readr** package. The output is R data frame class.

```{r}
hunan2012 <- read_csv('data/aspatial/Hunan_2012.csv')
head(hunan2012,3)
```

### **10.3.3 Performing relational join**

The code chunk below will be used to update the attribute table of *hunan*\'s SpatialPolygonsDataFrame (geospatial) with the attribute fields of *hunan2012* dataframe (aspatial) . This is performed by using *left_join()* of **dplyr** package. Since the join columns are not specified, identical columns names (\'County\') form both dataset will be used for the join.

Column 7 and 15 are the \'County\' and \'GDPPC\' columns respectively.

```{r}
hunan <- left_join(hunan,hunan2012) %>%
  select(1:4, 7, 15)
```

### **10.3.4 Visualising Regional Development Indicator**

Now, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using *qtm()* of **tmap** package.

-   tm_fill() \'s **n** refer to the number of equal intervals

```{r}
equal <- tm_shape(hunan)+
  tm_fill('GDPPC',
          n=5,
          style='equal') +
  tm_borders(alpha=0.5) +
  tm_layout(main.title = 'Equal interval classification',
            main.title.size=1.5,
            legend.height = 0.25,
            legend.width = 0.25)

quantile <- tm_shape(hunan)+
  tm_fill('GDPPC',
          n=5,
          style='quantile') +
  tm_borders(alpha=0.5) +
  tm_layout(main.title = 'Equal quantile classification',
            main.title.size=1.5,
            legend.height = 0.25,
            legend.width = 0.25)

tmap_arrange(equal, quantile, asp =1, ncol=2)
```

```{r}
#| eval: false
#| echo: false
#| code-fold: True
#| fig-width: 14
#| fig-asp: 0.68
```

## Theories

### 
