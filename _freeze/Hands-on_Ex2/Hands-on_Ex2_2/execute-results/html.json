{
  "hash": "9189d42a9d1faa6c66c415717c25b1cd",
  "result": {
    "markdown": "---\ntitle: \"Hands-on Exercise 2.2 and 2.3: Global and Local Measures of Spatial Autocorrelation\"\nauthor: \"NeoYX\"\ndate: '22 Nov 2023'\ndate-modified: \"2023-11-22\"\neditor: visual\nexecute: \n  freeze: auto\n  warning: false\n  #echo: false\n  #message: false\nformat: \n  html:\n    code-fold: false\n    code-overflow: scroll\n    code-summary: \"Show the code\"\n    code-line-numbers: true\n---\n\n\n## **9.1 Overview**\n\nIn this hands-on exercise, we will learn to\n\n-   compute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of **spdep** package,\n\n    -   plot Moran scatterplot,\n\n    -   compute and plot spatial correlogram using appropriate function of **spdep** package.\n\n-   compute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers by using appropriate functions **spdep** package;\n\n-   compute Getis-Ord's Gi-statistics for detecting hot spot or/and cold spot area by using appropriate functions of **spdep** package; and\n\n-   to visualise the analysis output by using **tmap** package.\n\n# 9 Hands-on_EX2_2: Global measures of spatial autocorrelation\n\n## **9.2 Getting Started**\n\n### 9.2.1 The analytical question\n\n-   In spatial policy, local government/planners aims to ensure equal distribution of development in the province.\n\n-   we should apply appropriate spatial statistical methods to discover if development are even distributed geographically in the province\n\n-   if answer is NO, we ask \"is there sign of clustering?\" (GLOBAL spatial autocorrelation)\n\n-   if YES, \"Where are the clusters\" (LOCAL spatial autocorrelation)\n\nIn this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Provice, People Republic of China. (https://en.wikipedia.org/wiki/Hunan)\n\n### \n\n9.2.2 The Study Area and Data\n\nTwo data sets will be used in this hands-on exercise:\n\n1.  Geospatial data: Hunan province administrative boundary layer at county level in ESRI shapefile format\n\n2.  Aspatial data: *Hunan_2012.csv* containing local development indicators\n\n### 9.2.3 Setting the Analytical Tools\n\nPackages we need:\n\n-   sf is use for importing and handling geospatial data in R,\n\n-   tidyverse is mainly use for wrangling attribute data in R,\n\n-   spdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and\n\n-   tmap will be used to prepare cartographic quality chropleth map.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spdep, tmap, tidyverse, knitr)\n```\n:::\n\n\n## **9.3 Getting the Data Into R Environment**\n\nThe geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.\n\n### **9.3.1 Import shapefile into r environment**\n\nThe code chunk below uses [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package to import Hunan shapefile into R. The imported shapefile will be **simple features** Object of **sf**.\n\n`hunan` is in WSG84 geographical system.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan <- st_read(dsn='data/geospatial',\n                 layer='Hunan')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `Hunan' from data source \n  `C:\\yixin-neo\\ISSS624_AGA\\Hands-on_Ex2\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n```\n:::\n\n```{.r .cell-code}\n#st_crs(hunan)\nhead(hunan,3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 3 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 111.7027 ymin: 28.61762 xmax: 112.3013 ymax: 29.77344\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3 Shape_Leng Shape_Area  County\n1 Changde 21098 Anxiang      County   1.869074 0.10056190 Anxiang\n2 Changde 21100 Hanshou      County   2.360691 0.19978745 Hanshou\n3 Changde 21101  Jinshi County City   1.425620 0.05302413  Jinshi\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n```\n:::\n:::\n\n\n### **9.3.2 Import csv file into r environment**\n\nNext, we will import *Hunan_2012.csv* into R by using *read_csv()* of **readr** package. The output is R data frame class.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan2012 <- read_csv('data/aspatial/Hunan_2012.csv')\nhead(hunan2012,3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 29\n  County  City  avg_wage deposite   FAI Gov_Rev Gov_Exp    GDP GDPPC   GIO  Loan\n  <chr>   <chr>    <dbl>    <dbl> <dbl>   <dbl>   <dbl>  <dbl> <dbl> <dbl> <dbl>\n1 Anhua   Yiya…    30544   10967  6832.    457.   2703  13225  14567 9277. 3955.\n2 Anren   Chen…    28058    4599. 6386.    221.   1455.  4941. 12761 4189. 2555.\n3 Anxiang Chan…    31935    5517. 3541     244.   1780. 12482  23667 5109. 2807.\n# ℹ 18 more variables: NIPCR <dbl>, Bed <dbl>, Emp <dbl>, EmpR <dbl>,\n#   EmpRT <dbl>, Pri_Stu <dbl>, Sec_Stu <dbl>, Household <dbl>,\n#   Household_R <dbl>, NOIP <dbl>, Pop_R <dbl>, RSCG <dbl>, Pop_T <dbl>,\n#   Agri <dbl>, Service <dbl>, Disp_Inc <dbl>, RORP <dbl>, ROREmp <dbl>\n```\n:::\n:::\n\n\n### **9.3.3 Performing relational join**\n\nThe code chunk below will be used to update the attribute table of *hunan*'s SpatialPolygonsDataFrame (geospatial) with the attribute fields of *hunan2012* dataframe (aspatial) . This is performed by using *left_join()* of **dplyr** package. Since the join columns are not specified, identical columns names ('County') form both dataset will be used for the join.\n\nColumn 7 and 15 are the 'County' and 'GDPPC' columns respectively.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan <- left_join(hunan, hunan2012) %>% \n  select(1:4, 7,15)\nhead(hunan,3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 3 features and 6 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 111.7027 ymin: 28.61762 xmax: 112.3013 ymax: 29.77344\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667\n2 Changde 21100 Hanshou      County Hanshou 20981\n3 Changde 21101  Jinshi County City  Jinshi 34592\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n```\n:::\n:::\n\n\n### **9.3.4 Visualising Regional Development Indicator**\n\nNow, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using *qtm()* of **tmap** package.\n\n-   tm_fill() 's **n** refer to the number of equal intervals\n\n\n::: {.cell fig.asp='0.68'}\n\n```{.r .cell-code}\nequal <- tm_shape(hunan)+\n  tm_fill('GDPPC',\n          n=5,\n          style='equal') +\n  tm_borders(alpha=0.5) +\n  tm_layout(main.title = 'Equal interval classification',\n            main.title.size=1.5,\n            legend.height = 0.25,\n            legend.width = 0.25)\n\nquantile <- tm_shape(hunan)+\n  tm_fill('GDPPC',\n          n=5,\n          style='quantile') +\n  tm_borders(alpha=0.5) +\n  tm_layout(main.title = 'Equal quantile classification',\n            main.title.size=1.5,\n            legend.height = 0.25,\n            legend.width = 0.25)\n\ntmap_arrange(equal, quantile, asp =1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex2_2_files/figure-html/unnamed-chunk-5-1.png){width=1344}\n:::\n:::\n\n\n## **9.4 Global Spatial Autocorrelation**\n\nIn this section, we will\n\n-   compute global spatial autocorrelation statistics\n\n-   perform spatial complete randomness test for global spatial autocorrelation (test for significance).\n\n### **9.4.1 Computing Contiguity Spatial Weights**\n\nBefore we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.\n\nIn the code chunk below, [*poly2nb()*](https://r-spatial.github.io/spdep/reference/poly2nb.html) of **spdep** package is used to compute contiguity weight matrices for the study area. This function will\n\n-   build a neighbours list based on regions with contiguous boundaries.\n\n-   if 'queen' argument is TRUE: spatial units are considered neighbours if they share a common point. A list of first order neighbours using the Queen criteria will be returned.\n\n-   if 'queen' argument is FALSE: spatial unit are considered neighbours if they share a least two common points.\n\nMore specifically, the code chunk below is used to compute Queen contiguity weight matrix.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q <- poly2nb(hunan,\n                queen=TRUE)\nsummary(wm_q)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n```\n:::\n:::\n\n\nSneakpeak at the neighbours' list of the first three polygons.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q[1:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1]  2  3  4 57 85\n\n[[2]]\n[1]  1 57 58 78 85\n\n[[3]]\n[1]  1  4  5 85\n```\n:::\n:::\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbours.\n\n### **9.4.2 Row-standardised weights matrix**\n\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=\"W\"). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors' values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we'll stick with the style=\"W\" option for simplicity's sake but note that other more robust options are available, notably style=\"B\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrswm_q <- nb2listw(wm_q,\n                   style='W',\n                   zero.policy=TRUE)\nrswm_q\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n```\n:::\n:::\n\n\nSneak peak at the neighbour weights of the first three polygons\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrswm_q$weights[1:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[2]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[3]]\n[1] 0.25 0.25 0.25 0.25\n```\n:::\n:::\n\n\nThe input of *nb2listw()* must be an object of class **nb**. The syntax of the function has two major arguments, namely style and zero.poly.\n\n-   *style* can take values \"W\", \"B\", \"C\", \"U\", \"minmax\" and \"S\". B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\n\n-   If *zero policy* is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %\\*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattributes(rswm_q)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$names\n[1] \"style\"      \"neighbours\" \"weights\"   \n\n$class\n[1] \"listw\" \"nb\"   \n\n$region.id\n [1] \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\" \"11\" \"12\" \"13\" \"14\" \"15\"\n[16] \"16\" \"17\" \"18\" \"19\" \"20\" \"21\" \"22\" \"23\" \"24\" \"25\" \"26\" \"27\" \"28\" \"29\" \"30\"\n[31] \"31\" \"32\" \"33\" \"34\" \"35\" \"36\" \"37\" \"38\" \"39\" \"40\" \"41\" \"42\" \"43\" \"44\" \"45\"\n[46] \"46\" \"47\" \"48\" \"49\" \"50\" \"51\" \"52\" \"53\" \"54\" \"55\" \"56\" \"57\" \"58\" \"59\" \"60\"\n[61] \"61\" \"62\" \"63\" \"64\" \"65\" \"66\" \"67\" \"68\" \"69\" \"70\" \"71\" \"72\" \"73\" \"74\" \"75\"\n[76] \"76\" \"77\" \"78\" \"79\" \"80\" \"81\" \"82\" \"83\" \"84\" \"85\" \"86\" \"87\" \"88\"\n\n$call\nnb2listw(neighbours = wm_q, style = \"W\", zero.policy = TRUE)\n```\n:::\n\n```{.r .cell-code}\nmethods(class=class(rswm_q))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] coerce      initialize  lag         plot        print       show       \n[7] slotsFromS3 subset      summary    \nsee '?methods' for accessing help and source code\n```\n:::\n:::\n\n\n### **9.4.3 Global Spatial Autocorrelation: Moran's I**\n\nIn this section, we will learn how to perform Moran's I statistics testing by using [*moran.test()*](https://r-spatial.github.io/spdep/reference/moran.test.html) of **spdep**.\n\n### **9.4.4 Moran's I test**\n\n**Global** spatial association assesses the overall spatial pattern of a variable across the entire study area. It provides a single value or metric that summarizes the extent to which similar values cluster together or are dispersed across the entire geographic space.\n\n**The Moran's I assumes data follows a normal distribution and are randomised.**\n\nMoran's I values range from -1 to 1 while Geary's C ranges from 0 to 2.\n\n![](images/Global%20Moran%20stats%20test.png){width=\"357\"}\n\nThe code chunk below performs Moran's I statistical testing using [*moran.test()*](https://r-spatial.github.io/spdep/reference/moran.test.html) of **spdep**. It takes in the main arguments:\n\n-   variable\n\n-   `listw` , our spatial weights matrix that defines the neighbourhood and relationship between them.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoran.test(hunan$GDPPC,\n           listw = rswm_q,\n           zero.policy=TRUE,\n           na.action=na.omit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tMoran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n```\n:::\n:::\n\n\n> The null hypothesis: Observed spatial patterns of values is equally likely as any random spatial pattern.\n>\n> Since the p-value is less than 0.05 and Moran I statistic is greater than 1, we can reject the null hypothesis and conclude that similar values tend to cluster together in our area of study.\n\n#### 9.4.4.1 Computing Monte Carlo Moran's I\n\nIn the event we are unsure whether the data follows a normal distribution and are randomised, we can use the Monte Carlo Simulation to simulate Moran's I [n]{.underline} times under the assumption of no spatial pattern (shuffle/permutate the variable across all spatial units). This creates a baseline to compare with the observed Moran's I value from dataset.\n\nThe code chunk below performs permutation test for Moran's I statistic by using [*moran.mc()*](https://r-spatial.github.io/spdep/reference/moran.mc.html) of **spdep**. A total of 1000 simulation will be performed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nbperm = moran.mc(hunan$GDPPC,\n                 listw=rswm_q,\n                 nsim=999,\n                 zero.policy=TRUE,\n                 na.action=na.omit)\nbperm\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n```\n:::\n:::\n\n\n| Since the p-value is less than 0.05 and Moran I statistic is greater than 1, we can reject the null hypothesis and conclude that similar values tend to cluster together in our area of study.\n\n#### 9.4.4.2 Visualising Monte Carlo Moran's I\n\nIt is always a good practice for us the examine the simulated Moran's I test statistics in greater detail. This can be achieved by plotting the distribution of the statistical values as a histogram by using the code chunk below.\n\nIn the code chunk below [*hist()*](https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/hist) and [*abline()*](https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/abline) of R Graphics are used.\n\nGet the mean of simulated moran's I values. The 'res' column contains the simulated moran's i values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(bperm$res[1:999]) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -0.01504572\n```\n:::\n:::\n\n\nGet the variance\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvar(bperm$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.004371574\n```\n:::\n:::\n\n\nSummary statistics\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(bperm$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n```\n:::\n:::\n\n\nPlotting\n\n::: panel-tabset\n## ggplot2\n\nWe will use [ggplot2](https://ggplot2.tidyverse.org/) to create the histogram instead of base r.\n\n[**ggthemes**](https://cran.r-project.org/web/packages/ggthemes/) provides ['ggplot2' themes](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/) that replicate the look of plots by Edward Tufte, Stephen Few, [Fivethirtyeight](https://fivethirtyeight.com/), [The Economist](https://www.economist.com/graphic-detail), 'Stata', 'Excel', and [The Wall Street Journal](https://www.pinterest.com/wsjgraphics/wsj-graphics/), among others.\n\n\n::: {.cell fig.asp='0.68'}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(ggplot2)\nlibrary(ggthemes)\n\nbperm_df <- as.data.frame(bperm$res)\ncolnames(bperm_df) <- c('res')\n\n#q <- quantile(bperm_df$res[1:999], probs = c(0.25, 0.5, 0.75))\nmean <- mean(bperm_df$res[1:999])\nmean\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -0.01504572\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(data=bperm_df,\n       aes(x=res)) +\n  geom_histogram(bins=20,\n                 color='grey25',\n                 fill='grey90',size=0.8) +\n  #geom_vline(xintercept = q[2], linetype='dotted', size = 0.8, color='blue') +\n  #geom_vline(xintercept = q[3], linetype='dotted', size = 0.8) +\n  geom_vline(xintercept = mean, linetype='dotted', size = 0.8, color='red') +\n  #annotate('text' , x= -0.055, y=180, label='50th \\npercentile', size = 5, color='blue') +\n  #annotate('text' , x= 0.06, y=180, label='75th \\npercentile', size = 5) +\n  annotate('text' , x= 0.015, y=180, label='mean', size = 5, color='red') +\n  labs(y= 'Frequency', x=\"Moran's I values\") +\n  theme_economist() +\n  theme(axis.title.y=element_text(angle = 0,\n                                  vjust=0.9)) +\n  ggtitle(\"Histogram of Simulated Moran's I\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex2_2_files/figure-html/unnamed-chunk-16-1.png){width=1344}\n:::\n:::\n\n\n## Base Graph\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(bperm$res,\n     freq=TRUE,\n     breaks=20,\n     xlab=\"Simulated Moran's I\",\n     main = paste(\"Histogram of Simulated Moran I\"))\nabline(v=0,\n       col='red')\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex2_2_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n:::\n\n### **9.4.5 Global Spatial Autocorrelation: Geary's**\n\nIn this section, we will learn how to perform Geary's c statistics testing by using appropriate functions of **spdep** package.\n\n#### 9.4.5.1 Geary's C test\n\nThe code chunk below performs Geary's C test for spatial autocorrelation by using [*geary.test()*](https://r-spatial.github.io/spdep/reference/geary.test.html) of **spdep**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngeary.test(hunan$GDPPC, listw=rswm_q)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tGeary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n```\n:::\n:::\n\n\n> The null hypothesis: Observed spatial patterns of values is equally likely as any random spatial pattern.\n>\n> Since the p-value is less than 0.05 and Geary's C statistic is greater 0 and less than 1, we can reject the null hypothesis and conclude that similar values tend to cluster together in our area of study.\n\n#### 9.4.5.2 Computing Monte Carlo Geary's C\n\nIn the event we are unsure whether the data follows a normal distribution and are randomised, the code chunk below performs permutation test for Geary's C statistic by using [*geary.mc()*](https://r-spatial.github.io/spdep/reference/geary.mc.html) of **spdep**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tMonte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n```\n:::\n:::\n\n\n| Since the p-value is less than 0.05 and Geary's C statistic is greater 0 and less than 1, we can reject the null hypothesis and conclude that similar values tend to cluster together in our area of study.\n\n#### 9.4.5.3 Visualising the Monte Carlo Geary's C\n\nNext, we will plot a histogram to reveal the distribution of the simulated values by using the code chunk below.\n\nGet the mean of simulated Geary's C\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(bperm$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.004402\n```\n:::\n:::\n\n\nGet the variance\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvar(bperm$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.007436493\n```\n:::\n:::\n\n\nSummary statistics\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(bperm$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n```\n:::\n:::\n\n\nPlot the histogram using ggplot2\n\n\n::: {.cell fig.asp='0.68'}\n\n```{.r .cell-code  code-fold=\"true\"}\nbperm_df <- as.data.frame(bperm$res)\ncolnames(bperm_df) <- c('res')\n\n#q <- quantile(bperm_df$res[1:999], probs = c(0.25, 0.5, 0.75))\nmean <- mean(bperm_df$res[1:999])\nmean\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.004402\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(data=bperm_df,\n       aes(x=res)) +\n  geom_histogram(bins=20,\n                 color='grey25',\n                 fill='grey90',size=0.8) +\n  geom_vline(xintercept = mean, linetype='dotted', size = 0.8, color='red') +\n  annotate('text' , x= 1.05, y=180, label='mean', size = 5, color='red') +\n  labs(y= 'Frequency', x=\"Geary's C values\") +\n  theme_economist() +\n  theme(axis.title.y=element_text(angle = 0,\n                                  vjust=0.9)) +\n  ggtitle(\"Histogram of Simulated Geary's C\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex2_2_files/figure-html/unnamed-chunk-23-1.png){width=1344}\n:::\n:::\n\n\n## **9.5 Spatial Correlogram**\n\nSpatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran's I or Geary's c) against distance.Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.\n\n### **9.5.1 Compute Moran's I correlogram**\n\nIn the code chunk below, [*sp.correlogram()*](https://r-spatial.github.io/spdep/reference/sp.correlogram.html) of **spdep** package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran's I. The **plot()** of base Graph is then used to plot the output.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMI_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex2_2_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\nArguments:\n\n-   'order' refers to number of layers away from each polygon using contiguity method. We want to check how the Moran's I values changes (and its statistical significance changes) as the neighbours get further and further away.\n\n-   'method': 'corr' for correlation, 'I' for Moran's I and 'C' for Gerary's C.\n\n| [Understanding the plot]{.underline}\n| **Y-Axis:** The y-axis typically represents the Moran's I coefficient, which quantifies spatial autocorrelation. Above zero, similar values cluster. Below zero, dissimilar values cluster.\n| **X-Axis:** The x-axis represents spatial distance lags. Each point on the correlogram corresponds to a specific distance lag (e.g., distance between observations). The points are usually organized in bins or distance classes.\n| **Bars or Lines:** Bars or lines connect the Moran's I values at different distance lags, forming a pattern that shows how spatial autocorrelation changes with distance.\n| [Usefulness of Moran's I Correlogram]{.underline}\n| **Detecting Spatial Patterns:** A Moran's I correlogram provides insights into the presence and structure of spatial patterns in our data. It helps identify at what distances spatial autocorrelation is significant.\n\nBy plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(MI_corr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n:::\n\n\nWe see that with the exception of Lag 4, the rest of the results are statistically significant at the 95% level of confidence.\n\nAs we consider order lag from 1 to 3, there is significant positive autocorrelation (similar values cluster) and we note the Moran's I values decreases as order increases. For order 5 and 6, there is significant negative autocorrelation (dissimilar values cluster)\n\n[Possible reason for the change of polarity:]{.underline}\n\nLocal clusters could dominate at smaller distances while at larger distances, can detect dispersion more.\n\n**9.5.2 Compute Geary's C correlogram and plot**\n\nIn the code chunk below, *sp.correlogram()* of **spdep** package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary's C. The **plot()** of base Graph is then used to plot the output.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGC_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex2_2_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n0\\< Geary C \\< 1 : similar values cluster\n\n1 \\< Geary C \\< 2: dissimilar values cluster\n\nNow examine the full report to check which values are significant.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(GC_corr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n:::\n\n\nThe results of Geary's C statistics test is similar to Moran's I.\n\nAll lag orders except Lag order of 3, 4 and 6 are statistically significant at 95% confidence level.\n\nLag order 1 and 2: clustering of similar values, order 2 is less clustered than order 1. (Moran's I and Geary's C are inversely related.)\n\nLag order 5: clustering of dissimilar values.\n\n# \n10 Hands-on_Ex2_3:  **Local Measures of Spatial Autocorrelation**\n\n## **10.6 Cluster and Outlier Analysis**\n\nLocal Indicators of Spatial Association or LISA are statistics that evaluate the existence of clusters in the spatial arrangement of a given variable. For instance if we are studying cancer rates among census tracts in a given city local clusters in the rates mean that there are **localised areas** that have higher or lower rates than is to be expected by chance alone; that is, the values occurring are above or below those of a random distribution in space.\n\nIn this section, we will learn how to apply appropriate Local Indicators for Spatial Association (LISA), especially local Moran\\'I to detect cluster (HH or LL) and/or outlier (HL, LH) from GDP per capita 2012 of Hunan Province, PRC.\n\n### **10.6.1 Computing local Moran\\'s I**\n\nTo compute local Moran\\'s I, the [*localmoran()*](https://r-spatial.github.io/spdep/reference/localmoran.html) function of **spdep** will be used. It computes ***Ii*** values, given a set of ***zi*** values (variable) and a **listw** object (spatial weights matrix) providing neighbour weighting information for the polygon associated with the zi values.\n\nThe code chunks below are used to compute local Moran\\'s I of *GDPPC2012* at the county level.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfips <- order(hunan$County)\nlocalMI <- localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n```\n:::\n:::\n\n\n*localmoran()* function returns a matrix of values whose columns are:\n\n-   Ii: the local Moran\\'s I statistics\n\n-   E.Ii: the expectation of local moran statistic under the randomisation hypothesis\n\n-   Var.Ii: the variance of local moran statistic under the randomisation hypothesis\n\n-   Z.Ii:the standard deviate of local moran statistic\n\n-   Pr(z != E(Ii)): the p-value of local moran statistic\n\nNote there is no County's name in the output above.\n\nWe must first create a dataframe that appends the County's name to its local moran (li) values.\n\n-   Fips is an object of integer class. It contains the row ids if rows are to be arranged in alphabetical order.\n\n-   localMI\\[Fips,\\] would arrange the rows of `localMI` in alphabetical order of its countys' name, retaining all the columns.\n\n-   The row names would take the countys' name.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.frame(\n  localMI[fips,],\n  row.names=hunan$County[fips])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                         Ii          E.Ii       Var.Ii         Z.Ii\nAnhua         -2.249264e-02 -5.004845e-03 5.823550e-02 -0.072467148\nAnren         -3.993226e-01 -7.011066e-03 7.034768e-02 -1.479129376\nAnxiang       -1.468468e-03 -2.815006e-05 4.723841e-04 -0.066269038\nBaojing        3.473702e-01 -5.008916e-03 8.363556e-02  1.218469473\nChaling        2.055902e-02 -9.681197e-04 2.771090e-02  0.129318589\nChangning     -2.986822e-05 -9.001050e-09 1.510502e-07 -0.076827706\nChangsha       4.902202e+00 -2.134796e-01 2.319447e+00  3.359009720\nChengbu        7.372487e-01 -1.053447e-02 2.213175e-01  1.589526537\nChenxi         1.454365e-01 -2.815570e-03 4.711616e-02  0.682992264\nCili           7.317634e-02 -1.674718e-03 4.790227e-02  0.341995115\nDao            2.142022e-01 -2.082417e-03 4.412297e-02  1.029658605\nDongan         1.520993e-01 -6.348547e-04 1.347103e-02  1.315938472\nDongkou        5.291750e-01 -6.446092e-03 1.074771e-01  1.633803048\nFenghuang      1.801308e-01 -6.283165e-03 1.325694e-01  0.511984469\nGuidong       -5.916014e-01 -1.308623e-02 3.700293e-01 -0.951035346\nGuiyang        1.824044e-01 -3.690810e-03 3.261010e-02  1.030526392\nGuzhang        2.846615e-01 -8.505419e-03 1.415188e-01  0.779305680\nHanshou        2.587817e-02 -6.061953e-04 1.016664e-02  0.262664253\nHengdong       9.996391e-03 -4.906253e-04 6.774150e-03  0.127416164\nHengnan        2.806438e-02 -3.216027e-04 3.759726e-03  0.462941265\nHengshan      -5.820079e-03 -3.043712e-05 5.107618e-04 -0.256178406\nHengyang       6.299738e-02 -1.304629e-03 2.186493e-02  0.434860999\nHongjiang      1.878961e-01 -2.301871e-03 3.172474e-02  1.067841398\nHuarong       -1.538876e-02 -1.866731e-03 8.102957e-02 -0.047502891\nHuayuan        8.377211e-02 -8.556865e-04 2.449544e-02  0.540717545\nHuitong        2.599702e-01 -5.244723e-03 1.107748e-01  0.796851342\nJiahe         -1.243083e-01 -3.055038e-03 5.111118e-02 -0.536334231\nJianghua       2.865113e-01 -3.828030e-03 8.096774e-02  1.020351540\nJiangyong      2.433662e-01 -2.708245e-03 1.174582e-01  0.718000620\nJingzhou       1.826997e-01 -8.510650e-04 2.436325e-02  1.175949207\nJinshi        -1.198765e-02 -5.366648e-03 1.133362e-01 -0.019667048\nJishou        -2.867986e-01 -2.630512e-03 4.402754e-02 -1.354294669\nLanshan        6.333362e-02 -9.636499e-04 2.044104e-02  0.449718820\nLeiyang        1.158072e-02 -1.494826e-04 2.508151e-03  0.234222483\nLengshuijiang -1.790335e+00 -8.212937e-02 2.159843e+00 -1.162328599\nLi             1.022468e-03 -2.404783e-07 5.105969e-06  0.452598007\nLianyuan      -1.467236e-01 -1.898315e-03 1.914540e-02 -1.046676007\nLiling         1.377428e+00 -1.509679e-02 4.260107e-01  2.133500656\nLinli          1.481488e-02 -6.829362e-05 1.449949e-03  0.390858141\nLinwu         -2.462072e-03 -9.070298e-06 1.925839e-04 -0.176761556\nLinxiang       6.590403e-02 -2.902766e-03 2.547019e-01  0.136337469\nLiuyang        3.368822e+00 -7.750185e-02 1.518028e+00  2.797152251\nLonghui        8.080051e-01 -1.137734e-02 1.553779e-01  2.078700865\nLongshan       7.566311e-01 -1.109985e-02 3.144936e-01  1.368999072\nLuxi           1.817670e-01 -2.485491e-03 3.424912e-02  0.995608811\nMayang         2.185183e-01 -5.877251e-03 9.804880e-02  0.716626785\nMiluo          1.870372e+00 -1.692686e-02 2.792482e-01  3.571457247\nNan           -9.578927e-03 -4.949718e-04 6.834133e-03 -0.109883702\nNingxiang      1.560690e+00 -7.387766e-02 8.001247e-01  1.827359328\nNingyuan       2.091020e-01 -7.088350e-03 8.230608e-02  0.753564419\nPingjiang     -9.896383e-01 -2.645739e-03 5.602719e-02 -4.169792730\nQidong         1.180601e-01 -2.120657e-03 2.474712e-02  0.763963227\nQiyang         6.196618e-02 -7.337376e-04 8.574290e-03  0.677123545\nRucheng       -3.699166e-01 -8.899851e-03 2.527217e-01 -0.718135003\nSangzhi        2.505332e-01 -4.947017e-03 6.799980e-02  0.979723392\nShaodong      -3.265891e-02 -3.659195e-05 5.054610e-04 -1.451012157\nShaoshan       2.122266e+00 -5.022659e-02 1.366772e+00  1.858276363\nShaoyang       5.949950e-01 -1.125342e-02 1.301205e-01  1.680651936\nShimen        -3.879383e-02 -3.860263e-04 6.475559e-03 -0.477288352\nShuangfeng     9.283541e-03 -2.286715e-03 3.151635e-02  0.065174101\nShuangpai      8.059081e-02 -3.136568e-04 8.983814e-03  0.853575843\nSuining        3.758488e-01 -3.593266e-03 4.186992e-02  1.854361477\nTaojiang      -2.539369e-01 -1.239489e-03 1.447705e-02 -2.100199974\nTaoyuan        1.472940e-02 -1.203908e-04 8.510322e-04  0.509034668\nTongdao        4.648244e-01 -6.987001e-03 1.987870e-01  1.058216149\nWangcheng      4.421959e+00 -1.106694e-01 1.359593e+00  3.887278186\nWugang         7.100317e-01 -7.814410e-03 1.071043e-01  2.193450460\nXiangtan       2.453007e-01 -3.645745e-04 3.231947e-03  4.321272793\nXiangxiang     2.627078e-01 -1.270254e-03 2.128955e-02  1.809191360\nXiangyin       5.452517e-01 -4.744181e-03 7.923627e-02  1.953877950\nXinhua         1.181023e-01 -6.264938e-03 8.600137e-02  0.424085257\nXinhuang       1.572539e-01 -4.182005e-03 3.664774e-01  0.266671512\nXinning        6.892785e-01 -9.667394e-03 2.032791e-01  1.550233652\nXinshao        5.757821e-02 -8.593187e-03 1.176858e-01  0.192889342\nXintian       -7.405021e-03 -5.149337e-03 1.087706e-01 -0.006839472\nXupu           3.240616e-01 -5.746775e-03 5.773544e-02  1.372588531\nYanling       -6.902089e-02 -5.921138e-04 9.930612e-03 -0.686674286\nYizhang       -2.684366e-01 -2.246318e-03 4.758794e-02 -1.220235660\nYongshun       6.306427e-01 -1.134974e-02 1.883028e-01  1.479454202\nYongxing       4.341080e-01 -9.073529e-03 1.508849e-01  1.140929407\nYou            7.875041e-02 -7.272845e-03 1.211609e-01  0.247135252\nYuanjiang      2.000423e-04 -1.775969e-04 2.979795e-03  0.006918053\nYuanling       8.729849e-03 -2.298071e-06 2.322115e-05  1.812087685\nYueyang        4.118877e-02 -1.976849e-04 2.311339e-03  0.860847775\nZhijiang       1.047626e-01 -7.812319e-04 1.309992e-02  0.922143185\nZhongfang     -2.268458e-01 -2.145491e-03 3.592709e-02 -1.185475978\nZhuzhou        3.286415e-01 -5.243157e-04 7.239075e-03  3.868772438\nZixing        -7.684863e-01 -8.821029e-02 9.405678e-01 -0.701439354\n              Pr.z....E.Ii..\nAnhua           9.422301e-01\nAnren           1.391057e-01\nAnxiang         9.471636e-01\nBaojing         2.230456e-01\nChaling         8.971056e-01\nChangning       9.387606e-01\nChangsha        7.822232e-04\nChengbu         1.119416e-01\nChenxi          4.946117e-01\nCili            7.323546e-01\nDao             3.031703e-01\nDongan          1.881947e-01\nDongkou         1.023002e-01\nFenghuang       6.086619e-01\nGuidong         3.415864e-01\nGuiyang         3.027630e-01\nGuzhang         4.357997e-01\nHanshou         7.928094e-01\nHengdong        8.986110e-01\nHengnan         6.434065e-01\nHengshan        7.978131e-01\nHengyang        6.636633e-01\nHongjiang       2.855921e-01\nHuarong         9.621124e-01\nHuayuan         5.887023e-01\nHuitong         4.255374e-01\nJiahe           5.917276e-01\nJianghua        3.075618e-01\nJiangyong       4.727569e-01\nJingzhou        2.396152e-01\nJinshi          9.843090e-01\nJishou          1.756424e-01\nLanshan         6.529132e-01\nLeiyang         8.148123e-01\nLengshuijiang   2.451020e-01\nLi              6.508382e-01\nLianyuan        2.952490e-01\nLiling          3.288368e-02\nLinli           6.959021e-01\nLinwu           8.596957e-01\nLinxiang        8.915545e-01\nLiuyang         5.155523e-03\nLonghui         3.764485e-02\nLongshan        1.709996e-01\nLuxi            3.194403e-01\nMayang          4.736044e-01\nMiluo           3.550005e-04\nNan             9.125016e-01\nNingxiang       6.764576e-02\nNingyuan        4.511108e-01\nPingjiang       3.048768e-05\nQidong          4.448892e-01\nQiyang          4.983276e-01\nRucheng         4.726740e-01\nSangzhi         3.272227e-01\nShaodong        1.467765e-01\nShaoshan        6.312978e-02\nShaoyang        9.283054e-02\nShimen          6.331568e-01\nShuangfeng      9.480354e-01\nShuangpai       3.933400e-01\nSuining         6.368746e-02\nTaojiang        3.571125e-02\nTaoyuan         6.107279e-01\nTongdao         2.899569e-01\nWangcheng       1.013746e-04\nWugang          2.827494e-02\nXiangtan        1.551317e-05\nXiangxiang      7.042128e-02\nXiangyin        5.071565e-02\nXinhua          6.715036e-01\nXinhuang        7.897221e-01\nXinning         1.210854e-01\nXinshao         8.470456e-01\nXintian         9.945429e-01\nXupu            1.698803e-01\nYanling         4.922880e-01\nYizhang         2.223756e-01\nYongshun        1.390190e-01\nYongxing        2.538993e-01\nYou             8.048036e-01\nYuanjiang       9.944802e-01\nYuanling        6.997265e-02\nYueyang         3.893219e-01\nZhijiang        3.564539e-01\nZhongfang       2.358293e-01\nZhuzhou         1.093847e-04\nZixing          4.830289e-01\n```\n:::\n:::\n\n\nThe code chunk below list the content of the local Moran matrix derived by using [*printCoefmat()*](https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/printCoefmat).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprintCoefmat(data.frame(\n  localMI[fips,], \n  row.names=hunan$County[fips]),\n  check.names=FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n```\n:::\n:::\n\n\n#### 10.6.1.1 Mapping the local Moran\\'s I\n\nBefore mapping the local Moran\\'s I map, it is wise to append the local Moran\\'s I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame. The code chunks below can be used to perform the task. The out SpatialPolygonDataFrame is called *hunan.localMI*.\n\nThe `Pr.z….E.Ii..` containing p-value of the local moran I is renamed to `PR.Ii`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan.localMI <- cbind(hunan,localMI) %>% \n    rename(Pr.Ii = Pr.z....E.Ii..)\n```\n:::\n\n\n#### 10.6.1.2 Mapping local Moran\\'s I values\n\nUsing choropleth mapping functions of **tmap** package, we can plot the local Moran\\'s I values by using the code chunks below. For paletter colours, refer to colorbrewers [link](https://r-graph-gallery.com/38-rcolorbrewers-palettes.html).\n\n\n::: {.cell fig.asp='0.68'}\n\n```{.r .cell-code}\ntm_shape(hunan.localMI) +\n  tm_fill(col='Ii',\n          style = 'pretty',\n          #palette = 'RdBu', # << refer to colourbrewer\n          title = 'Local Moran statistics') +\n  tm_borders(alpha= 0.5) + \n  tm_layout(main.title = \"Local Moran's I\",\n            legend.width= 0.25,\n            legend.height = 0.25)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex2_2_files/figure-html/unnamed-chunk-32-1.png){width=1344}\n:::\n:::\n\n\n#### 10.6.1.3 Mapping local Moran\\'s I p-values\n\nThe choropleth shows there is evidence for both positive and negative Ii values. However, it is useful to **consider the p-values** for each of these values, as consider above.\n\nThe code chunks below produce a choropleth map of Moran\\'s I p-values by using functions of **tmap** package.\n\n::: panel-tabset\n## Various p values\n\n\n::: {.cell fig.asp='0.68'}\n\n```{.r .cell-code}\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Local Moran's I p-values\",\n            legend.width= 0.25,\n            legend.height = 0.25)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex2_2_files/figure-html/unnamed-chunk-33-1.png){width=1344}\n:::\n:::\n\n\n## p values at 95% confidence level\n\n\n::: {.cell fig.asp='0.68'}\n\n```{.r .cell-code}\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks = c(-Inf, 0.05, Inf),\n          palette = c('lightblue', 'grey'), \n          title = \"Local Moran's I p-values\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Significant Local Moran's I \\np-values at 95% Confidence level\",\n            main.title.size = 1,\n            legend.width = 0.25,\n            legend.height = 0.25)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex2_2_files/figure-html/unnamed-chunk-34-1.png){width=1344}\n:::\n:::\n\n:::\n\n#### 10.6.1.4 Mapping both local Moran\\'s I values and p-values\n\nFor effective interpretation, it is better to plot both the local Moran\\'s I values map and its corresponding p-values map next to each other.\n\nThe code chunk below will be used to create such visualisation.\n\n\n::: {.cell fig.asp='0.68'}\n\n```{.r .cell-code}\nlocalMI.map<- tm_shape(hunan.localMI) +\n  tm_fill(col='Ii',\n          style = 'pretty',\n          #palette = 'RdBu', # << reger to colourbrewer\n          title = 'Local Moran statistics') +\n  tm_borders(alpha= 0.5) + \n  tm_layout(main.title = \"Local Moran's I\",\n            legend.width= 0.25,\n            legend.height = 0.25)\n\npvalue.map <-tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks = c(-Inf, 0.05, Inf),\n          palette = c('lightblue', 'grey'), \n          title = \"Local Moran's I p-values\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Significant Local Moran's I \\np-values at 95% Confidence level\",\n            main.title.size = 1,\n            legend.width = 0.25,\n            legend.height = 0.25)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1,ncol=2)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex2_2_files/figure-html/unnamed-chunk-35-1.png){width=1344}\n:::\n:::\n\n::: {.cell fig.asp='0.68'}\n\n:::\n\n\n### \n",
    "supporting": [
      "Hands-on_Ex2_2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}