{
  "hash": "d8a11ea60183e2bb9f28185ac1ae3c7b",
  "result": {
    "markdown": "---\ntitle: \"Hands-on Exercise 1.1: Geospatial Data Wrangling with R\"\nauthor: \"NeoYX\"\ndate: '14 Nov 2023'\ndate-modified: \"2023-11-15\"\neditor: visual\nexecute: \n  freeze: auto\n  warning: false\n  #echo: false\n  #message: false\nformat: \n  html:\n    code-fold: True\n    code-overflow: scroll\n    code-summary: \"Show the code\"\n    code-line-numbers: true\n---\n\n\n## 1.1 Overview\n\nIn this hands-on exercise, I will learn how to import and wrangle geospatial data using appropriate R packages:\n\n-   installing and loading [sf](https://r-spatial.github.io/sf/) and [tidyverse](https://www.tidyverse.org/) packages into R environment,\n\n-   importing geospatial data by using appropriate functions of **sf** package,\n\n-   importing aspatial data by using appropriate function of **readr** package,\n\n-   exploring the content of simple feature data frame by using appropriate **Base R** and **sf** functions,\n\n-   assigning or transforming coordinate systems by using appropriate *sf* functions,\n\n-   converting an aspatial data into a sf data frame by using appropriate function of **sf** package,\n\n-   performing geoprocessing tasks by using appropriate functions of **sf** package,\n\n-   performing data wrangling tasks by using appropriate functions of **dplyr** package and\n\n-   performing Exploratory Data Analysis (EDA) by using appropriate functions from **ggplot2** package.\n\n## 1.2 Data Acquisition\n\nIn this hands-on exercise, data is acquired from the following sources:\n\n-   Master Plan 2014 Subzone Boundary (Web) from [data.gov.sg](https://data.gov.sg/)\n\n-   Pre-Schools Location from [data.gov.sg](https://data.gov.sg/)\n\n-   Cycling Path from [LTADataMall](https://www.mytransport.sg/content/mytransport/home/dataMall.html)\n\n-   Latest version of Singapore Airbnb listing data from [Inside Airbnb](http://insideairbnb.com/get-the-data.html)\n\n## 1.3 Getting Started\n\nThe code chunk below install and load sf and tidyverse packages into R environment:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tidyverse)\n```\n:::\n\n\n-   **sf** for importing, managing, and processing geospatial data, and\n\n-   **tidyverse** for performing data science tasks such as importing, wrangling and visualising data.\n\nThe `sp` package provides classes and methods for spatial data types in 2005. The `sf` package was released in 2016 to give standardise support for vector data in R. It is also coherent with tidyverse, that consists of the following (not exhaustive):\n\n-   **readr** for importing csv data,\n\n-   **readxl** for importing Excel worksheet,\n\n-   **tidyr** for manipulating data,\n\n-   **dplyr** for transforming data, and\n\n-   **ggplot2** for visualising data\n\n## 1.4 Importing Geospatial data\n\nThe data that we will be importing takes the following forms:\n\n-   `MP14_SUBZONE_WEB_PL`, a [polygon]{.underline} feature layer in ESRI shapefile format,\n\n-   `CyclingPath`, a [line]{.underline} feature layer in ESRI shapefile format, and\n\n-   `PreSchool`, a [point]{.underline} feature layer in kml file format.\n\n### 1.4.1 Importing polygon feature data in shapefile format\n\nst_read() is a func from `sf` package, used to read files in shapefile format.\n\ndsn- data source name (aka data path)\n\nlayer - shapefile name. No extensions like .shp, .dbf, .prj and .shx are needed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(dsn=\"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\yixin-neo\\ISSS624_AGA\\Hands-on_Ex1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n:::\n:::\n\n\n-   geospatial objects are multipolygon features\n\n-    total of 323 multipolygon features and 15 fields in `mpsz` simple feature data frame.\n\n-   `mpsz` is in **svy21** projected coordinates systems\n\n-   x extend and y extend of the data are given\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(knitr)\nkable(head(mpsz, n = 3))\n```\n\n::: {.cell-output-display}\n| OBJECTID| SUBZONE_NO|SUBZONE_N    |SUBZONE_C |CA_IND |PLN_AREA_N      |PLN_AREA_C |REGION_N       |REGION_C |INC_CRC          |FMEL_UPD_D |   X_ADDR|   Y_ADDR| SHAPE_Leng| SHAPE_Area|geometry                       |\n|--------:|----------:|:------------|:---------|:------|:---------------|:----------|:--------------|:--------|:----------------|:----------|--------:|--------:|----------:|----------:|:------------------------------|\n|        1|          1|MARINA SOUTH |MSSZ01    |Y      |MARINA SOUTH    |MS         |CENTRAL REGION |CR       |5ED7EB253F99252E |2014-12-05 | 31595.84| 29220.19|   5267.381|  1630379.3|MULTIPOLYGON (((31495.56 30... |\n|        2|          1|PEARL'S HILL |OTSZ01    |Y      |OUTRAM          |OT         |CENTRAL REGION |CR       |8C7149B9EB32EEFC |2014-12-05 | 28679.06| 29782.05|   3506.107|   559816.2|MULTIPOLYGON (((29092.28 30... |\n|        3|          3|BOAT QUAY    |SRSZ03    |Y      |SINGAPORE RIVER |SR         |CENTRAL REGION |CR       |C35FEFF02B13E0E5 |2014-12-05 | 29654.96| 29974.66|   1740.926|   160807.5|MULTIPOLYGON (((29932.33 29... |\n:::\n:::\n\n\n### 1.4.2 Importing polyline feature data in shapefile form\n\nThe code chunk below uses *st_read()* function of **sf** package to import `CyclingPath` shapefile into R as line feature data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncyclingpath = st_read(dsn='data/geospatial', layer='CyclingPathGazette')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `CyclingPathGazette' from data source \n  `C:\\yixin-neo\\ISSS624_AGA\\Hands-on_Ex1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 2248 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkable(head(cyclingpath, n = 3))\n```\n\n::: {.cell-output-display}\n|PLANNING_A |PLANNING_1 |geometry                       |\n|:----------|:----------|:------------------------------|\n|NA         |NA         |MULTILINESTRING ((16001.13 ... |\n|NA         |NA         |MULTILINESTRING ((16012.86 ... |\n|NA         |NA         |MULTILINESTRING ((16021.49 ... |\n:::\n:::\n\n\n### 1.4.3 Importing GIS data in kml format\n\nThe `pre-schools-location-kml` is in kml format.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npreschool = st_read('data/geospatial/pre-schools-location-kml.kml')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\yixin-neo\\ISSS624_AGA\\Hands-on_Ex1\\data\\geospatial\\pre-schools-location-kml.kml' \n  using driver `KML'\nSimple feature collection with 1925 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n:::\n:::\n\n\nNote that preschool is in WSG84 coordinates system (3D).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkable(head(preschool, n = 3))\n```\n\n::: {.cell-output-display}\n|Name  |Description|geometry                      |\n|:-----||:-----------------------------|\n|kml_1 |<center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>BRILLIANT TOTS PTE. LTD.</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT9334</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>610, JURONG WEST STREET 65, #01 - 534, S 640610</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>640610</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>0523C7904478A63D</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200812235534</td> </tr></table></center>       |POINT Z (103.7009 1.338325 0) |\n|kml_2 |<center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>BUBBLESLAND PLAYHOUSE PTE LTD</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT7680</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>238, COMPASSVALE WALK, #01 - 542, S 540238</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>540238</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>18BED05A501AA168</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200812235534</td> </tr></table></center>       |POINT Z (103.8987 1.39044 0)  |\n|kml_3 |<center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>BUCKET HOUSE PRESCHOOL</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT9527</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>39, WOODLANDS CLOSE, #01 - 62, MEGA@WOODLANDS, S 737856</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>737856</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>C88B9AC31EE71BF6</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200812235534</td> </tr></table></center> |POINT Z (103.8068 1.438017 0) |\n:::\n:::\n\n\n### 1.5.1 Working with *st_geometry()*\n\nThe column in the sf data.frame that contains the geometries is a list, of class `sfc`. We can retrieve the geometry list-column in this case by mpsz\\$geom or mpsz\\[\\[1\\]\\], but the more general way uses *st_geometry()* as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"sf\"         \"data.frame\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_geometry(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n```\n:::\n:::\n\n\n### 1.5.2 Working with glimpse()\n\nBeside the basic feature information, we also would like to learn more about the associated **attribute** information in the data frame. This is the time you will find *glimpse()* of **dplyr**. very handy as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(head(mpsz))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 6\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\"\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\"\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\"\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\"\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05,…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913\n$ SHAPE_Area <dbl> 1630379.3, 559816.2, 160807.5, 595428.9, 387429.4, 1030378.8\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (((29092.28 30…\n```\n:::\n:::\n\n\n*glimpse()* report reveals the data type of each fields. For example `FMEL-UPD_D` field is in **date** data type and `X_ADDR`, `Y_ADDR`, `SHAPE_L` and `SHAPE_AREA` fields are all in **double-precision values**.\n\n### 1.5.3 Working with *head()*\n\nSometimes we would like to reveal complete information of a feature object, this is the job of [*head()*](https://www.rdocumentation.org/packages/utils/versions/3.6.2/topics/head) of Base R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(mpsz,3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 3 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 28160.23 ymin: 28369.47 xmax: 32362.39 ymax: 30247.18\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO    SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N PLN_AREA_C\n1        1          1 MARINA SOUTH    MSSZ01      Y    MARINA SOUTH         MS\n2        2          1 PEARL'S HILL    OTSZ01      Y          OUTRAM         OT\n3        3          3    BOAT QUAY    SRSZ03      Y SINGAPORE RIVER         SR\n        REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR\n1 CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84 29220.19\n2 CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06 29782.05\n3 CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96 29974.66\n  SHAPE_Leng SHAPE_Area                       geometry\n1   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n## Theories\n\n### KML and shapefiles\n\nA KMZ file is a zipped (or compressed) KML file, and a SHZ is a zipped/compressed Shapefile.\n\nA shapefile is an Esri vector data storage format for storing the location, shape, and attributes of geographic features. It is stored as a set of related files and contains one feature class.\n\nThe shapefile format can spatially describe vector features: **points, lines, and polygons**, representing, for example, water wells, rivers, and lakes. Each item usually has attributes that describe it, such as name or temperature.\n\nKML and Shapefiles could contain the exact same data, however KML (Keyhole Markup Language) is much more suited to displaying time based track information, whereas shapefiles are more suited to displaying Geometries, like boundaries, areas, roads, etc.\n\n**Shapefiles are composed of 3 mandatory files**\n\n·       . shp (geometry), \\<- multipolygon, polylines or points. Can only be one type in each file , can combined in layers\n\n·       . dbf (attributes) \\<- table\n\n·       . shx (index)  \\<- binds first two together\n\n### GCS \\[Geographic Coordinate System\\] (3D) and PCS \\[Projected Coordinate System \\] (2D)\n\n**GCS**: uses lat, long, elevation to locate positions on Earth. Units are in degree and metres. Earth is represented as a [sphere]{.underline}. Eg. WGS84 (world Gedetic system 1984)\n\n**PCS**: Units are usually metres to locate position on a [Flat]{.underline} surface. Involves projecting 3D Earth into a 2D plane. It distorts the true [shapes]{.underline}, [areas]{.underline}, [distances]{.underline}, or [directions]{.underline} to some extent, depending on the projection method chosen.\n\nPreserve:\n\n·       Conformal projections minimize distortion in **shape**\n\n·       Equidistant projections minimize distortion in **distance**\n\n·       Equal-area projection minimize distortion in **area**\n\n·       Azimuthal or True-direction projections minimize distortion in **direction**.\n\nGoogle maps uses Mercator projection system. It is chosen as it preserves direction and angles. It is useful for navigation (google map) . It is originally created for sea navigation in older days. The cons are that this projection does not preserve area and shape.\n\nSingapore uses **SVY21** or the **EPSG:3414** projected coordinate system.\n\n### Geospatial data handling functions\n\n-   st_read & read sf: read simple features from file or database, or retrieve layer names and their geometry type(s)\n\n-   st write &write_sf: write simple features object to file or database\n\n-   st_as_sf: convert a sf object from a non-geospatial tabular data frame\n\n-   st as_text: convert to Well Known Text(WKT)\n\n-   st as_binary: convert to Well Known Binary(WKB)\n\n-   st_as_sfc: convert geometries to sfc (e.g., from WKT, WKB) as(x, \"Spatial\"): convert to Spatial\\*\n\n-   st transform(x, crs, ...): convert coordinates of x to a different coordinate reference system\n\nThe code chunk below allows us to unsf the mpsz and work tbl_df or data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_tbl_df <- as_tibble(mpsz)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}