{
  "hash": "f1cf2d55daf5d1b1440fb98f6f300dd1",
  "result": {
    "markdown": "---\ntitle: \"Hands-on Exercise 1.1: Geospatial Data Wrangling with R\"\nauthor: \"NeoYX\"\ndate: '14 Nov 2023'\ndate-modified: \"2023-11-15\"\neditor: visual\nexecute: \n  freeze: auto\n  warning: false\n  #echo: false\n  #message: false\nformat: \n  html:\n    code-fold: True\n    code-overflow: scroll\n    code-summary: \"Show the code\"\n    code-line-numbers: true\n---\n\n\n## 1.1 Overview\n\nIn this hands-on exercise, I will learn how to import and wrangle geospatial data using appropriate R packages:\n\n-   installing and loading [sf](https://r-spatial.github.io/sf/) and [tidyverse](https://www.tidyverse.org/) packages into R environment,\n\n-   importing geospatial data by using appropriate functions of **sf** package,\n\n-   importing aspatial data by using appropriate function of **readr** package,\n\n-   exploring the content of simple feature data frame by using appropriate **Base R** and **sf** functions,\n\n-   assigning or transforming coordinate systems by using appropriate *sf* functions,\n\n-   converting an aspatial data into a sf data frame by using appropriate function of **sf** package,\n\n-   performing geoprocessing tasks by using appropriate functions of **sf** package,\n\n-   performing data wrangling tasks by using appropriate functions of **dplyr** package and\n\n-   performing Exploratory Data Analysis (EDA) by using appropriate functions from **ggplot2** package.\n\n## 1.2 Data Acquisition\n\nIn this hands-on exercise, data is acquired from the following sources:\n\n-   Master Plan 2014 Subzone Boundary (Web) from [data.gov.sg](https://data.gov.sg/)\n\n-   Pre-Schools Location from [data.gov.sg](https://data.gov.sg/)\n\n-   Cycling Path from [LTADataMall](https://www.mytransport.sg/content/mytransport/home/dataMall.html)\n\n-   Latest version of Singapore Airbnb listing data from [Inside Airbnb](http://insideairbnb.com/get-the-data.html)\n\n## 1.3 Getting Started\n\nThe code chunk below install and load sf and tidyverse packages into R environment:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tidyverse)\n```\n:::\n\n\n-   **sf** for importing, managing, and processing geospatial data, and\n\n-   **tidyverse** for performing data science tasks such as importing, wrangling and visualising data.\n\nThe `sp` package provides classes and methods for spatial data types in 2005. The `sf` package was released in 2016 to give standardise support for vector data in R. It is also coherent with tidyverse, that consists of the following (not exhaustive):\n\n-   **readr** for importing csv data,\n\n-   **readxl** for importing Excel worksheet,\n\n-   **tidyr** for manipulating data,\n\n-   **dplyr** for transforming data, and\n\n-   **ggplot2** for visualising data\n\n## 1.4 Importing Geospatial data\n\nThe data that we will be importing takes the following forms:\n\n-   `MP14_SUBZONE_WEB_PL`, a [polygon]{.underline} feature layer in ESRI shapefile format,\n\n-   `CyclingPath`, a [line]{.underline} feature layer in ESRI shapefile format, and\n\n-   `PreSchool`, a [point]{.underline} feature layer in kml file format.\n\n### 1.4.1 Importing polygon feature data in shapefile format\n\nst_read() is a func from `sf` package, used to read files in shapefile format.\n\ndsn- data source name (aka data path)\n\nlayer - shapefile name. No extensions like .shp, .dbf, .prj and .shx are needed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(dsn=\"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\yixin-neo\\ISSS624_AGA\\Hands-on_Ex1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n:::\n:::\n\n\n-   geospatial objects are multipolygon features\n\n-   total of 323 multipolygon features and 15 fields in `mpsz` simple feature data frame.\n\n-   `mpsz` is in **svy21** projected coordinates systems\n\n-   x extend and y extend of the data are given\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(knitr)\nkable(head(mpsz, n = 3))\n```\n\n::: {.cell-output-display}\n| OBJECTID| SUBZONE_NO|SUBZONE_N    |SUBZONE_C |CA_IND |PLN_AREA_N      |PLN_AREA_C |REGION_N       |REGION_C |INC_CRC          |FMEL_UPD_D |   X_ADDR|   Y_ADDR| SHAPE_Leng| SHAPE_Area|geometry                       |\n|--------:|----------:|:------------|:---------|:------|:---------------|:----------|:--------------|:--------|:----------------|:----------|--------:|--------:|----------:|----------:|:------------------------------|\n|        1|          1|MARINA SOUTH |MSSZ01    |Y      |MARINA SOUTH    |MS         |CENTRAL REGION |CR       |5ED7EB253F99252E |2014-12-05 | 31595.84| 29220.19|   5267.381|  1630379.3|MULTIPOLYGON (((31495.56 30... |\n|        2|          1|PEARL'S HILL |OTSZ01    |Y      |OUTRAM          |OT         |CENTRAL REGION |CR       |8C7149B9EB32EEFC |2014-12-05 | 28679.06| 29782.05|   3506.107|   559816.2|MULTIPOLYGON (((29092.28 30... |\n|        3|          3|BOAT QUAY    |SRSZ03    |Y      |SINGAPORE RIVER |SR         |CENTRAL REGION |CR       |C35FEFF02B13E0E5 |2014-12-05 | 29654.96| 29974.66|   1740.926|   160807.5|MULTIPOLYGON (((29932.33 29... |\n:::\n:::\n\n\n### 1.4.2 Importing polyline feature data in shapefile form\n\nThe code chunk below uses *st_read()* function of **sf** package to import `CyclingPath` shapefile into R as line feature data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncyclingpath = st_read(dsn='data/geospatial', layer='CyclingPathGazette')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `CyclingPathGazette' from data source \n  `C:\\yixin-neo\\ISSS624_AGA\\Hands-on_Ex1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 2248 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkable(head(cyclingpath, n = 3))\n```\n\n::: {.cell-output-display}\n|PLANNING_A |PLANNING_1 |geometry                       |\n|:----------|:----------|:------------------------------|\n|NA         |NA         |MULTILINESTRING ((16001.13 ... |\n|NA         |NA         |MULTILINESTRING ((16012.86 ... |\n|NA         |NA         |MULTILINESTRING ((16021.49 ... |\n:::\n:::\n\n\n### 1.4.3 Importing GIS data in kml format\n\nThe `pre-schools-location-kml` is in kml format.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npreschool = st_read('data/geospatial/pre-schools-location-kml.kml')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\yixin-neo\\ISSS624_AGA\\Hands-on_Ex1\\data\\geospatial\\pre-schools-location-kml.kml' \n  using driver `KML'\nSimple feature collection with 1925 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n:::\n:::\n\n\nNote that preschool is in WSG84 coordinates system (3D).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkable(head(preschool, n = 3))\n```\n\n::: {.cell-output-display}\n|Name  |Description|geometry                      |\n|:-----||:-----------------------------|\n|kml_1 |<center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>BRILLIANT TOTS PTE. LTD.</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT9334</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>610, JURONG WEST STREET 65, #01 - 534, S 640610</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>640610</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>0523C7904478A63D</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200812235534</td> </tr></table></center>       |POINT Z (103.7009 1.338325 0) |\n|kml_2 |<center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>BUBBLESLAND PLAYHOUSE PTE LTD</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT7680</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>238, COMPASSVALE WALK, #01 - 542, S 540238</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>540238</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>18BED05A501AA168</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200812235534</td> </tr></table></center>       |POINT Z (103.8987 1.39044 0)  |\n|kml_3 |<center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>BUCKET HOUSE PRESCHOOL</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT9527</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>39, WOODLANDS CLOSE, #01 - 62, MEGA@WOODLANDS, S 737856</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>737856</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>C88B9AC31EE71BF6</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200812235534</td> </tr></table></center> |POINT Z (103.8068 1.438017 0) |\n:::\n:::\n\n\n### 1.5.1 Working with *st_geometry()*\n\nThe column in the sf data.frame that contains the geometries is a list, of class `sfc`. We can retrieve the geometry list-column in this case by mpsz\\$geom or mpsz\\[\\[1\\]\\], but the more general way uses *st_geometry()* as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"sf\"         \"data.frame\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_geometry(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n```\n:::\n:::\n\n\n### 1.5.2 Working with glimpse()\n\nBeside the basic feature information, we also would like to learn more about the associated **attribute** information in the data frame. This is the time you will find *glimpse()* of **dplyr**. very handy as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(head(mpsz))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 6\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\"\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\"\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\"\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\"\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05,…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913\n$ SHAPE_Area <dbl> 1630379.3, 559816.2, 160807.5, 595428.9, 387429.4, 1030378.8\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (((29092.28 30…\n```\n:::\n:::\n\n\n*glimpse()* report reveals the data type of each fields. For example `FMEL-UPD_D` field is in **date** data type and `X_ADDR`, `Y_ADDR`, `SHAPE_L` and `SHAPE_AREA` fields are all in **double-precision values**.\n\n### 1.5.3 Working with *head()*\n\nSometimes we would like to reveal complete information of a feature object, this is the job of [*head()*](https://www.rdocumentation.org/packages/utils/versions/3.6.2/topics/head) of Base R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(mpsz,3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 3 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 28160.23 ymin: 28369.47 xmax: 32362.39 ymax: 30247.18\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO    SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N PLN_AREA_C\n1        1          1 MARINA SOUTH    MSSZ01      Y    MARINA SOUTH         MS\n2        2          1 PEARL'S HILL    OTSZ01      Y          OUTRAM         OT\n3        3          3    BOAT QUAY    SRSZ03      Y SINGAPORE RIVER         SR\n        REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR\n1 CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84 29220.19\n2 CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06 29782.05\n3 CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96 29974.66\n  SHAPE_Leng SHAPE_Area                       geometry\n1   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n```\n:::\n:::\n\n\n## 1.6 Plotting the Geospatial Data\n\nIn geospatial data science, by looking at the feature information is not enough. We are also interested to **visualise** the geospatial features. One of the ways is to use the *plot()* of R Graphic.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mpsz)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_1_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nThe default plot of an sf object is a multi-plot of all attributes, up to a reasonable maximum as shown above. We can, however, choose to plot only the geometry (multi-polygon) by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(mpsz))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_1_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nAlternatively, we can also choose the plot the `sf` object by using a specific attribute as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mpsz[\"REGION_N\"])\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_1_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n::: {.callout-note appearance=\"minimal\"}\nNote: *plot()* is mean for plotting the geospatial object for quick look. For high cartographic quality plot, other R package such as tmap should be used.\n:::\n\n## 1.7 Working with Projection\n\nMap projection is an important property of a geospatial data. In order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system.\n\nIn this section, you will learn how to project a simple feature data frame from one coordinate system to another coordinate system. The technical term of this process is called **projection transformation**.\n\n### 1.7.1 Assigning EPSG code to a simple feature data frame\n\nCommon issues:\n\n1.  coordinate system of the source data was missing (such as due to missing .proj for ESRI shapefile)\n\n2.  wrongly assigned during the importing process\n\nUsing the st_crs() to check in detail of the `mpsz`reveals that although it claims to be in svy21 (singapore proj sys), reading until end of print shows that it is wrongly in EPSG9001 (singapore uses epsg3414)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n```\n:::\n:::\n\n\nIn order to assign the correct EPSG code to `mpsz` data frame, *st_set_crs()* of **sf** package is used as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz3414 <- st_transform(mpsz, 3414)\n```\n:::\n\n\nRecheck\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(mpsz3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n```\n:::\n:::\n\n\nNotice that the EPSG code is 3414 now.\n\n### 1.7.2 Transforming the projection of preschool from wgs84 to svy21 (EPSG3414).\n\nIn geospatial analytics, it is very common for us to transform the original data from **geographic** coordinate system (3D) to **projected** coordinate system (2D). This is because geographic coordinate system is not appropriate if the analysis need to use **distance** or/and **area** measurements.\n\nLet us take preschool simple feature data frame as an example. The print below reveals that it is in wgs84 coordinate system (3D).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_geometry(preschool)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGeometry set for 1925 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(preschool)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n:::\n:::\n\n\nNote that *`st_set_crs()`* is not appropriate and *`st_transform()`* of sf package should be used. This is because we need to reproject `preschool` from one coordinate system to another coordinate system **mathemetically**.\n\nLet us perform the projection transformation by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npreschool3414 <- st_transform(preschool, crs=3414)\n```\n:::\n\n\nRecheck\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nGeometry set for 1925 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11203.01 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n```\n:::\n:::\n\n\nNotice that it is in svy21 projected coordinate system now. Furthermore, if we refer to *Bounding box:*, the values are greater than 0-360 range of decimal degree commonly used by most of the geographic coordinate systems.\n\n## 1.8 Importing and Converting An Aspatial Data\n\nIn practice, it is not unusual that we will come across data such as `listing` of Inside Airbnb. We call this kind of data aspatial data. This is because it is not a geospatial data but among the data fields, there are two fields that capture the x- (**long**) and y-coordinates (**lat**) of the data points.\n\nIn this section, we will learn how to\n\n1.  import an aspatial data into R environment and save it as a tibble data frame\n\n2.  convert it into a simple feature data frame.\n\nThe `listings.csv` data downloaded from AirBnb will be used.\n\n### 1.8.1 Importing the aspatial data\n\nSince `listings` data set is in csv file format, we will use [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) of **readr** package to import `listing.csv` as shown the code chunk below. The output R object is called `listings` and it is a [tibble data frame](https://r4ds.had.co.nz/tibbles.html).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlistings <- read_csv('data/aspatial/listings.csv')\nclass(listings)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\" \n```\n:::\n:::\n\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\n\nThe code chunk below shows *list()* of Base R instead of *glimpse()* is used to do the job.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist(listings)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n# A tibble: 4,161 × 18\n       id name      host_id host_name neighbourhood_group neighbourhood latitude\n    <dbl> <chr>       <dbl> <chr>     <chr>               <chr>            <dbl>\n 1  50646 Pleasant…  227796 Sujatha   Central Region      Bukit Timah       1.33\n 2  71609 Ensuite …  367042 Belinda   East Region         Tampines          1.35\n 3  71896 B&B  Roo…  367042 Belinda   East Region         Tampines          1.35\n 4  71903 Room 2-n…  367042 Belinda   East Region         Tampines          1.35\n 5 275344 15 mins … 1439258 Kay       Central Region      Bukit Merah       1.29\n 6 289234 Booking …  367042 Belinda   East Region         Tampines          1.34\n 7 294281 5 mins w… 1521514 Elizabeth Central Region      Newton            1.31\n 8 324945 Cozy Blu… 1439258 Kay       Central Region      Bukit Merah       1.29\n 9 330089 Cozy Blu… 1439258 Kay       Central Region      Bukit Merah       1.29\n10 330095 10 mins … 1439258 Kay       Central Region      Bukit Merah       1.29\n# ℹ 4,151 more rows\n# ℹ 11 more variables: longitude <dbl>, room_type <chr>, price <dbl>,\n#   minimum_nights <dbl>, number_of_reviews <dbl>, last_review <date>,\n#   reviews_per_month <dbl>, calculated_host_listings_count <dbl>,\n#   availability_365 <dbl>, number_of_reviews_ltm <dbl>, license <chr>\n```\n:::\n:::\n\n\nOther ways of displaying tabular data in R:\n\n::: panel-tabset\n## kable\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkable(head(listings))\n```\n\n::: {.cell-output-display}\n|     id|name                                | host_id|host_name |neighbourhood_group |neighbourhood | latitude| longitude|room_type    | price| minimum_nights| number_of_reviews|last_review | reviews_per_month| calculated_host_listings_count| availability_365| number_of_reviews_ltm|license |\n|------:|:-----------------------------------|-------:|:---------|:-------------------|:-------------|--------:|---------:|:------------|-----:|--------------:|-----------------:|:-----------|-----------------:|------------------------------:|----------------:|---------------------:|:-------|\n|  50646|Pleasant Room along Bukit Timah     |  227796|Sujatha   |Central Region      |Bukit Timah   |  1.33432|  103.7852|Private room |    80|             92|                18|2014-12-26  |              0.18|                              1|              365|                     0|NA      |\n|  71609|Ensuite Room (Room 1 & 2) near EXPO |  367042|Belinda   |East Region         |Tampines      |  1.34537|  103.9589|Private room |   145|             92|                20|2020-01-17  |              0.15|                              6|              340|                     0|NA      |\n|  71896|B&B  Room 1 near Airport & EXPO     |  367042|Belinda   |East Region         |Tampines      |  1.34754|  103.9596|Private room |    85|             92|                24|2019-10-13  |              0.18|                              6|              265|                     0|NA      |\n|  71903|Room 2-near Airport & EXPO          |  367042|Belinda   |East Region         |Tampines      |  1.34531|  103.9610|Private room |    85|             92|                47|2020-01-09  |              0.34|                              6|              365|                     0|NA      |\n| 275344|15 mins to Outram MRT Single Room   | 1439258|Kay       |Central Region      |Bukit Merah   |  1.28836|  103.8114|Private room |    49|             60|                14|2022-07-09  |              0.11|                             44|              296|                     1|S0399   |\n| 289234|Booking for 3 bedrooms              |  367042|Belinda   |East Region         |Tampines      |  1.34490|  103.9598|Private room |   184|             92|                12|2019-01-01  |              0.10|                              6|              285|                     0|NA      |\n:::\n:::\n\n\n## gt\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gt)\nhead(listings) %>% gt() %>% tab_header(title = \"AirBnB listings\")\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"usjpkslccn\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#usjpkslccn table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#usjpkslccn thead, #usjpkslccn tbody, #usjpkslccn tfoot, #usjpkslccn tr, #usjpkslccn td, #usjpkslccn th {\n  border-style: none;\n}\n\n#usjpkslccn p {\n  margin: 0;\n  padding: 0;\n}\n\n#usjpkslccn .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#usjpkslccn .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#usjpkslccn .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#usjpkslccn .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#usjpkslccn .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#usjpkslccn .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#usjpkslccn .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#usjpkslccn .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#usjpkslccn .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#usjpkslccn .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#usjpkslccn .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#usjpkslccn .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#usjpkslccn .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#usjpkslccn .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#usjpkslccn .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#usjpkslccn .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#usjpkslccn .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#usjpkslccn .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#usjpkslccn .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#usjpkslccn .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#usjpkslccn .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#usjpkslccn .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#usjpkslccn .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#usjpkslccn .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#usjpkslccn .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#usjpkslccn .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#usjpkslccn .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#usjpkslccn .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#usjpkslccn .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#usjpkslccn .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#usjpkslccn .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#usjpkslccn .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#usjpkslccn .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#usjpkslccn .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#usjpkslccn .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#usjpkslccn .gt_left {\n  text-align: left;\n}\n\n#usjpkslccn .gt_center {\n  text-align: center;\n}\n\n#usjpkslccn .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#usjpkslccn .gt_font_normal {\n  font-weight: normal;\n}\n\n#usjpkslccn .gt_font_bold {\n  font-weight: bold;\n}\n\n#usjpkslccn .gt_font_italic {\n  font-style: italic;\n}\n\n#usjpkslccn .gt_super {\n  font-size: 65%;\n}\n\n#usjpkslccn .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#usjpkslccn .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#usjpkslccn .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#usjpkslccn .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#usjpkslccn .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#usjpkslccn .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#usjpkslccn .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_heading\">\n      <td colspan=\"18\" class=\"gt_heading gt_title gt_font_normal gt_bottom_border\" style>AirBnB listings</td>\n    </tr>\n    \n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"id\">id</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"name\">name</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"host_id\">host_id</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"host_name\">host_name</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"neighbourhood_group\">neighbourhood_group</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"neighbourhood\">neighbourhood</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"latitude\">latitude</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"longitude\">longitude</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"room_type\">room_type</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"price\">price</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"minimum_nights\">minimum_nights</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"number_of_reviews\">number_of_reviews</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"last_review\">last_review</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"reviews_per_month\">reviews_per_month</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"calculated_host_listings_count\">calculated_host_listings_count</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"availability_365\">availability_365</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"number_of_reviews_ltm\">number_of_reviews_ltm</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"license\">license</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"id\" class=\"gt_row gt_right\">50646</td>\n<td headers=\"name\" class=\"gt_row gt_left\">Pleasant Room along Bukit Timah</td>\n<td headers=\"host_id\" class=\"gt_row gt_right\">227796</td>\n<td headers=\"host_name\" class=\"gt_row gt_left\">Sujatha</td>\n<td headers=\"neighbourhood_group\" class=\"gt_row gt_left\">Central Region</td>\n<td headers=\"neighbourhood\" class=\"gt_row gt_left\">Bukit Timah</td>\n<td headers=\"latitude\" class=\"gt_row gt_right\">1.33432</td>\n<td headers=\"longitude\" class=\"gt_row gt_right\">103.7852</td>\n<td headers=\"room_type\" class=\"gt_row gt_left\">Private room</td>\n<td headers=\"price\" class=\"gt_row gt_right\">80</td>\n<td headers=\"minimum_nights\" class=\"gt_row gt_right\">92</td>\n<td headers=\"number_of_reviews\" class=\"gt_row gt_right\">18</td>\n<td headers=\"last_review\" class=\"gt_row gt_right\">2014-12-26</td>\n<td headers=\"reviews_per_month\" class=\"gt_row gt_right\">0.18</td>\n<td headers=\"calculated_host_listings_count\" class=\"gt_row gt_right\">1</td>\n<td headers=\"availability_365\" class=\"gt_row gt_right\">365</td>\n<td headers=\"number_of_reviews_ltm\" class=\"gt_row gt_right\">0</td>\n<td headers=\"license\" class=\"gt_row gt_left\">NA</td></tr>\n    <tr><td headers=\"id\" class=\"gt_row gt_right\">71609</td>\n<td headers=\"name\" class=\"gt_row gt_left\">Ensuite Room (Room 1 &amp; 2) near EXPO</td>\n<td headers=\"host_id\" class=\"gt_row gt_right\">367042</td>\n<td headers=\"host_name\" class=\"gt_row gt_left\">Belinda</td>\n<td headers=\"neighbourhood_group\" class=\"gt_row gt_left\">East Region</td>\n<td headers=\"neighbourhood\" class=\"gt_row gt_left\">Tampines</td>\n<td headers=\"latitude\" class=\"gt_row gt_right\">1.34537</td>\n<td headers=\"longitude\" class=\"gt_row gt_right\">103.9589</td>\n<td headers=\"room_type\" class=\"gt_row gt_left\">Private room</td>\n<td headers=\"price\" class=\"gt_row gt_right\">145</td>\n<td headers=\"minimum_nights\" class=\"gt_row gt_right\">92</td>\n<td headers=\"number_of_reviews\" class=\"gt_row gt_right\">20</td>\n<td headers=\"last_review\" class=\"gt_row gt_right\">2020-01-17</td>\n<td headers=\"reviews_per_month\" class=\"gt_row gt_right\">0.15</td>\n<td headers=\"calculated_host_listings_count\" class=\"gt_row gt_right\">6</td>\n<td headers=\"availability_365\" class=\"gt_row gt_right\">340</td>\n<td headers=\"number_of_reviews_ltm\" class=\"gt_row gt_right\">0</td>\n<td headers=\"license\" class=\"gt_row gt_left\">NA</td></tr>\n    <tr><td headers=\"id\" class=\"gt_row gt_right\">71896</td>\n<td headers=\"name\" class=\"gt_row gt_left\">B&amp;B  Room 1 near Airport &amp; EXPO</td>\n<td headers=\"host_id\" class=\"gt_row gt_right\">367042</td>\n<td headers=\"host_name\" class=\"gt_row gt_left\">Belinda</td>\n<td headers=\"neighbourhood_group\" class=\"gt_row gt_left\">East Region</td>\n<td headers=\"neighbourhood\" class=\"gt_row gt_left\">Tampines</td>\n<td headers=\"latitude\" class=\"gt_row gt_right\">1.34754</td>\n<td headers=\"longitude\" class=\"gt_row gt_right\">103.9596</td>\n<td headers=\"room_type\" class=\"gt_row gt_left\">Private room</td>\n<td headers=\"price\" class=\"gt_row gt_right\">85</td>\n<td headers=\"minimum_nights\" class=\"gt_row gt_right\">92</td>\n<td headers=\"number_of_reviews\" class=\"gt_row gt_right\">24</td>\n<td headers=\"last_review\" class=\"gt_row gt_right\">2019-10-13</td>\n<td headers=\"reviews_per_month\" class=\"gt_row gt_right\">0.18</td>\n<td headers=\"calculated_host_listings_count\" class=\"gt_row gt_right\">6</td>\n<td headers=\"availability_365\" class=\"gt_row gt_right\">265</td>\n<td headers=\"number_of_reviews_ltm\" class=\"gt_row gt_right\">0</td>\n<td headers=\"license\" class=\"gt_row gt_left\">NA</td></tr>\n    <tr><td headers=\"id\" class=\"gt_row gt_right\">71903</td>\n<td headers=\"name\" class=\"gt_row gt_left\">Room 2-near Airport &amp; EXPO</td>\n<td headers=\"host_id\" class=\"gt_row gt_right\">367042</td>\n<td headers=\"host_name\" class=\"gt_row gt_left\">Belinda</td>\n<td headers=\"neighbourhood_group\" class=\"gt_row gt_left\">East Region</td>\n<td headers=\"neighbourhood\" class=\"gt_row gt_left\">Tampines</td>\n<td headers=\"latitude\" class=\"gt_row gt_right\">1.34531</td>\n<td headers=\"longitude\" class=\"gt_row gt_right\">103.9610</td>\n<td headers=\"room_type\" class=\"gt_row gt_left\">Private room</td>\n<td headers=\"price\" class=\"gt_row gt_right\">85</td>\n<td headers=\"minimum_nights\" class=\"gt_row gt_right\">92</td>\n<td headers=\"number_of_reviews\" class=\"gt_row gt_right\">47</td>\n<td headers=\"last_review\" class=\"gt_row gt_right\">2020-01-09</td>\n<td headers=\"reviews_per_month\" class=\"gt_row gt_right\">0.34</td>\n<td headers=\"calculated_host_listings_count\" class=\"gt_row gt_right\">6</td>\n<td headers=\"availability_365\" class=\"gt_row gt_right\">365</td>\n<td headers=\"number_of_reviews_ltm\" class=\"gt_row gt_right\">0</td>\n<td headers=\"license\" class=\"gt_row gt_left\">NA</td></tr>\n    <tr><td headers=\"id\" class=\"gt_row gt_right\">275344</td>\n<td headers=\"name\" class=\"gt_row gt_left\">15 mins to Outram MRT Single Room</td>\n<td headers=\"host_id\" class=\"gt_row gt_right\">1439258</td>\n<td headers=\"host_name\" class=\"gt_row gt_left\">Kay</td>\n<td headers=\"neighbourhood_group\" class=\"gt_row gt_left\">Central Region</td>\n<td headers=\"neighbourhood\" class=\"gt_row gt_left\">Bukit Merah</td>\n<td headers=\"latitude\" class=\"gt_row gt_right\">1.28836</td>\n<td headers=\"longitude\" class=\"gt_row gt_right\">103.8114</td>\n<td headers=\"room_type\" class=\"gt_row gt_left\">Private room</td>\n<td headers=\"price\" class=\"gt_row gt_right\">49</td>\n<td headers=\"minimum_nights\" class=\"gt_row gt_right\">60</td>\n<td headers=\"number_of_reviews\" class=\"gt_row gt_right\">14</td>\n<td headers=\"last_review\" class=\"gt_row gt_right\">2022-07-09</td>\n<td headers=\"reviews_per_month\" class=\"gt_row gt_right\">0.11</td>\n<td headers=\"calculated_host_listings_count\" class=\"gt_row gt_right\">44</td>\n<td headers=\"availability_365\" class=\"gt_row gt_right\">296</td>\n<td headers=\"number_of_reviews_ltm\" class=\"gt_row gt_right\">1</td>\n<td headers=\"license\" class=\"gt_row gt_left\">S0399</td></tr>\n    <tr><td headers=\"id\" class=\"gt_row gt_right\">289234</td>\n<td headers=\"name\" class=\"gt_row gt_left\">Booking for 3 bedrooms</td>\n<td headers=\"host_id\" class=\"gt_row gt_right\">367042</td>\n<td headers=\"host_name\" class=\"gt_row gt_left\">Belinda</td>\n<td headers=\"neighbourhood_group\" class=\"gt_row gt_left\">East Region</td>\n<td headers=\"neighbourhood\" class=\"gt_row gt_left\">Tampines</td>\n<td headers=\"latitude\" class=\"gt_row gt_right\">1.34490</td>\n<td headers=\"longitude\" class=\"gt_row gt_right\">103.9598</td>\n<td headers=\"room_type\" class=\"gt_row gt_left\">Private room</td>\n<td headers=\"price\" class=\"gt_row gt_right\">184</td>\n<td headers=\"minimum_nights\" class=\"gt_row gt_right\">92</td>\n<td headers=\"number_of_reviews\" class=\"gt_row gt_right\">12</td>\n<td headers=\"last_review\" class=\"gt_row gt_right\">2019-01-01</td>\n<td headers=\"reviews_per_month\" class=\"gt_row gt_right\">0.10</td>\n<td headers=\"calculated_host_listings_count\" class=\"gt_row gt_right\">6</td>\n<td headers=\"availability_365\" class=\"gt_row gt_right\">285</td>\n<td headers=\"number_of_reviews_ltm\" class=\"gt_row gt_right\">0</td>\n<td headers=\"license\" class=\"gt_row gt_left\">NA</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n:::\n\n\n## DT (interactive table)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(DT)\ndatatable(head(listings), class = 'cell-border stripe', options = list(pageLength = 3))\n```\n:::\n\n:::\n\nTwo useful fields we need are `latitude` and `longitude` and they are in decimal degree format. As a best guess, we will assume that the data is in **wgs84** Geographic Coordinate System.\n\n### 1.8.2 Creating a simple feature data frame from an aspatial data frame\n\nThe code chunk below converts `listing` data frame into a simple feature data frame by using [*st_as_sf()*](https://r-spatial.github.io/sf/reference/st_as_sf.html) of **sf** packages.\n\nEPSG 4326 is associated with WGS84.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlistings_sf <- st_as_sf(listings,\n                        coords = c('longitude','latitude'),\n                        crs=4326) %>%\n  st_transform(crs=3414)\n\nclass(listings_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"sf\"         \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n:::\n:::\n\n\nThings to learn from the arguments above:\n\n-   *coords* argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\n\n-   *crs* argument requires you to provide the coordinates system in epsg format. [EPSG: 4326](https://epsg.io/4326) is wgs84 Geographic Coordinate System and [EPSG: 3414](https://epsg.io/3414) is Singapore SVY21 Projected Coordinate System. You can search for other country's epsg code by referring to [epsg.io](https://epsg.io/).\n\nLet us examine the content of our newly created sf dataframe\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(listings_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 4,161\nColumns: 17\n$ id                             <dbl> 50646, 71609, 71896, 71903, 275344, 289…\n$ name                           <chr> \"Pleasant Room along Bukit Timah\", \"Ens…\n$ host_id                        <dbl> 227796, 367042, 367042, 367042, 1439258…\n$ host_name                      <chr> \"Sujatha\", \"Belinda\", \"Belinda\", \"Belin…\n$ neighbourhood_group            <chr> \"Central Region\", \"East Region\", \"East …\n$ neighbourhood                  <chr> \"Bukit Timah\", \"Tampines\", \"Tampines\", …\n$ room_type                      <chr> \"Private room\", \"Private room\", \"Privat…\n$ price                          <dbl> 80, 145, 85, 85, 49, 184, 79, 49, 55, 5…\n$ minimum_nights                 <dbl> 92, 92, 92, 92, 60, 92, 92, 60, 60, 60,…\n$ number_of_reviews              <dbl> 18, 20, 24, 47, 14, 12, 133, 17, 12, 3,…\n$ last_review                    <date> 2014-12-26, 2020-01-17, 2019-10-13, 20…\n$ reviews_per_month              <dbl> 0.18, 0.15, 0.18, 0.34, 0.11, 0.10, 1.0…\n$ calculated_host_listings_count <dbl> 1, 6, 6, 6, 44, 6, 7, 44, 44, 44, 6, 7,…\n$ availability_365               <dbl> 365, 340, 265, 365, 296, 285, 365, 181,…\n$ number_of_reviews_ltm          <dbl> 0, 0, 0, 0, 1, 0, 0, 3, 2, 0, 1, 0, 0, …\n$ license                        <chr> NA, NA, NA, NA, \"S0399\", NA, NA, \"S0399…\n$ geometry                       <POINT [m]> POINT (22646.02 35167.9), POINT (…\n```\n:::\n:::\n\n\nA new column `geometry` has been added at the back of the df. Additionally, lat long columns were both dropped from the df.\n\n## 1.9 Geoprocessing with sf package\n\nBesides providing functions to handling (i.e. importing, exporting, assigning projection, transforming projection etc) geospatial data, **sf** package also offers a wide range of geoprocessing (also known as GIS analysis) functions.\n\nIn this section, we will learn how to perform two commonly used geoprocessing functions, namely [buffering](https://www.gislounge.com/buffers-in-gis/) and point in polygon count.\n\n### 1.9.1 Buffering\n\nThe scenario:\n\nThe authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.\n\nThe solution:\n\nFirstly, [*st_buffer()*](https://r-spatial.github.io/sf/reference/geos_unary.html) of **sf** package is used to compute the 5-meter buffers around `cyclingpath` . A buffer is a zone around a spatial object, recall that `cyclingpath` is a multiline-string sf object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_geometry(cyclingpath)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGeometry set for 2248 features \nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\nFirst 5 geometries:\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbuffer_cycling <- st_buffer(cyclingpath,\n                            dist = 5,\n                            nQuadSegs = 30)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(buffer_cycling)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_1_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(buffer_cycling)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 6 features and 2 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 15867.37 ymin: 36795.67 xmax: 16026.95 ymax: 36953.73\nProjected CRS: SVY21\n  PLANNING_A PLANNING_1                       geometry\n1       <NA>       <NA> POLYGON ((16004.15 36799.78...\n2       <NA>       <NA> POLYGON ((16013.15 36849.86...\n3       <NA>       <NA> POLYGON ((16016.91 36892.98...\n4       <NA>       <NA> POLYGON ((16017.59 36864, 1...\n5       <NA>       <NA> POLYGON ((16022.36 36900.57...\n6       <NA>       <NA> POLYGON ((15903.87 36941.12...\n```\n:::\n:::\n\n\nNow, we will calculate the area of the buffers as shown in the code chunk below.\n\nWe are also adding a derived column to `buffer_cycling` too.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuffer_cycling$AREA <- st_area(buffer_cycling)\nkable(head(buffer_cycling))\n```\n\n::: {.cell-output-display}\n|PLANNING_A |PLANNING_1 |geometry                       |           AREA|\n|:----------|:----------|:------------------------------|--------------:|\n|NA         |NA         |POLYGON ((16004.15 36799.78... | 186.2934 [m^2]|\n|NA         |NA         |POLYGON ((16013.15 36849.86... | 293.4840 [m^2]|\n|NA         |NA         |POLYGON ((16016.91 36892.98... | 284.8275 [m^2]|\n|NA         |NA         |POLYGON ((16017.59 36864, 1... | 144.8915 [m^2]|\n|NA         |NA         |POLYGON ((16022.36 36900.57... | 281.2016 [m^2]|\n|NA         |NA         |POLYGON ((15903.87 36941.12... | 398.7081 [m^2]|\n:::\n:::\n\n\nLastly, sum() of Base R will be used to derive the total land involved\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(buffer_cycling$AREA)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1556978 [m^2]\n```\n:::\n:::\n\n\n**Good Job!**\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n## Theories\n\n### KML and shapefiles\n\nA KMZ file is a zipped (or compressed) KML file, and a SHZ is a zipped/compressed Shapefile.\n\nA shapefile is an Esri vector data storage format for storing the location, shape, and attributes of geographic features. It is stored as a set of related files and contains one feature class.\n\nThe shapefile format can spatially describe vector features: **points, lines, and polygons**, representing, for example, water wells, rivers, and lakes. Each item usually has attributes that describe it, such as name or temperature.\n\nKML and Shapefiles could contain the exact same data, however KML (Keyhole Markup Language) is much more suited to displaying time based track information, whereas shapefiles are more suited to displaying Geometries, like boundaries, areas, roads, etc.\n\n**Shapefiles are composed of 3 mandatory files**\n\n·       . shp (geometry), \\<- multipolygon, polylines or points. Can only be one type in each file , can combined in layers\n\n·       . dbf (attributes) \\<- table\n\n·       . shx (index)  \\<- binds first two together\n\n### GCS \\[Geographic Coordinate System\\] (3D) and PCS \\[Projected Coordinate System \\] (2D)\n\n**GCS**: uses lat, long, elevation to locate positions on Earth. Units are in degree and metres. Earth is represented as a [sphere]{.underline}. Eg. WGS84 (world Gedetic system 1984)\n\n**PCS**: Units are usually metres to locate position on a [Flat]{.underline} surface. Involves projecting 3D Earth into a 2D plane. It distorts the true [shapes]{.underline}, [areas]{.underline}, [distances]{.underline}, or [directions]{.underline} to some extent, depending on the projection method chosen.\n\nPreserve:\n\n·       Conformal projections minimize distortion in **shape**\n\n·       Equidistant projections minimize distortion in **distance**\n\n·       Equal-area projection minimize distortion in **area**\n\n·       Azimuthal or True-direction projections minimize distortion in **direction**.\n\nGoogle maps uses Mercator projection system. It is chosen as it preserves direction and angles. It is useful for navigation (google map) . It is originally created for sea navigation in older days. The cons are that this projection does not preserve area and shape.\n\nSingapore uses **SVY21** or the **EPSG:3414** projected coordinate system.\n\n### Geospatial data handling functions\n\n-   st_read & read sf: read simple features from file or database, or retrieve layer names and their geometry type(s)\n\n-   st write &write_sf: write simple features object to file or database\n\n-   st_as_sf: convert a sf object from a non-geospatial tabular data frame\n\n-   st as_text: convert to Well Known Text(WKT)\n\n-   st as_binary: convert to Well Known Binary(WKB)\n\n-   st_as_sfc: convert geometries to sfc (e.g., from WKT, WKB) as(x, \"Spatial\"): convert to Spatial\\*\n\n-   st transform(x, crs, ...): convert coordinates of x to a different coordinate reference system\n\nThe code chunk below allows us to unsf the mpsz and work tbl_df or data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_tbl_df <- as_tibble(mpsz)\n```\n:::\n",
    "supporting": [
      "Hands-on_Ex1_1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}