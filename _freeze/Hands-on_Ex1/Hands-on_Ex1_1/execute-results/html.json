{
  "hash": "e8181b94ac69d7b1a800c41460c2978f",
  "result": {
    "markdown": "---\ntitle: \"Hands-on Exercise 1.1: Geospatial Data Wrangling with R\"\nauthor: \"NeoYX\"\ndate: '14 Nov 2023'\ndate-modified: \"2023-11-15\"\neditor: visual\nexecute: \n  freeze: auto\n  warning: false\n  #echo: false\n  #message: false\n  html:\n    code-fold: True\n    code-overflow: scroll\n    code-summary: \"Show the code\"\n    code-line-numbers: true\n---\n\n\n## Overview\n\nIn this hands-on exercise, I will learn how to import and wrangle geospatial data using appropriate R packages.\n\n## Getting Started\n\nThe code chunk below install and load sf and tidyverse packages into R environment.\n\nThe `sp` package provides classes and methods for spatial data types in 2005. The [`sf`](https://r-spatial.github.io/sf/) package was released in 2016 to give standardise support for vector data in R. It is also coherent with [tidyverse](https://www.tidyverse.org/).\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tidyverse)\n```\n:::\n\n\n## 1.1 Learning Outcome\n\n## Importing Geospatial data\n\n### Importing polygon feature data\n\nst_read() is a func from `sf` package, used to read files in shapefile format.\n\ndsn- data source name\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(dsn=\"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\yixin-neo\\ISSS624_AGA\\Hands-on_Ex1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n:::\n:::\n\n\n### Geospatial data handling functions\n\n·       st_read & read sf: read simple features from file or database, or retrieve layer names and their geometry type(s)\n\n·       st write &write_sf: write simple features object to file or database\n\n·       st_as_sf: convert a sf object from a non-geospatial tabular data frame\n\n·       st as_text: convert to Well Known Text(WKT)\n\n·       st as_binary: convert to Well Known Binary(WKB)\n\n·       st_as_sfc: convert geometries to sfc (e.g., from WKT, WKB) as(x, \"Spatial\"): convert to Spatial\\*\n\n·       st transform(x, crs, \\...): convert coordinates of x to a different coordinate reference system\n\nThe code chunk below allows us to unsf the mpsz and work tbl_df or data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_tbl_df <- as_tibble(mpsz)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n## Theories\n\n### KML and shapefiles\n\nA KMZ file is a zipped (or compressed) KML file, and a SHZ is a zipped/compressed Shapefile.\n\nA shapefile is an Esri vector data storage format for storing the location, shape, and attributes of geographic features. It is stored as a set of related files and contains one feature class.\n\nThe shapefile format can spatially describe vector features: **points, lines, and polygons**, representing, for example, water wells, rivers, and lakes. Each item usually has attributes that describe it, such as name or temperature.\n\nKML and Shapefiles could contain the exact same data, however KML (Keyhole Markup Language) is much more suited to displaying time based track information, whereas shapefiles are more suited to displaying Geometries, like boundaries, areas, roads, etc.\n\n**Shapefiles are composed of 3 mandatory files**\n\n·       . shp (geometry), \\<- multipolygon, polylines or points. Can only be one type in each file , can combined in layers\n\n·       . dbf (attributes) \\<- table\n\n·       . shx (index)  \\<- binds first two together\n\n### GCS \\[Geographic Coordinate System\\] (3D) and PCS \\[Projected Coordinate System \\] (2D)\n\n**GCS**: uses lat, long, elevation to locate positions on Earth. Units are in degree and metres. Earth is represented as a [sphere]{.underline}. Eg. WGS84 (world Gedetic system 1984)\n\n**PCS**: Units are usually metres to locate position on a [Flat]{.underline} surface. Involves projecting 3D Earth into a 2D plane. It distorts the true [shapes]{.underline}, [areas]{.underline}, [distances]{.underline}, or [directions]{.underline} to some extent, depending on the projection method chosen.\n\nPreserve:\n\n·       Conformal projections minimize distortion in **shape**\n\n·       Equidistant projections minimize distortion in **distance**\n\n·       Equal-area projection minimize distortion in **area**\n\n·       Azimuthal or True-direction projections minimize distortion in **direction**.\n\nGoogle maps uses Mercator projection system. It is chosen as it preserves direction and angles. It is useful for navigation (google map) . It is originally created for sea navigation in older days. The cons are that this projection does not preserve area and shape.\n\nSingapore uses **SVY21** or the **EPSG:3414** projected coordinate system.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}