{
  "hash": "1f03df9aa993a963a903cc281b56ae73",
  "result": {
    "markdown": "---\ntitle: \"Hands-on Exercise 1.2: Choropleth Mapping with R\"\nauthor: \"NeoYX\"\ndate: '15 Nov 2023'\ndate-modified: \"2023-11-17\"\neditor: visual\nexecute: \n  freeze: auto\n  warning: false\n  #echo: false\n  #message: false\nformat: \n  html:\n    code-fold: false\n    code-overflow: scroll\n    code-summary: \"Show the code\"\n    code-line-numbers: true\n---\n\n\n## 2.1 Overview\n\nChoropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\n\n## 2.2 Getting Started\n\nIn this hands-on exercise, we learn how to plot functional and truthful choropleth maps by using r packages called **tmap** package.\n\nBeside **tmap** package, four other R packages will be used. They are:\n\n-   [**readr**](https://readr.tidyverse.org/) for importing delimited text file,\n\n-   [**tidyr**](https://tidyr.tidyverse.org/) for tidying data,\n\n-   [**dplyr**](https://dplyr.tidyverse.org/) for wrangling data and\n\n-   [**sf**](https://cran.r-project.org/web/packages/sf/) for handling geospatial data.\n\nAmong the four packages, **readr**, **tidyr** and **dplyr** are part of **tidyverse** package.\n\nLets us first load all the required libraries.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tmap, tidyverse)\n```\n:::\n\n\n## 2.3 Importing Data into R\n\n### 2.3.1 The Data\n\nThe Two datasets will be used to create the choropleth map are:\n\n-   Master Plan 2014 Subzone Boundary (Web) (i.e. `MP14_SUBZONE_WEB_PL`) in ESRI shapefile format.\n\n-   Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. `respopagesextod2011to2020.csv`). This is an aspatial data fie. It can be downloaded at [Department of Statistics, Singapore](https://www.singstat.gov.sg/), the specific link can be found [here](https://www.singstat.gov.sg/find-data/search-by-theme/population/geographic-distribution/latest-data). Although it does not contain any coordinates values, but it's PA and SZ fields can be used as unique identifiers to geocode to `MP14_SUBZONE_WEB_PL` shapefile.\n\n### 2.3.2 Importing Geospatial Data into R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(dsn='data/geospatial',\n                layer = 'MP14_SUBZONE_WEB_PL')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\yixin-neo\\ISSS624_AGA\\Hands-on_Ex1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n:::\n:::\n\n\nCheck the projection system of mpsz. It is not in svy21 or epsg3414. We will need to convert it later.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n```\n:::\n:::\n\n\nTake a look at first few records of data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n```\n:::\n:::\n\n\nLets convert to EPSG3414 now.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz3414 <- st_transform(mpsz, 3414)\nst_crs(mpsz3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(mpsz3414,3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 3 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 28160.23 ymin: 28369.47 xmax: 32362.39 ymax: 30247.18\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO    SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N PLN_AREA_C\n1        1          1 MARINA SOUTH    MSSZ01      Y    MARINA SOUTH         MS\n2        2          1 PEARL'S HILL    OTSZ01      Y          OUTRAM         OT\n3        3          3    BOAT QUAY    SRSZ03      Y SINGAPORE RIVER         SR\n        REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR\n1 CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84 29220.19\n2 CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06 29782.05\n3 CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96 29974.66\n  SHAPE_Leng SHAPE_Area                       geometry\n1   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n```\n:::\n:::\n\n\n### 2.3.3 Importing Attribute Data into R\n\nNext, we will import *respopagsex2000to2020.csv* file into RStudio and save the file into an R dataframe called *popagsex*.\n\nThe task will be performed by using *read_csv()* function of **readr** package as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata <- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\nhead(popdata)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 7\n  PA         SZ                     AG     Sex   TOD                   Pop  Time\n  <chr>      <chr>                  <chr>  <chr> <chr>               <dbl> <dbl>\n1 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 1- and 2-Room …     0  2011\n2 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 3-Room Flats       10  2011\n3 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 4-Room Flats       30  2011\n4 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 5-Room and Exe…    50  2011\n5 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HUDC Flats (exclud…     0  2011\n6 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males Landed Properties       0  2011\n```\n:::\n:::\n\n\nSummary stats using skimr package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(skimr)\nskim(popdata)\n```\n\n::: {.cell-output-display}\nTable: Data summary\n\n|                         |        |\n|:------------------------|:-------|\n|Name                     |popdata |\n|Number of rows           |984656  |\n|Number of columns        |7       |\n|_______________________  |        |\n|Column type frequency:   |        |\n|character                |5       |\n|numeric                  |2       |\n|________________________ |        |\n|Group variables          |None    |\n\n\n**Variable type: character**\n\n|skim_variable | n_missing| complete_rate| min| max| empty| n_unique| whitespace|\n|:-------------|---------:|-------------:|---:|---:|-----:|--------:|----------:|\n|PA            |         0|             1|   4|  23|     0|       55|          0|\n|SZ            |         0|             1|   4|  29|     0|      335|          0|\n|AG            |         0|             1|   6|  11|     0|       19|          0|\n|Sex           |         0|             1|   5|   7|     0|        2|          0|\n|TOD           |         0|             1|   6|  39|     0|        8|          0|\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|    mean|     sd|   p0|  p25|  p50|  p75| p100|hist  |\n|:-------------|---------:|-------------:|-------:|------:|----:|----:|----:|----:|----:|:-----|\n|Pop           |         0|             1|   39.86| 132.25|    0|    0|    0|   10| 2860|▇▁▁▁▁ |\n|Time          |         0|             1| 2015.51|   2.88| 2011| 2013| 2016| 2018| 2020|▇▇▇▇▇ |\n:::\n:::\n\n\n## 2.3.4 Data preparation\n\nPrepare a data table with year **2020** values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\n-   YOUNG: age group 0 to 4 until age group 20 to 24,\n\n-   ECONOMY ACTIVE: age group 25-29 until age group 60-64,\n\n-   AGED: age group 65 and above,\n\n-   TOTAL: all age group, and\n\n-   DEPENDENCY: the ratio between young and aged against economy active group\n\n### 2.3.4.1 Data Wrangling\n\n-   *pivot_wider()* (rows to column headers) of **tidyr** package, and\n\n-   *mutate() (create new cal col)*, *filter() (subset rows)*, *group_by()* and *select() (select cols)* of **dplyr** package\n\nThe complete code chunk:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2020 <- popdata %>% \n  filter(Time==2020) %>% \n  group_by(PA,SZ,AG) %>%   #<< for calculating POP column below\n  summarise(`POP` = sum(Pop)) %>% \n  ungroup() %>%\n  pivot_wider(names_from = AG,\n              values_from = POP) %>% \n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[14])) %>% \n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:13])+rowSums(.[15])) %>%\n  mutate(AGED = rowSums(.[16:21])) %>%\n  mutate(TOTAL = rowSums(.[3:21])) %>% \n  mutate(DEPENDENCY = (YOUNG+AGED)/`ECONOMY ACTIVE`) %>% \n  select(PA, SZ,YOUNG,'ECONOMY ACTIVE', AGED, TOTAL, DEPENDENCY)\n\nhead(popdata2020)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 7\n  PA         SZ                    YOUNG `ECONOMY ACTIVE`  AGED TOTAL DEPENDENCY\n  <chr>      <chr>                 <dbl>            <dbl> <dbl> <dbl>      <dbl>\n1 Ang Mo Kio Ang Mo Kio Town Cent…  1290             2760   760  4810      0.743\n2 Ang Mo Kio Cheng San              5640            16460  6050 28150      0.710\n3 Ang Mo Kio Chong Boon             5100            15000  6470 26570      0.771\n4 Ang Mo Kio Kebun Bahru            4620            13010  5120 22750      0.749\n5 Ang Mo Kio Sembawang Hills        1880             3630  1310  6820      0.879\n6 Ang Mo Kio Shangri-La             3330             9050  3610 15990      0.767\n```\n:::\n:::\n\n\nTo understand the first 6 lines of code in the code chunk above, print the output:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 21\n  PA       SZ    `0_to_4` `10_to_14` `15_to_19` `20_to_24` `25_to_29` `30_to_34`\n  <chr>    <chr>    <dbl>      <dbl>      <dbl>      <dbl>      <dbl>      <dbl>\n1 Ang Mo … Ang …      170        280        340        270        260        310\n2 Ang Mo … Chen…     1060       1040       1160       1330       1720       2020\n3 Ang Mo … Chon…      850       1020       1070       1310       1610       1890\n4 Ang Mo … Kebu…      680        960       1010       1170       1410       1420\n5 Ang Mo … Semb…      210        400        450        500        500        340\n6 Ang Mo … Shan…      560        640        700        860        970       1030\n# ℹ 13 more variables: `35_to_39` <dbl>, `40_to_44` <dbl>, `45_to_49` <dbl>,\n#   `50_to_54` <dbl>, `55_to_59` <dbl>, `5_to_9` <dbl>, `60_to_64` <dbl>,\n#   `65_to_69` <dbl>, `70_to_74` <dbl>, `75_to_79` <dbl>, `80_to_84` <dbl>,\n#   `85_to_89` <dbl>, `90_and_over` <dbl>\n```\n:::\n:::\n\n\n#### 2.3.4.2 Joining the attribute data and geospatial data\n\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\n\nSince `mpsz`'s SUBZONE_N and PLN_AREA_N are in uppercase, we have to convert PA and SZ fields in `popdata2020` into all uppercase using:\n\n1.  [mutate.at()](https://dplyr.tidyverse.org/reference/mutate_all.html)\\<- mutate multiple columns\n\n2.  first argument of mutate_at(): .var \\<- list of columns generated by vars()\n\n3.  second argument: .funs \\<- a function fun, a quosure style lambda. The function used in toupper() \\<- to upper case\n\nThere are many ways to achieve the final output\n\n::: panel-tabset\n##### Prof's book\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2020 <- popdata2020 %>% \n  mutate_at(.vars= vars(PA, SZ),\n            .funs = funs(toupper)) %>% \n  filter(`ECONOMY ACTIVE` >0)\n\npopdata2020\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 234 × 7\n   PA         SZ                   YOUNG `ECONOMY ACTIVE`  AGED TOTAL DEPENDENCY\n   <chr>      <chr>                <dbl>            <dbl> <dbl> <dbl>      <dbl>\n 1 ANG MO KIO ANG MO KIO TOWN CEN…  1290             2760   760  4810      0.743\n 2 ANG MO KIO CHENG SAN             5640            16460  6050 28150      0.710\n 3 ANG MO KIO CHONG BOON            5100            15000  6470 26570      0.771\n 4 ANG MO KIO KEBUN BAHRU           4620            13010  5120 22750      0.749\n 5 ANG MO KIO SEMBAWANG HILLS       1880             3630  1310  6820      0.879\n 6 ANG MO KIO SHANGRI-LA            3330             9050  3610 15990      0.767\n 7 ANG MO KIO TAGORE                1940             4480  1530  7950      0.775\n 8 ANG MO KIO TOWNSVILLE            4190            11950  5100 21240      0.777\n 9 ANG MO KIO YIO CHU KANG EAST     1110             2410   750  4270      0.772\n10 ANG MO KIO YIO CHU KANG WEST     5690            13750  4680 24120      0.754\n# ℹ 224 more rows\n```\n:::\n:::\n\n\nThe reason for filtering is because some subzones are not inhibited by residents as seen below.\n\n##### Alternative\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2020 %>%\n  mutate(PA = toupper(PA),\n         SZ = toupper(SZ)) %>% \n  filter(`ECONOMY ACTIVE` >0)\n```\n:::\n\n:::\n\nNext, *left_join()* of **dplyr** is used to join the geographical data and attribute table using planning subzone name e.g. *SUBZONE_N* and *SZ* as the common identifier.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_pop2020 <-left_join(mpsz3414, popdata2020,\n                         by = c('SUBZONE_N' = 'SZ'))\nmpsz_pop2020\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 323 features and 21 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area              PA YOUNG ECONOMY ACTIVE AGED\n1  29220.19   5267.381  1630379.3            <NA>    NA             NA   NA\n2  29782.05   3506.107   559816.2          OUTRAM   930           3130 2120\n3  29974.66   1740.926   160807.5 SINGAPORE RIVER     0             40   10\n4  29933.77   3313.625   595428.9     BUKIT MERAH  2600           7450 3320\n5  30005.70   2825.594   387429.4     BUKIT MERAH  2760           6160 1740\n6  29991.38   4428.913  1030378.8     BUKIT MERAH  2800           7340 3420\n7  30230.86   3275.312   551732.0     BUKIT MERAH  2750           8080 3610\n8  30222.86   2208.619   290184.7 SINGAPORE RIVER     0             50   10\n9  29893.78   6571.323  1084792.3      QUEENSTOWN  1120           2770  610\n10 30104.18   3454.239   631644.3      QUEENSTOWN    30            160   60\n   TOTAL DEPENDENCY                       geometry\n1     NA         NA MULTIPOLYGON (((31495.56 30...\n2   6180  0.9744409 MULTIPOLYGON (((29092.28 30...\n3     50  0.2500000 MULTIPOLYGON (((29932.33 29...\n4  13370  0.7946309 MULTIPOLYGON (((27131.28 30...\n5  10660  0.7305195 MULTIPOLYGON (((26451.03 30...\n6  13560  0.8474114 MULTIPOLYGON (((25899.7 297...\n7  14440  0.7871287 MULTIPOLYGON (((27746.95 30...\n8     60  0.2000000 MULTIPOLYGON (((29351.26 29...\n9   4500  0.6245487 MULTIPOLYGON (((20996.49 30...\n10   250  0.5625000 MULTIPOLYGON (((24472.11 29...\n```\n:::\n:::\n\n\n::: callout-important\n*left_join()* of **dplyr** package is used with `mpsz` simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.\n:::\n\nOriginal \\# rows in `mpsz3414` = 323\n\nOriginal \\# of rows in `popdata2022` = 234\n\nFinal \\# of rows in mpsz_pop2020 = 323\n\nWrite the data as rds, can preserve the format of data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# write_rds(mpsz_pop2020, 'data/rds/mpszpop2020.rds')\n# mpsz_pop2020 <- readRDS('data/rds/mpszpop2020.rds')\n```\n:::\n\n\nLets take a look at the df mpsz_pop2020\n\n## 2.4 Choropleth Mapping Geospatial Data Using *tmap*\n\nTwo approaches can be used to prepare thematic map using *tmap*, they are:\n\n-   Plotting a thematic map quickly by using *qtm()*.\n\n-   Plotting highly customisable thematic map by using tmap elements.\n\n### 2.4.1 Plotting a choropleth map quickly by using *qtm()*\n\nThe easiest and quickest to draw a choropleth map using **tmap** is using *qtm()*. It is concise and provides a good default visualisation in many cases.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\n#tmap_mode('view')\n#ttm()\n#last_map()\n#tmap_options(check.and.fix = TRUE)\n\nqtm(mpsz_pop2020,\n    fill='DEPENDENCY')\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_2_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nThings to learn from the code chunk above:\n\n-   *tmap_mode()* with \"plot\" option is used to produce a static map. For interactive mode, \"view\" option should be used.\n\n-   *fill* argument is used to map the attribute (i.e. DEPENDENCY)\n\n### 2.4.2 Creating a Choropleth map by using [tmap's elements](https://www.rdocumentation.org/packages/tmap/versions/3.3-3/topics/tmap-element)\n\ntmap' drawing elements (unlike qtm() ) is able to give us finer control over our chloropleth map.\n\n[tm_shape()](https://www.rdocumentation.org/packages/tmap/versions/3.3-3/topics/tm_shape) \\<- define input data and specify the shape object / spatial data object\n\n[tm_fill()](https://www.rdocumentation.org/packages/tmap/versions/3.3-3/topics/tm_fill) \\<- fills polygons (no border)\n\n-   style: method to process the color scale when **`col (data variable)`** is a numeric variable. To process numeric and categorical use \"cat\"\n\n-   [palette](https://renenyffenegger.ch/notes/development/languages/R/packages/tmaptools/index) : palettes names or vectors of colors. default is taken from tm_layout's aes.paletttes argument. To reverse the colour scheme , add a \"-\" prefix.\n\n[tm_borders()]{.underline} \\<- draws the borders of polygons (alpha is 0-1, transparency)\n\n[tm_polygons()]{.underline} (= tm_fill() + tm_borders() )\\<- fills the polygon and draws the polygon borders\n\n***\\*qtm = shape + polygon or \\* qtm = shape + fill + border***\n\n[tm_layout()](https://www.rdocumentation.org/packages/tmap/versions/3.3-3/topics/tm_layout) \\<- specify map layout\n\n-   aes.palette \\<- 'seq' (sequential palettes), 'div' (diverging palettes) , 'cat' (categorical palettes)\n\n[tm_compass()](https://www.rdocumentation.org/packages/tmap/versions/3.3-3/topics/tm_compass) \\<- create map compass\n\n[tm_scale_bar()]{.underline} \\<- creates scale bar\n\n[tm_grid()]{.underline} \\<- creates grid lines (alpha is 0-1, transparency of grid lines)\n\n[tm_credits()]{.underline} \\<- create a text for credits\n\n::: panel-tabset\n#### High quality graph\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Reds\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_2_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n#### mpsz_pop2020 table\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(knitr)\nkable(head(mpsz_pop2020,3))\n```\n\n::: {.cell-output-display}\n| OBJECTID| SUBZONE_NO|SUBZONE_N    |SUBZONE_C |CA_IND |PLN_AREA_N      |PLN_AREA_C |REGION_N       |REGION_C |INC_CRC          |FMEL_UPD_D |   X_ADDR|   Y_ADDR| SHAPE_Leng| SHAPE_Area|PA              | YOUNG| ECONOMY ACTIVE| AGED| TOTAL| DEPENDENCY|geometry                       |\n|--------:|----------:|:------------|:---------|:------|:---------------|:----------|:--------------|:--------|:----------------|:----------|--------:|--------:|----------:|----------:|:---------------|-----:|--------------:|----:|-----:|----------:|:------------------------------|\n|        1|          1|MARINA SOUTH |MSSZ01    |Y      |MARINA SOUTH    |MS         |CENTRAL REGION |CR       |5ED7EB253F99252E |2014-12-05 | 31595.84| 29220.19|   5267.381|  1630379.3|NA              |    NA|             NA|   NA|    NA|         NA|MULTIPOLYGON (((31495.56 30... |\n|        2|          1|PEARL'S HILL |OTSZ01    |Y      |OUTRAM          |OT         |CENTRAL REGION |CR       |8C7149B9EB32EEFC |2014-12-05 | 28679.06| 29782.05|   3506.107|   559816.2|OUTRAM          |   930|           3130| 2120|  6180|  0.9744409|MULTIPOLYGON (((29092.28 30... |\n|        3|          3|BOAT QUAY    |SRSZ03    |Y      |SINGAPORE RIVER |SR         |CENTRAL REGION |CR       |C35FEFF02B13E0E5 |2014-12-05 | 29654.96| 29974.66|   1740.926|   160807.5|SINGAPORE RIVER |     0|             40|   10|    50|  0.2500000|MULTIPOLYGON (((29932.33 29... |\n:::\n:::\n\n:::\n\n#### 2.4.2.1 Drawing a base map\n\nBasic building blocks are *tm_fill()* and *tm_polygons().*\n\n*tm_polygons() = fill + borders*\n\n::: panel-tabset\n##### tm_borders()\n\nBase Map\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) +\n  tm_borders(lwd = 0.1,  alpha = 1)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_2_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n##### tm_fill()\n\nTo show the geographical distribution of a selected **variable** by planning subzone, we just need to assign the target variable such as *Dependency* to *tm_polygons()*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill('DEPENDENCY')\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_2_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n:::\n\n#### 2.4.2.2 Drawing a choropleth map using *tm_polygons()*\n\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as *Dependency* to *tm_polygons()*.\n\n::: panel-tabset\n##### No variable\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_2_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n##### With variable\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_2_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n:::\n\nThings to learn from *tm_polygons()*:\n\n-   The default interval binning used to draw the choropleth map is called \"**pretty**\". A detailed discussion of the data classification methods supported by **tmap** will be provided in sub-section 4.3.\n\n-   The default colour scheme used is `YlOrRd` of **ColorBrewer**. You will learn more about the color scheme in sub-section 4.4.\n\n-   By default, Missing value will be shaded in grey.\n\n#### 2.4.2.3 Drawing a choropleth map using *tm_fill()* + \\*tm_border()\\*\\*\n\nActually, *tm_polygons()* is a wraper of *tm_fill()* and *tm_border()*. *tm_fill()* shades the polygons by using the default colour scheme and *tm_borders()* adds the borders of the shapefile onto the choropleth map.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_2_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\nApart from alpha (transparency number 0 - 1), other arguments are\n\n-   *col* = border colour,\n\n-   *lwd* = border line width. The default is 1, and\n\n-   *lty* = border line type. The default is \"solid\".\n\n### 2.4.3 Data classification methods of **tmap**\n\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\n\n**tmap** provides a total ten data classification methods, namely: *fixed*, *sd*, *equal*, *pretty* (default), *quantile*, *kmeans*, *hclust*, *bclust*, *fisher*, and *jenks*.\n\nTo define a data classification method, the ***style*** argument of *tm_fill()* **or** *tm_polygons()* will be used.\n\n#### 2.4.3.1 Plotting choropleth maps with built-in classification methods\n\nThe codes below uses quantile classification with 5 classes.\n\n::: panel-tabset\n##### fill + border\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_2_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\nUsing equal classification method\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_2_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\nDistribution of quantile data classification method are more evenly distributed then equal data classification method.\n\n##### polygons\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",n = 5,\n          style = \"jenks\" )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_2_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n:::\n\n> **Warning: Maps Lie!**\n\n> DIY: Using what you had learned, prepare choropleth maps by using different classification methods supported by tmap and compare their differences.\n\nUsing tmap_arrange:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkmeans<- tm_shape(mpsz_pop2020)+\n    tm_fill(\"DEPENDENCY\", n = 5, style = 'kmeans') +\n  tm_borders(alpha = 0.5)\n\nsd <- tm_shape(mpsz_pop2020)+\n    tm_fill(\"DEPENDENCY\", n = 5, style = 'sd') +\n  tm_borders(alpha = 0.5)\n\nfisher <- tm_shape(mpsz_pop2020)+\n    tm_fill(\"DEPENDENCY\", n = 5, style = 'fisher') +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(kmeans, sd, fisher, asp = 4, nrow=3)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_2_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n> DIY: Preparing choropleth maps by using similar classification method but with different numbers of classes (i.e. 2, 6, 10, 20). Compare the output maps, what observation can you draw?\n\nAssigning multiple values to at least one of the aesthetics arguments.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(c('DEPENDENCY','DEPENDENCY'),\n          style= c('jenks','jenks'),\n          n = c(3,10),\n          palette= list('Greens', 'Greens')) +\n  tm_borders(alpha = 0.5) +\n  tm_layout(legend.position = c('right','bottom'),\n            legend.width = 0.5,\n            legend.height = 0.4,\n            legend.text.size = 0.35 )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_2_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n#### 2.4.3.2 Plotting choropleth maps with custome break\n\nThe breakpoints can be set explicitly by means of the ***breaks*** argument to the *tm_fill().*\n\n-   breaks include min and max\n\n-   to have n categories, n+1 elements to be specified in breaks option\n\n-   values must be in increasing order\n\nGood practise: descriptive statistics on variable before setting break points\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(mpsz_pop2020$DEPENDENCY)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6519  0.7025  0.7742  0.7645 19.0000      92 \n```\n:::\n:::\n\n\nWith reference to summary stats and boxplot above,\n\n-   break points are 0.6, 0.7, 0.8, 0.9\n\n-   min = 0 and max = 1.0\n\n-   break vector is thus c(0, 0.6, 0.7, 0.8, 0.9, 1.0)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", breaks = c(0, 0.6, 0.7, 0.8, 0.9, 1.0)) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_2_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n### 2.4.4 Colour scheme\n\n#### 2.4.4.1 Using [ColourBrewer](https://r-graph-gallery.com/38-rcolorbrewers-palettes.html) palette (predefined)\n\n(YIOrRd, YIORrBr, YIGnBu, YIGn, Reds, RdPu, Purples, PuRd, PuBuGn, PuBu, OrRd, Oranges, Greys, Greens, GnBu, BuPu, BuGn, Blues)\n\n![](images/colorbrewer.png){fig-align=\"center\" width=\"200\"}\n\nAssign the preferred colour to *palette* argument of *tm_fill()*\n\n::: panel-tabset\n##### normal\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_2_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n##### reverse\n\nReverse the colour scheme by adding \"-\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_2_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n:::\n\n### 2.4.5 Map Layouts\n\n-   customise title, scale bar, compass, margins, aspect ratios\n\n-   other than colour palette and data classification (breaks) which is done in tm_fill()\n\n#### 2.4.5.1 Map Legend\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_2_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n#### 2.4.5.2 Map style\n\n**tmap** allows a wide variety of layout settings to be changed. They can be called by using [tmap_style()](https://www.rdocumentation.org/packages/tmap/versions/3.3-3/topics/tm_layout)\n\nPredefined styles: 'white', 'gray', 'natural', 'bw', 'classic', 'cobalt', albatross', 'beaver', 'col_blind', 'watercolor'\n\nBelow is an example of *classic* style\n\n::: panel-tabset\n##### gray\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)+\n  tmap_style('gray')\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_2_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n##### natural\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)+\n  tmap_style('natural')\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_2_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n##### bw\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)+\n  tmap_style('bw')\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_2_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\n##### classic\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)+\n  tmap_style('classic')\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_2_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\n##### cobalt\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"-RdPu\") +\n  tm_borders(alpha = 0.5)+\n  tmap_style('cobalt')\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_2_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n\n##### beaver\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"-Purples\") +\n  tm_borders(alpha = 0.5)+\n  tmap_style('beaver')\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_2_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n:::\n\n#### 2.4.5.3 Cartographic Furniture\n\nCan include other map furniture like compass, scale bar, and grid lines\n\ntmap_style has to be used at the **last**, think cannot mix with tm\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Reds\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.0,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\")) +\n  tmap_style('natural')\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_2_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n\nTo reset the default style, refer below\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_style(\"white\")\n```\n:::\n\n\n### 2.4.6 Drawing Small Multiple Choropleth Maps\n\n**Small multiple maps**, also referred to as **facet maps**, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\n\nIn **tmap**, small multiple maps can be plotted in three ways:\n\n-   by assigning multiple values to at least one of the asthetic arguments,\n\n-   by defining a group-by variable in *tm_facets()*, and\n\n-   by creating multiple stand-alone maps with *tmap_arrange()*.\n\n#### 2.4.6.1 By assigning multiple values to at least one of the aesthetic arguments\n\nSmall multiple choropleth maps are created by\n\n##### 2.4.6.1.1 Defining ***ncols*** in **tm_fill()** : c(\\'YOUNG\\', \\'AGED\\')\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"),\n            legend.height = 0.35, \n            legend.width = 0.35) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_2_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n\n##### 2.4.6.1.2 Assigning multiple values to at least one of the aesthetic arguments\n\n1.  shape + polygon method (Prof\\'s)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"),\n            legend.height = 0.35, \n            legend.width = 0.35) +\n  tmap_style('white')\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_2_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n2.  shape + fill + borders method (NYX\\'s)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(c('YOUNG', 'AGED','TOTAL'),\n          style=c('equal', 'quantile', 'equal'),\n          palette= list('Blues', 'Greens', 'Reds')) +\n  tm_borders(alpha = 0.5) +\n  tm_layout(legend.position = c('right','bottom'),\n            legend.height = 0.35, \n            legend.width = 0.35)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_2_files/figure-html/unnamed-chunk-44-1.png){width=672}\n:::\n:::\n\n\n#### 2.4.6.2 By defining a group-by variable in tm_facets()\n\nIn this example, multiple small choropleth maps are created by using **tm_facets()**.\n\n**thres.poly**: number that specifies the threshold at which polygons are taken into account. The number itself corresponds to the proportion of the area sizes of the polygons to the total polygon size. By default, all polygons are drawn.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_2_files/figure-html/unnamed-chunk-45-1.png){width=672}\n:::\n:::\n\n\n#### 2.4.6.3 By creating multiple stand-alone maps with *tmap_arrange()*\n\nCreating multiple stand-alone maps with *tmap_arrange()* asp : aspect ratio\n\nnrow : number of rows (ncols)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\") +\n  tm_layout(legend.position = c('right','bottom'),\n          legend.height = 0.5, \n          legend.width = 0.35)\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\") +\n  tm_layout(legend.position = c('right','bottom'),\n        legend.height = 0.5, \n        legend.width = 0.35)\n\ntmap_arrange(youngmap, agedmap, asp=3, ncol=1, nrow=2)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_2_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n\n\n### 2.4.7 Mappping Spatial Object Meeting a Selection Criterion\n\nUse selection funtion to map spatial objects meeting the selection criterion.\nThe comma **`,`** is used to indicate that we want to select all columns for the rows that meet the condition.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.3) +\n  tm_layout(main.title = \"Mapping spatial obj with conditions \\n(Central Region)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.outside = TRUE,\n            legend.height = 0.3, \n            legend.width = 0.3,\n            legend.title.size= 0.8,\n            legend.text.size= 0.6,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE,\n            bg.color = \"mintcream\") + #call colors()\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_2_files/figure-html/unnamed-chunk-47-1.png){width=672}\n:::\n:::\n\n\n1.  What to do if legend overlaps with map?\n\n-   reduce legend.text.size or legend.height and legend.width\n\n-   adjust inner.margin\n\n2.  Adjust background colours with its corresponding text colours.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_polygons(\"DEPENDENCY\") +\n    tm_layout(main.title = \"Mapping spatial obj with conditions \\n(Central Region)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            #legend.outside = TRUE,\n            legend.height = 0.3, \n            legend.width = 0.3,\n            legend.title.size= 0.8,\n            legend.text.size= 0.6,\n            inner.margins = c(0.01, 0.01, 0, .15), # ensures legend does not overlap with chart c(bottom,top,left,right)\n            frame = FALSE,\n            legend.position = c(\"right\", \"top\"),\n            bg.color = \"black\",\n            main.title.color = 'white',\n            legend.title.color = 'white',\n            legend.text.color= 'white')\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_2_files/figure-html/unnamed-chunk-48-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n### 2.4.8. Tmap summary\n\nFrom chap 2, using **tmap package** to plot\n\n1\\. tm_shape+ tm_polygon\n\n2\\. tm_shape+ tm_fill + tm_borders \\_ tm_layout\n\n3\\. qtm\n\nChap 2: To plot **small multiple** chloroplath maps via **qtm or tmap element**s:\n\n1\\. Add multiple values to tm_polygon or tm_fill\n\n2\\. Tm_facets\n\n3\\. Tm_arrange\n\nChap 3: To plot **small multiple** layered chloroplath maps via **plot() method**:\n\n 4. To arrange the maps via plot(),\n\npar(mfrow=c(2,2)) \\<- 2x2 layout\n\nFrom chap 3: to **add layers** to a plot\n\n1\\. just keep repeating plot(weight matrix ,coords,add=TRUE)\n\nhttps://rstudio-pubs-static.s3.amazonaws.com/730482_d7889d9c65c8422f843b3d4e0196633c.html\n\n## 2.5 Reference\n\n### 2.5.1 All about **tmap** package\n\n-   [tmp arguments and defaults](https://www.r-bloggers.com/2021/12/introduction-to-geospatial-visualization-with-the-tmap-package/) : Introduction to Geospatial Visualization with the tmap package\n\n-   [tmap: Thematic Maps in R](https://www.jstatsoft.org/article/view/v084i06)\n\n-   [tmap](https://cran.r-project.org/web/packages/tmap/)\n\n-   [tmap: get started!](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-getstarted.html)\n\n-   [tmap: changes in version 2.0](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-changes-v2.html)\n\n-   [tmap: creating thematic maps in a flexible way (useR!2015)](http://von-tijn.nl/tijn/research/presentations/tmap_user2015.pdf)\n\n-   [Exploring and presenting maps with tmap (useR!2017)](http://von-tijn.nl/tijn/research/presentations/tmap_user2017.pdf)\n\n### 2.5.2 Geospatial data wrangling\n\n-   [sf: Simple Features for R](https://cran.r-project.org/web/packages/sf/)\n\n-   [Simple Features for R: StandardizedSupport for Spatial Vector Data](https://journal.r-project.org/archive/2018/RJ-2018-009/RJ-2018-009.pdf)\n\n-   [Reading, Writing and Converting Simple Features](https://cran.r-project.org/web/packages/sf/vignettes/sf2.html)\n\n### 2.5.3 Data wrangling\n\n-   [dplyr](https://dplyr.tidyverse.org/)\n\n-   [Tidy data](https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html)\n\n-   [tidyr: Easily Tidy Data with \\'spread()\\' and \\'gather()\\' Functions](https://cran.r-project.org/web/packages/tidyr/tidyr.pdf)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# there are 111 arguments, run the code below to see the defaults\ntmap_options()\n```\n:::\n\n\n### \n",
    "supporting": [
      "Hands-on_Ex1_2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}