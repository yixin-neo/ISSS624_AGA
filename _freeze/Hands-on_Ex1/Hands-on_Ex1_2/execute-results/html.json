{
  "hash": "7b84953aa429f3a85677f1b300a30703",
  "result": {
    "markdown": "---\ntitle: \"Hands-on Exercise 1.2: Choropleth Mapping with R\"\nauthor: \"NeoYX\"\ndate: '15 Nov 2023'\ndate-modified: \"2023-11-15\"\neditor: visual\nexecute: \n  freeze: auto\n  warning: false\n  #echo: false\n  #message: false\nformat: \n  html:\n    code-fold: false\n    code-overflow: scroll\n    code-summary: \"Show the code\"\n    code-line-numbers: true\n---\n\n\n## 2.1 Overview\n\nChoropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\n\n## 2.2 Getting Started\n\nIn this hands-on exercise, we learn how to plot functional and truthful choropleth maps by using r packages called **tmap** package.\n\nBeside **tmap** package, four other R packages will be used. They are:\n\n-   [**readr**](https://readr.tidyverse.org/) for importing delimited text file,\n\n-   [**tidyr**](https://tidyr.tidyverse.org/) for tidying data,\n\n-   [**dplyr**](https://dplyr.tidyverse.org/) for wrangling data and\n\n-   [**sf**](https://cran.r-project.org/web/packages/sf/) for handling geospatial data.\n\nAmong the four packages, **readr**, **tidyr** and **dplyr** are part of **tidyverse** package.\n\nLets us first load all the required libraries.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tmap, tidyverse)\n```\n:::\n\n\n## 2.3 Importing Data into R\n\n### 2.3.1 The Data\n\nThe Two datasets will be used to create the choropleth map are:\n\n-   Master Plan 2014 Subzone Boundary (Web) (i.e. `MP14_SUBZONE_WEB_PL`) in ESRI shapefile format.\n\n-   Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. `respopagesextod2011to2020.csv`). This is an aspatial data fie. It can be downloaded at [Department of Statistics, Singapore](https://www.singstat.gov.sg/), the specific link can be found [here](https://www.singstat.gov.sg/find-data/search-by-theme/population/geographic-distribution/latest-data). Although it does not contain any coordinates values, but it\\'s PA and SZ fields can be used as unique identifiers to geocode to `MP14_SUBZONE_WEB_PL` shapefile.\n\n### 2.3.2 Importing Geospatial Data into R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(dsn='data/geospatial',\n                layer = 'MP14_SUBZONE_WEB_PL')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\yixin-neo\\ISSS624_AGA\\Hands-on_Ex1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n:::\n:::\n\n\nCheck the projection system of mpsz. It is not in svy21 or epsg3414. We will need to convert it later.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n```\n:::\n:::\n\n\nTake a look at first few records of data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n```\n:::\n:::\n\n\n### 2.3.3 Importing Attribute Data into R\n\nNext, we will import *respopagsex2000to2020.csv* file into RStudio and save the file into an R dataframe called *popagsex*.\n\nThe task will be performed by using *read_csv()* function of **readr** package as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata <- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\nhead(popdata)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 7\n  PA         SZ                     AG     Sex   TOD                   Pop  Time\n  <chr>      <chr>                  <chr>  <chr> <chr>               <dbl> <dbl>\n1 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 1- and 2-Room …     0  2011\n2 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 3-Room Flats       10  2011\n3 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 4-Room Flats       30  2011\n4 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 5-Room and Exe…    50  2011\n5 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HUDC Flats (exclud…     0  2011\n6 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males Landed Properties       0  2011\n```\n:::\n:::\n\n\nSummary stats using skimr package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(skimr)\nskim(popdata)\n```\n\n::: {.cell-output-display}\nTable: Data summary\n\n|                         |        |\n|:------------------------|:-------|\n|Name                     |popdata |\n|Number of rows           |984656  |\n|Number of columns        |7       |\n|_______________________  |        |\n|Column type frequency:   |        |\n|character                |5       |\n|numeric                  |2       |\n|________________________ |        |\n|Group variables          |None    |\n\n\n**Variable type: character**\n\n|skim_variable | n_missing| complete_rate| min| max| empty| n_unique| whitespace|\n|:-------------|---------:|-------------:|---:|---:|-----:|--------:|----------:|\n|PA            |         0|             1|   4|  23|     0|       55|          0|\n|SZ            |         0|             1|   4|  29|     0|      335|          0|\n|AG            |         0|             1|   6|  11|     0|       19|          0|\n|Sex           |         0|             1|   5|   7|     0|        2|          0|\n|TOD           |         0|             1|   6|  39|     0|        8|          0|\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|    mean|     sd|   p0|  p25|  p50|  p75| p100|hist  |\n|:-------------|---------:|-------------:|-------:|------:|----:|----:|----:|----:|----:|:-----|\n|Pop           |         0|             1|   39.86| 132.25|    0|    0|    0|   10| 2860|▇▁▁▁▁ |\n|Time          |         0|             1| 2015.51|   2.88| 2011| 2013| 2016| 2018| 2020|▇▇▇▇▇ |\n:::\n:::\n\n\n## 2.3.4 Data preparation\n\nPrepare a data table with year **2020** values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\n-   YOUNG: age group 0 to 4 until age group 20 to 24,\n\n-   ECONOMY ACTIVE: age group 25-29 until age group 60-64,\n\n-   AGED: age group 65 and above,\n\n-   TOTAL: all age group, and\n\n-   DEPENDENCY: the ratio between young and aged against economy active group\n\n### 2.3.4.1 Data Wrangling\n\n-   *pivot_wider()* (rows to column headers) of **tidyr** package, and\n\n-   *mutate() (create new cal col)*, *filter() (subset rows)*, *group_by()* and *select() (select cols)* of **dplyr** package\n\nThe complete code chunk:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2020 <- popdata %>% \n  filter(Time==2020) %>% \n  group_by(PA,SZ,AG) %>%   #<< for calculating POP column below\n  summarise(`POP` = sum(Pop)) %>% \n  ungroup() %>%\n  pivot_wider(names_from = AG,\n              values_from = POP) %>% \n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[14])) %>% \n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:13])+rowSums(.[15])) %>%\n  mutate(AGED = rowSums(.[16:21])) %>%\n  mutate(TOTAL = rowSums(.[3:21])) %>% \n  mutate(DEPENDENCY = (YOUNG+AGED)/`ECONOMY ACTIVE`) %>% \n  select(PA, SZ,YOUNG,'ECONOMY ACTIVE', AGED, TOTAL, DEPENDENCY)\n\nhead(popdata2020)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 7\n  PA         SZ                    YOUNG `ECONOMY ACTIVE`  AGED TOTAL DEPENDENCY\n  <chr>      <chr>                 <dbl>            <dbl> <dbl> <dbl>      <dbl>\n1 Ang Mo Kio Ang Mo Kio Town Cent…  1290             2760   760  4810      0.743\n2 Ang Mo Kio Cheng San              5640            16460  6050 28150      0.710\n3 Ang Mo Kio Chong Boon             5100            15000  6470 26570      0.771\n4 Ang Mo Kio Kebun Bahru            4620            13010  5120 22750      0.749\n5 Ang Mo Kio Sembawang Hills        1880             3630  1310  6820      0.879\n6 Ang Mo Kio Shangri-La             3330             9050  3610 15990      0.767\n```\n:::\n:::\n\n\nTo understand the first 6 lines of code in the code chunK above, print the output:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 21\n  PA       SZ    `0_to_4` `10_to_14` `15_to_19` `20_to_24` `25_to_29` `30_to_34`\n  <chr>    <chr>    <dbl>      <dbl>      <dbl>      <dbl>      <dbl>      <dbl>\n1 Ang Mo … Ang …      170        280        340        270        260        310\n2 Ang Mo … Chen…     1060       1040       1160       1330       1720       2020\n3 Ang Mo … Chon…      850       1020       1070       1310       1610       1890\n4 Ang Mo … Kebu…      680        960       1010       1170       1410       1420\n5 Ang Mo … Semb…      210        400        450        500        500        340\n6 Ang Mo … Shan…      560        640        700        860        970       1030\n# ℹ 13 more variables: `35_to_39` <dbl>, `40_to_44` <dbl>, `45_to_49` <dbl>,\n#   `50_to_54` <dbl>, `55_to_59` <dbl>, `5_to_9` <dbl>, `60_to_64` <dbl>,\n#   `65_to_69` <dbl>, `70_to_74` <dbl>, `75_to_79` <dbl>, `80_to_84` <dbl>,\n#   `85_to_89` <dbl>, `90_and_over` <dbl>\n```\n:::\n:::\n\n\n\\\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_tbl_df <- as_tibble(mpsz)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n## Theories\n\n### \n",
    "supporting": [
      "Hands-on_Ex1_2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}