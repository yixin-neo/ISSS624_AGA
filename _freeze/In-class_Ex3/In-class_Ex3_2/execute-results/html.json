{
  "hash": "3a11dae7e0a6bea54effd11ebbfb0c30",
  "result": {
    "markdown": "---\ntitle: \"In-class Exercise 3: Calibrating Spatial Interaction Models with R\"\nauthor: \"NeoYX\"\ndate: '2 Dec 2023'\ndate-modified: \"2023-12-02\"\neditor: visual\nexecute: \n  freeze: auto\n  warning: false\n  #echo: false\n  #message: false\nformat: \n  html:\n    code-fold: false\n    code-overflow: scroll\n    code-summary: \"Show the code\"\n    code-line-numbers: true\n---\n\n\n## \n\n## **16.1 Overview**\n\nSpatial Interaction Models (SIMs) are mathematical models for estimating flows between spatial entities developed by Alan Wilson in the late 1960s and early 1970, with considerable uptake and refinement for transport modelling since then Boyce and Williams (2015).\n\nThere are four main types of traditional SIMs (Wilson 1971):\n\n-   Unconstrained\n\n-   Production-constrained\n\n-   Attraction-constrained\n\n-   Doubly-constrained\n\nOrdinary least square (OLS), log-normal, Poisson and negative binomial (NB) regression methods have been used extensively to calibrate OD flow models by processing flow data as different types of dependent variables. In this chapter, you will gain hands-on experiences on using appropriate R packages to calibrate SIM by using there four regression methods.\n\n## **16.2 The Case Study and Data**\n\nIn this exercise, we are going to calibrate SIM to determine factors affecting the public bus passenger flows during the morning peak in Singapore.\n\n## **16.3 Getting Started**\n\nFor the purpose of this exercise, four R packages will be used. They are:\n\n-   sf for importing, integrating, processing and transforming geospatial data.\n\n-   sp package , although an older package, is more efficient for computation of large data.\n\n-   tidyverse for importing, integrating, wrangling and visualising data.\n\n-   tmap for creating thematic maps\n\n-   [ggpubr](https://rpkgs.datanovia.com/ggpubr/) for some easy-to-use functions (like `ggarrange()`)for creating and customizing 'ggplot2'- based publication ready plots.\n\n-   [performance](https://easystats.github.io/performance/) is part of the [`easystats`](https://easystats.github.io/easystats/) package for computing measures to assess model quality, which are not directly provided by R's 'base' or 'stats' packages. The primary goal of the **performance** package is to provide utilities for computing indices of model quality and goodness of fit. These include measures like r-squared (R2), root mean squared error (RMSE)\n\n-   `reshape2` is an old tool from base R. It handles matrix well for our distance matrix, like pivoting function like `melt()`. Tidyverse does not handle matrix very well.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tmap, sf, sp, DT,\n               performance, reshape2,\n               ggpubr, tidyverse)\n```\n:::\n\n\n## **16.4 The Data**\n\nThis exercise is a continuation of **Chapter 15: Processing and Visualising Flow Data** and the following data will be used:\n\n-   *od_data.rds*, weekday morning peak passenger flows at planning subzone level.\n\n-   *mpsz.rds*, URA Master Plan 2019 Planning Subzone boundary in simple feature tibble data frame format.\n\nBeside these two data sets, an additional attribute data file called pop.csv will be provided. It\n\n## **16.5 Computing Distance Matrix**\n\nIn spatial interaction, a distance matrix is a table that shows the distance between pairs of locations. For example, in the table below we can see an Euclidean distance of 3926.0025 between MESZ01 and RVSZ05, of 3939.1079 between MESZ01 and SRSZ01, and so on. By definition, an location's distance from itself, which is shown in the main diagonal of the table, is 0.\n\n![](https://r4gdsa.netlify.app/chap16/img/image16-1.jpg)\n\nIn this section, you will learn how to compute a distance matrix by using URA Master Plan 2019 Planning Subzone boundary in which you saved as an rds file called *mpsz*.\n\nFirst, let us import *mpsz.rds* into R environemnt by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(dsn = \"data/geospatial\",\n                   layer = \"MPSZ-2019\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `MPSZ-2019' from data source \n  `C:\\yixin-neo\\ISSS624_AGA\\In-class_Ex3\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n```\n:::\n\n```{.r .cell-code}\nmpsz\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n                 SUBZONE_N SUBZONE_C       PLN_AREA_N PLN_AREA_C       REGION_N\n1              MARINA EAST    MESZ01      MARINA EAST         ME CENTRAL REGION\n2         INSTITUTION HILL    RVSZ05     RIVER VALLEY         RV CENTRAL REGION\n3           ROBERTSON QUAY    SRSZ01  SINGAPORE RIVER         SR CENTRAL REGION\n4  JURONG ISLAND AND BUKOM    WISZ01  WESTERN ISLANDS         WI    WEST REGION\n5             FORT CANNING    MUSZ02           MUSEUM         MU CENTRAL REGION\n6         MARINA EAST (MP)    MPSZ05    MARINE PARADE         MP CENTRAL REGION\n7                   SUDONG    WISZ03  WESTERN ISLANDS         WI    WEST REGION\n8                  SEMAKAU    WISZ02  WESTERN ISLANDS         WI    WEST REGION\n9           SOUTHERN GROUP    SISZ02 SOUTHERN ISLANDS         SI CENTRAL REGION\n10                 SENTOSA    SISZ01 SOUTHERN ISLANDS         SI CENTRAL REGION\n   REGION_C                       geometry\n1        CR MULTIPOLYGON (((33222.98 29...\n2        CR MULTIPOLYGON (((28481.45 30...\n3        CR MULTIPOLYGON (((28087.34 30...\n4        WR MULTIPOLYGON (((14557.7 304...\n5        CR MULTIPOLYGON (((29542.53 31...\n6        CR MULTIPOLYGON (((35279.55 30...\n7        WR MULTIPOLYGON (((15772.59 21...\n8        WR MULTIPOLYGON (((19843.41 21...\n9        CR MULTIPOLYGON (((30870.53 22...\n10       CR MULTIPOLYGON (((26879.04 26...\n```\n:::\n:::\n\n\nNotice that it is a sf tibble dataframe object class.\n\n### **16.5.1 Converting from sf data.table to SpatialPolygonsDataFrame**\n\nThere are at least two ways to compute the required distance matrix. One is based on sf and the other is based on sp. Past experience shown that computing distance matrix by using sf function took relatively longer time that sp method especially the data set is large. In view of this, sp method is used in the code chunks below.\n\nFirst [`as.Spatial()`](https://r-spatial.github.io/sf/reference/coerce-methods.html) will be used to convert *mpsz* from sf tibble data frame to SpatialPolygonsDataFrame of sp object as shown in the code chunk below.\n\nIt has become a large spatialpolygendataframe (older). It contains a data table inside, but no geometry column (contain in another table). Wheras in new sf, everything is in a single table.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_sp <- as(mpsz, \"Spatial\")\n#mpsz_sp <- mpsz %>% \n  #as.Spatial()\nmpsz_sp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclass       : SpatialPolygonsDataFrame \nfeatures    : 332 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 6\nnames       : SUBZONE_N, SUBZONE_C, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C \nmin values  : ADMIRALTY,    AMSZ01, ANG MO KIO,         AM, CENTRAL REGION,       CR \nmax values  :    YUNNAN,    YSSZ09,     YISHUN,         YS,    WEST REGION,       WR \n```\n:::\n:::\n\n\nExploration: How to access a SpatialPolygonDataFrame object of the older sp package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_sp['SUBZONE_N'][[1]]\nmpsz_sp@data  # class dataframe\nmpsz_sp@polygons # class: list\nmpsz_sp@polygons[[1]]  # access the first polygon / subzone\nmpsz_sp@polygons[[1]]@Polygons # access the slot in the polygon object that contains information about individual Polygons within the overall geometry\nmpsz_sp@polygons[[1]]@Polygons[[1]] # same as above, enter another layer\nmpsz_sp@polygons[[1]]@Polygons[[1]]@coords #get the coordinates of the first polygon / subzone\nmpsz_sp@polygons[[332]]@Polygons[[1]]@coords #total of 333 subzones\n```\n:::\n\n\n### **16.5.2 Computing the distance matrix**\n\nNext, [`spDists()`](https://www.rdocumentation.org/packages/sp/versions/2.1-1/topics/spDistsN1) of sp package will be used to compute the Euclidean distance between the centroids of the planning subzones.\n\n`spDists(x, y = x, longlat = FALSE, segments = FALSE, diagonal = FALSE)`\n\nspDists returns a full matrix of distances in the metric of the points if longlat=FALSE, or in kilometers if longlat=TRUE; it uses spDistsN1 in case points are two-dimensional. In case of spDists(x,x), it will compute all n x n distances, not the sufficient n x (n-1).\n\n**Arguments**\n\nx: A matrix of n-D points with row denoting points, first column x/longitude, second column y/latitude, or a Spatial object that has a coordinates method\n\ny: A matrix of n-D points with row denoting points, first column x/longitude, second column y/latitude, or a Spatial object that has a coordinates method\n\nlonglat: logical; if FALSE (default), Euclidean distance, if TRUE Great Circle (WGS84 ellipsoid) distance; if x is a Spatial object, longlat should not be specified but will be derived from is.projected(x)\n\nsegments: logical; if TRUE, y must be missing; the vector of distances between consecutive points in x is returned.\n\ndiagonal: logical; if TRUE, y must be given and have the same number of points as x; the vector with distances between points with identical index is returned.\n\nThe diagonals of the ouput (332 by 332) are all 0. Distance with itself. The unit of distance is if 'm' (euclidean?) and km if WSG84?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndist <- spDists(mpsz_sp, \n                longlat = FALSE) # already projected in EPSG:3414\nhead(dist, n=c(10, 10))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           [,1]       [,2]      [,3]      [,4]       [,5]      [,6]      [,7]\n [1,]     0.000  3926.0025  3939.108 20252.964  2989.9839  1431.330 19211.836\n [2,]  3926.003     0.0000   305.737 16513.865   951.8314  5254.066 16242.523\n [3,]  3939.108   305.7370     0.000 16412.062  1045.9088  5299.849 16026.146\n [4,] 20252.964 16513.8648 16412.062     0.000 17450.3044 21665.795  7229.017\n [5,]  2989.984   951.8314  1045.909 17450.304     0.0000  4303.232 17020.916\n [6,]  1431.330  5254.0664  5299.849 21665.795  4303.2323     0.000 20617.082\n [7,] 19211.836 16242.5230 16026.146  7229.017 17020.9161 20617.082     0.000\n [8,] 14960.942 12749.4101 12477.871 11284.279 13336.0421 16281.453  5606.082\n [9,]  7515.256  7934.8082  7649.776 18427.503  7801.6163  8403.896 14810.930\n[10,]  6391.342  4975.0021  4669.295 15469.566  5226.8731  7707.091 13111.391\n           [,8]      [,9]     [,10]\n [1,] 14960.942  7515.256  6391.342\n [2,] 12749.410  7934.808  4975.002\n [3,] 12477.871  7649.776  4669.295\n [4,] 11284.279 18427.503 15469.566\n [5,] 13336.042  7801.616  5226.873\n [6,] 16281.453  8403.896  7707.091\n [7,]  5606.082 14810.930 13111.391\n [8,]     0.000  9472.024  8575.490\n [9,]  9472.024     0.000  3780.800\n[10,]  8575.490  3780.800     0.000\n```\n:::\n:::\n\n\nNotice that the output *dist* is a matrix object class of R. Also notice that the column heanders and row headers are not labeled with the planning subzone codes.\n\n### **16.5.3 Labelling column and row heanders of a distance matrix**\n\nFirst, we will create a list sorted according to the the distance matrix by planning sub-zone code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsz_names <- mpsz$SUBZONE_C\n```\n:::\n\n\nNext we will attach `SUBZONE_C` to row and column for distance matrix matching ahead\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(dist) <- paste0(sz_names)\nrownames(dist) <- paste0(sz_names)\ndist[1:5,1:5]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          MESZ01     RVSZ05    SRSZ01   WISZ01     MUSZ02\nMESZ01     0.000  3926.0025  3939.108 20252.96  2989.9839\nRVSZ05  3926.003     0.0000   305.737 16513.86   951.8314\nSRSZ01  3939.108   305.7370     0.000 16412.06  1045.9088\nWISZ01 20252.964 16513.8648 16412.062     0.00 17450.3044\nMUSZ02  2989.984   951.8314  1045.909 17450.30     0.0000\n```\n:::\n:::\n\n\n### **16.5.4 Pivoting distance value by SUBZONE_C**\n\nNext, we will pivot the distance matrix into a long table by using the row and column subzone codes as show in the code chunk below.\n\nWe will use the [melt()](https://seananderson.ca/2013/10/19/reshape/) function of the reshape2 package to convert wide-format data to long-format data. This function will convert wide-format data to a data frame with columns for each combination of row and column indices and their corresponding values.\n\nTo do the opposite, used cast().\n\n::: panel-tabset\n## wide\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatrix(1:6, nrow = 2, ncol = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n```\n:::\n:::\n\n\n## long\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreshape2::melt(matrix(1:6, nrow = 2, ncol = 3)) %>% knitr::kable()\n```\n\n::: {.cell-output-display}\n| Var1| Var2| value|\n|----:|----:|-----:|\n|    1|    1|     1|\n|    2|    1|     2|\n|    1|    2|     3|\n|    2|    2|     4|\n|    1|    3|     5|\n|    2|    3|     6|\n:::\n:::\n\n:::\n\nThree new columns generated, (1) 'var1', (2) 'var2' and (3) 'value' containing the distance for the corresponding var1-var2 pair; thus rename to 'dist'.\n\nThere are 110,224 rows in distPair due to 332P2 + 332 = 332\\*331 + 332. Number of possible permutations with replacement.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistPair <- melt(dist) %>%\n  rename(dist = value)\nhead(distPair, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Var1   Var2      dist\n1  MESZ01 MESZ01     0.000\n2  RVSZ05 MESZ01  3926.003\n3  SRSZ01 MESZ01  3939.108\n4  WISZ01 MESZ01 20252.964\n5  MUSZ02 MESZ01  2989.984\n6  MPSZ05 MESZ01  1431.330\n7  WISZ03 MESZ01 19211.836\n8  WISZ02 MESZ01 14960.942\n9  SISZ02 MESZ01  7515.256\n10 SISZ01 MESZ01  6391.342\n```\n:::\n:::\n\n\nNotice that the within zone distance is 0.\n\n### **16.5.5 Updating intra-zonal distances**\n\nIn this section, we are going to append a constant value to replace the intra-zonal distance of 0.\n\nFirst, we will select and find out the **minimum value** of the distance by using `summary()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistPair %>%\n  filter(dist > 0) %>%\n  summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      Var1             Var2             dist        \n MESZ01 :   331   MESZ01 :   331   Min.   :  173.8  \n RVSZ05 :   331   RVSZ05 :   331   1st Qu.: 7149.5  \n SRSZ01 :   331   SRSZ01 :   331   Median :11890.0  \n WISZ01 :   331   WISZ01 :   331   Mean   :12229.4  \n MUSZ02 :   331   MUSZ02 :   331   3rd Qu.:16401.7  \n MPSZ05 :   331   MPSZ05 :   331   Max.   :49894.4  \n (Other):107906   (Other):107906                    \n```\n:::\n:::\n\n\nAfter removing distance = 0 (intra), the minimum inter-zonal distance is 173.8m.\n\nNext, a constant distance value of 50m (**estimate based on 173.8m**) is added into intra-zones distance. The diagonals of dist matrix (if still a matrix) would have been 50m.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistPair$dist <- ifelse(distPair$dist == 0,\n                        50, distPair$dist)\n```\n:::\n\n\nThe code chunk below will be used to check the result data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistPair %>%\n  summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      Var1             Var2             dist      \n MESZ01 :   332   MESZ01 :   332   Min.   :   50  \n RVSZ05 :   332   RVSZ05 :   332   1st Qu.: 7097  \n SRSZ01 :   332   SRSZ01 :   332   Median :11864  \n WISZ01 :   332   WISZ01 :   332   Mean   :12193  \n MUSZ02 :   332   MUSZ02 :   332   3rd Qu.:16388  \n MPSZ05 :   332   MPSZ05 :   332   Max.   :49894  \n (Other):108232   (Other):108232                  \n```\n:::\n:::\n\n\nThe code chunk below is used to rename the origin and destination fields.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistPair <- distPair %>%\n  rename(orig = Var1,\n         dest = Var2)\n```\n:::\n\n\nLastly, the code chunk below is used to save the dataframe for future use.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(distPair, \"data/rds/distPair.rds\") \n```\n:::\n\n\n## **16.6 Preparing flow data**\n\nThe code chunk below is used import *od_data* save in Chapter 15 into R environment.\n\nThere are 310 unique origin subzone values and 311 unique destin subzone values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nod_data <- read_rds(\"data/rds/od_data.rds\")\n```\n:::\n\n\nNext, we will compute the total passenger trip between and within planning subzones by using the code chunk below. The output is all *flow_data*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflow_data <- od_data %>%\n  group_by(ORIGIN_SZ, DESTIN_SZ) %>% \n  summarize(TRIPS = sum(MORNING_PEAK)) \n\nhead(flow_data, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 3\n# Groups:   ORIGIN_SZ [1]\n   ORIGIN_SZ DESTIN_SZ TRIPS\n   <chr>     <chr>     <dbl>\n 1 AMSZ01    AMSZ01     2575\n 2 AMSZ01    AMSZ02    11742\n 3 AMSZ01    AMSZ03    14886\n 4 AMSZ01    AMSZ04     3237\n 5 AMSZ01    AMSZ05     9349\n 6 AMSZ01    AMSZ06     2231\n 7 AMSZ01    AMSZ07     1714\n 8 AMSZ01    AMSZ08     2624\n 9 AMSZ01    AMSZ09     2371\n10 AMSZ01    AMSZ10      183\n```\n:::\n:::\n\n\n### **16.6.1 Separating intra-flow from passenger volume df**\n\nCode chunk below is used to add three new fields in `flow_data` dataframe.\n\nTwo new fields called 'FlowNoIntra' and 'offset' are created.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflow_data$FlowNoIntra <- ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, \n  0, flow_data$TRIPS)\nflow_data$offset <- ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, \n  0.000001, 1)\n```\n:::\n\n\nPrint\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(flow_data,3) %>% knitr::kable()\n```\n\n::: {.cell-output-display}\n|ORIGIN_SZ |DESTIN_SZ | TRIPS| FlowNoIntra| offset|\n|:---------|:---------|-----:|-----------:|------:|\n|AMSZ01    |AMSZ01    |  2575|           0|  1e-06|\n|AMSZ01    |AMSZ02    | 11742|       11742|  1e+00|\n|AMSZ01    |AMSZ03    | 14886|       14886|  1e+00|\n:::\n\n```{.r .cell-code}\nglimpse(flow_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 20,987\nColumns: 5\nGroups: ORIGIN_SZ [310]\n$ ORIGIN_SZ   <chr> \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMSZ01\"…\n$ DESTIN_SZ   <chr> \"AMSZ01\", \"AMSZ02\", \"AMSZ03\", \"AMSZ04\", \"AMSZ05\", \"AMSZ06\"…\n$ TRIPS       <dbl> 2575, 11742, 14886, 3237, 9349, 2231, 1714, 2624, 2371, 18…\n$ FlowNoIntra <dbl> 0, 11742, 14886, 3237, 9349, 2231, 1714, 2624, 2371, 183, …\n$ offset      <dbl> 1e-06, 1e+00, 1e+00, 1e+00, 1e+00, 1e+00, 1e+00, 1e+00, 1e…\n```\n:::\n:::\n\n\n### **16.6.2 Combining passenger volume data with distance value**\n\nBefore we can join *flow_data* and *distPair*, we need to convert data value type of *ORIGIN_SZ* and *DESTIN_SZ* fields of flow_data dataframe into factor data type.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflow_data$ORIGIN_SZ <- as.factor(flow_data$ORIGIN_SZ)\nflow_data$DESTIN_SZ <- as.factor(flow_data$DESTIN_SZ)\n```\n:::\n\n\nNow, `left_join()` of **dplyr** will be used to *flow_data* dataframe and *distPair* dataframe. The output is called *flow_data1*.\n\nNotes:\n\n`distPair` is a df containing distances for all corresponding subzone pairs (including self, default to 50m). 'var1', 'var2', 'dist'\n\n`flow_data` is a df containing 'origin_sz', 'destin_sb' and 'morning_peak'\n\nWe will now perform a left join with two sets join keys.\n\nThe output contains **distance** and total morning peak trips for each possible pairs of subzones (self included).\n\nBefore left join:\n\n`flow_data` has 20,987 rows.\n\n`distPair` has 110,224 rows (is the all possible pairs out of 332 subzones, order matters and with replacement.)\n\nAfter join:\n\n`flow_data1` has 20,987 rows.\n\n`flow_data` has no distance. `flow_data1` has distance data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflow_data1 <- flow_data %>%\n  left_join (distPair,\n             by = c(\"ORIGIN_SZ\" = \"orig\",\n                    \"DESTIN_SZ\" = \"dest\"))\n\nglimpse(flow_data1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 20,987\nColumns: 6\nGroups: ORIGIN_SZ [310]\n$ ORIGIN_SZ   <fct> AMSZ01, AMSZ01, AMSZ01, AMSZ01, AMSZ01, AMSZ01, AMSZ01, AM…\n$ DESTIN_SZ   <fct> AMSZ01, AMSZ02, AMSZ03, AMSZ04, AMSZ05, AMSZ06, AMSZ07, AM…\n$ TRIPS       <dbl> 2575, 11742, 14886, 3237, 9349, 2231, 1714, 2624, 2371, 18…\n$ FlowNoIntra <dbl> 0, 11742, 14886, 3237, 9349, 2231, 1714, 2624, 2371, 183, …\n$ offset      <dbl> 1e-06, 1e+00, 1e+00, 1e+00, 1e+00, 1e+00, 1e+00, 1e+00, 1e…\n$ dist        <dbl> 50.0000, 810.4491, 1360.9294, 840.4432, 1076.7916, 805.297…\n```\n:::\n:::\n\n\nPrint out\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(flow_data1) %>% knitr::kable()\n```\n\n::: {.cell-output-display}\n|ORIGIN_SZ |DESTIN_SZ | TRIPS| FlowNoIntra| offset|      dist|\n|:---------|:---------|-----:|-----------:|------:|---------:|\n|AMSZ01    |AMSZ01    |  2575|           0|  1e-06|   50.0000|\n|AMSZ01    |AMSZ02    | 11742|       11742|  1e+00|  810.4491|\n|AMSZ01    |AMSZ03    | 14886|       14886|  1e+00| 1360.9294|\n|AMSZ01    |AMSZ04    |  3237|        3237|  1e+00|  840.4432|\n|AMSZ01    |AMSZ05    |  9349|        9349|  1e+00| 1076.7916|\n|AMSZ01    |AMSZ06    |  2231|        2231|  1e+00|  805.2979|\n:::\n:::\n\n\n## **16.7 Preparing Origin and Destination Attributes**\n\n### **16.7.1 Importing population data**\n\n'pop.csv' is a processed version of 'respopagesextod2011to2020.csv' .\n\nThe original dataset used here is the *Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2022* in csv format . This is an aspatial data file. It can be downloaded at [Department of Statistics](https://www.singstat.gov.sg/), Singapore, the specific link can be found [here](https://www.singstat.gov.sg/find-data/search-by-theme/population/geographic-distribution/latest-data). Although it does not contain any coordinates values, but it's 'PA' and 'SZ' fields can be used as unique identifiers to geocode to 'PLAN_AREA_N' and 'SUBZONE_N' of the MP14_SUBZONE_WEB_PL shapefile respectively.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop <- read_csv(\"data/aspatial/pop.csv\")\nhead(pop)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n  PA         SZ                     AGE7_12 AGE13_24 AGE25_64\n  <chr>      <chr>                    <dbl>    <dbl>    <dbl>\n1 ANG MO KIO ANG MO KIO TOWN CENTRE     310      710     2780\n2 ANG MO KIO CHENG SAN                 1140     2770    15700\n3 ANG MO KIO CHONG BOON                1010     2650    14240\n4 ANG MO KIO KEBUN BAHRU               1050     2390    12460\n5 ANG MO KIO SEMBAWANG HILLS            420     1120     3620\n6 ANG MO KIO SHANGRI-LA                 810     1920     9650\n```\n:::\n:::\n\n\n**Why is the data prepared in this way?**\n\nAge group 7-12: Feeder bus to send kids to school\n\nAge group 13-24: Feeder bus for secondary / JC / ITE/ poly students to school.\n\n**Interesting observation**: When we examine the flow map in Hands-on_Ex3, the top few flow movement by bus have their destinations at Republic Poly in woodlands, AMK central ITE along AMK ave 5 for instance.\n\n### **16.7.2 Geospatial data wrangling**\n\n**POP + MPSZ**\n\nLet us append the zone codes in `mpsz` df to the `pop`'s population data by age groups. We do not really need to geometry data.\n\n`pop` has 332 rows\n\nmpsz has 332 rows\n\nAfter join: 984,656 rows\n\nColumn selected are 'PA', 'SZ', 'AGE7-12', 'AGE13-24', 'AGE25_64' from pop df and 'SUBZONE_C' from mpsz df.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop <- pop %>%\n  left_join(mpsz,\n            by = c(\"PA\" = \"PLN_AREA_N\",\n                   \"SZ\" = \"SUBZONE_N\")) %>%\n  select(1:6) %>%\n  rename(SZ_NAME = SZ,\n         SZ = SUBZONE_C)\n\nhead(pop)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 6\n  PA         SZ_NAME                AGE7_12 AGE13_24 AGE25_64 SZ    \n  <chr>      <chr>                    <dbl>    <dbl>    <dbl> <chr> \n1 ANG MO KIO ANG MO KIO TOWN CENTRE     310      710     2780 AMSZ01\n2 ANG MO KIO CHENG SAN                 1140     2770    15700 AMSZ02\n3 ANG MO KIO CHONG BOON                1010     2650    14240 AMSZ03\n4 ANG MO KIO KEBUN BAHRU               1050     2390    12460 AMSZ06\n5 ANG MO KIO SEMBAWANG HILLS            420     1120     3620 AMSZ07\n6 ANG MO KIO SHANGRI-LA                 810     1920     9650 AMSZ05\n```\n:::\n:::\n\n\n### **16.7.3 Preparing origin attribute**\n\n**FLOW_DATA1 + POP**\n\nWe would like to append the **origin's population data** from `pop` to `flow_data1` that **contains(1) origin -destination pair, (2) actual flows and (3) distance information.**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflow_data1 <- flow_data1 %>%\n  left_join(pop,\n            by = c(ORIGIN_SZ = \"SZ\")) %>%\n  rename(ORIGIN_AGE7_12 = AGE7_12,\n         ORIGIN_AGE13_24 = AGE13_24,\n         ORIGIN_AGE25_64 = AGE25_64) %>%\n  select(-c(PA, SZ_NAME))\n```\n:::\n\n\n*Morning pea*k: the **push** factor should be the population from origin population distribution.\n\n*Evening peak* : the **pull** factor would be the population too.\n\nLimits of our model: transfer trips not accounted for.\n\n### **16.7.4 Preparing destination attribute**\n\nSimilarly, we want to get the destination's population data by destination from `pop`. Once again, perform a left join.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflow_data1 <- flow_data1 %>%\n  left_join(pop,\n            by = c(DESTIN_SZ = \"SZ\")) %>%\n  rename(DESTIN_AGE7_12 = AGE7_12,\n         DESTIN_AGE13_24 = AGE13_24,\n         DESTIN_AGE25_64 = AGE25_64) %>%\n  select(-c(PA, SZ_NAME))\n```\n:::\n\n\nWe will called the output data file *SIM_data*. it is in rds data file format.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(flow_data1, \"data/rds/SIM_data\")\n```\n:::\n\n\n## **16.8 Calibrating Spatial Interaction Models**\n\nIn this section, you will learn how to calibrate Spatial Interaction Models by using Poisson Regression method.\n\n### **16.8.1 Importing the modelling data**\n\nFirstly, let us import the modelling data by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSIM_data <- read_rds(\"data/rds/SIM_data.rds\")\n```\n:::\n\n\n### **16.8.2 Visualising the dependent variable**\n\nFirstly, let us plot the distribution of the dependent variable (i.e. TRIPS) by using histogram method by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = SIM_data,\n       aes(x = TRIPS)) +\n  geom_histogram()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex3_2_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\nNotice that the distribution is highly skewed and not resemble bell shape or also known as normal distribution.\n\nNext, let us visualise the relation between the dependent variable and one of the key independent variable in Spatial Interaction Model, namely distance.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = SIM_data,\n       aes(x = dist,\n           y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex3_2_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\nNotice that their relationship hardly resemble linear relationship.\n\nOn the other hand, if we plot the scatter plot by using the log transformed version of both variables, we can see that their relationship is more resemble linear relationship.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = SIM_data,\n       aes(x = log(dist),\n           y = log(TRIPS))) +\n  geom_point() +\n  geom_smooth(method = lm)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex3_2_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\nWe have come to the end of our data preparation stage.\n\n### **16.8.3 Checking for variables with zero values**\n\nFeature engineering state starts here: We need to make our data able to work for our chosen algorithm (Poisson regression).\n\nSince **Poisson** Regression is based of **log** and **log 0 is undefined**, it is important for us to ensure that **no 0** values in the explanatory variables.\n\nIn the code chunk below, summary() of Base R is used to compute the summary statistics of all variables in *SIM_data* data frame.\n\n### **16.8.4 Unconstrained Spatial Interaction Model**\n\nIn this section, we will learn how to calibrate an unconstrained spatial interaction model by using `glm()` of Base Stats. The **explanatory** variables are **origin population by different age cohort**, **destination population by different age cohort** (i.e. *ORIGIN_AGE25_64*) and **distance** between origin and destination in km (i.e. *dist*).\n\nThe general formula of Unconstrained Spatial Interaction Model\n\n![](https://r4gdsa.netlify.app/chap15/img/image1.jpg)\n\nThe code chunk used to calibrate to model is shown below:\n\n\n::: {.cell}\n\n:::\n\n\nThe parameter estimate for distnace is -1.517. If the sign is positive, double-check our workings.\n\nAIC: GLM by default do not provide R-square, only provide AIC.\n\nCompare models:\n\nDoubly constrained: **best** model as not dispersed. 60% accuracy because we only have one/two variables if we add more variables like job opportunities.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#| eval: false\n#| echo: false\n#| fig-width: 14\n#| fig-asp: 0.68\n#| code-fold: True\n```\n:::\n\n\n## Summaries\n\nOD matrix is often incomplete. Imagine trying to complete the OD matrix, it would involve us doing spatial interaction or OD surveys to find the missing values. There are 332 subzones in Singapore, and each survey is expensive,. In addition, OD matrix is constantly changing as flow patterns changes. We are trying to predict flows between origins and destinations. Flow could be thought of a function of (1) attribute of origin (propulsiveness) (2) attribute of destination (attractiveness) and (3) cost friction (like distance or transport cost or public transport stops). Assumption is that the **benefits** must outweigh the **cost** in order for flow to happen.\n\n**Gravity model** takes into consideration the interaction between all origin and destination locations.\n\n**Potential model** takes in consideration the interaction between a location and all other location pairs. (Good for measuring accessibility)\n\n**Retail model** is commonly used by franchise like KFC / Pizza Hut to determine their area/region of service (aka delivery zones) for each outlet.\n\nThere are 4 variations in the Gravity model:\n\n1.  Unconstrained: only the overall outflow is fixed and total outflow from origins = total inflow to destinations\n2.  Origin constrained: outflow by origin is fixed.\n3.  Destination constrained: inflow by destination is fixed.\n4.  Doubly constrained: outflow by origin and inflow by destination is fixed.\n\nTo calculate flow from each origin to each destination, we need parameters like k, alpha, lambda and beta. The beta for distance is usually negative because we assume that there is an inverse relationship between interaction and distance, like Newtonian physics and laws of gravity.\n",
    "supporting": [
      "In-class_Ex3_2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}