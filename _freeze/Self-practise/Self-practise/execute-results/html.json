{
  "hash": "7b8005f885aef0c097fb90f32e95c18d",
  "result": {
    "markdown": "---\ntitle: \"Self-practise\"\nauthor: \"NeoYX\"\ndate: '28 Nov 2023'\ndate-modified: \"2023-11-28\"\neditor: visual\nexecute: \n  freeze: auto\n  warning: false\n  #echo: false\n  #message: false\nformat: \n  html:\n    code-fold: false\n    code-overflow: scroll\n    code-summary: \"Show the code\"\n    code-line-numbers: true\n---\n\n\n# Getting started\n\nInstalling and loading the required R packages.\n\n`dplyr`: reshape data, joins, pivot for instance..\n\n`tidyr`: transform data\n\n`knitr`: generate html table\n\nToday, `sfdep` library will replace the `spdep` library because it is more recent (\\<2 years ago). Allows to [mutate]{.underline} using [spatial function]{.underline}s. `spdep` does not allow for mutate for instance.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tmap, sfdep, tidyverse, knitr, plotly,Kendall, DT)\n```\n:::\n\n\n## The data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz<- st_read(dsn=\"data/geospatial/MPSZ-2019\", layer = \"MPSZ-2019\") %>% st_transform(crs=3414)\n\nst_crs(mpsz)\n```\n:::\n\n\nIn the code chunk below , import aspatial data\n\n\n::: {.cell}\n\n```{.r .cell-code}\narea_hex_grid = st_make_grid(mpsz,\n                             cellsize= 500, \n                             what = \"polygons\", \n                             square = FALSE)\n\nhex_grid_sf = st_sf(area_hex_grid) %>%\n  mutate(grid_id = 1:length(lengths(area_hex_grid)))\n\nhex_grid_sf$subzone = lengths(st_intersects(hex_grid_sf, mpsz))\n\n\nsz_count = filter(hex_grid_sf, subzone > 0)\nsz_count\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#st_write(sz_count, 'data/sz_count.shp')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsz_count <- st_read(dsn='data/geospatial/sz_count',\n                    layer='sz_count')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `sz_count' from data source \n  `C:\\yixin-neo\\ISSS624_AGA\\Self-practise\\data\\geospatial\\sz_count' \n  using driver `ESRI Shapefile'\nSimple feature collection with 4131 features and 2 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2167.538 ymin: 15460.05 xmax: 56667.54 ymax: 50678.41\nProjected CRS: SVY21 / Singapore TM\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(sz_count['grid_id'])\n```\n\n::: {.cell-output-display}\n![](Self-practise_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbs_count<- st_read(dsn=\"data/geospatial/bs_count\", layer = \"bs_count\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `bs_count' from data source \n  `C:\\yixin-neo\\ISSS624_AGA\\Self-practise\\data\\geospatial\\bs_count' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1524 features and 2 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 3720.122 ymin: 26193.43 xmax: 48720.12 ymax: 53184.55\nProjected CRS: SVY21 / Singapore TM\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(bs_count['grid_id'])\n```\n\n::: {.cell-output-display}\n![](Self-practise_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nc<-st_join(sz_count, bs_count) %>% \n  rename(grid_id = grid_id.x) %>% \n  select(grid_id)\n\nbs_count<- bs_count %>% select(grid_id)\n\n\nappended_data <- rbind(c, bs_count)\n#appended_data <- rbind(appended_data, c)\n\nplot(appended_data)\n```\n\n::: {.cell-output-display}\n![](Self-practise_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#what=st_equals(appended_data, retain_unique = TRUE)\n#no_dup<- appended_data[unlist(what),]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_equals(appended_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSparse geometry binary predicate list of length 9565, where the\npredicate was `equals'\nfirst 10 elements:\n 1: 1\n 2: 2\n 3: 3\n 4: 4\n 5: 5\n 6: 6\n 7: 7\n 8: 8\n 9: 9\n 10: 10\n```\n:::\n\n```{.r .cell-code}\nst_equals(appended_data, remove_self = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSparse geometry binary predicate list of length 9565, where the\npredicate was `equals', with remove_self = TRUE\nfirst 10 elements:\n 1: (empty)\n 2: (empty)\n 3: (empty)\n 4: (empty)\n 5: (empty)\n 6: (empty)\n 7: (empty)\n 8: (empty)\n 9: (empty)\n 10: (empty)\n```\n:::\n\n```{.r .cell-code}\n(u = st_equals(appended_data, retain_unique = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSparse geometry binary predicate list of length 9565, where the\npredicate was `equals', with retain_unique = TRUE\nfirst 10 elements:\n 1: (empty)\n 2: (empty)\n 3: (empty)\n 4: (empty)\n 5: (empty)\n 6: (empty)\n 7: (empty)\n 8: (empty)\n 9: (empty)\n 10: (empty)\n```\n:::\n\n```{.r .cell-code}\n# retain the records with unique geometries:\nnew<-appended_data[-unlist(u),]\n\n#no_dup$grid_id2 <- 1:nrow(no_dup)\nplot(new)\n```\n\n::: {.cell-output-display}\n![](Self-practise_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#st_write(new, 'data/new.shp')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnew<- st_read(dsn=\"data/geospatial/new\", layer = \"new\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `new' from data source \n  `C:\\yixin-neo\\ISSS624_AGA\\Self-practise\\data\\geospatial\\new' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5655 features and 1 field\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2167.538 ymin: 15460.05 xmax: 56667.54 ymax: 53184.55\nProjected CRS: SVY21 / Singapore TM\n```\n:::\n\n```{.r .cell-code}\nplot(new)\n```\n\n::: {.cell-output-display}\n![](Self-practise_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nExample from CRAN\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# remove duplicate geometries:\np1 = st_point(0:1)\np2 = st_point(2:1)\np = st_sf(a = letters[1:8], geom = st_sfc(p1, p1, p2, p1, p1, p2, p2, p1))\nplot(p)\n```\n\n::: {.cell-output-display}\n![](Self-practise_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n\n```{.r .cell-code}\nst_equals(p)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSparse geometry binary predicate list of length 8, where the predicate\nwas `equals'\n 1: 1, 2, 4, 5, 8\n 2: 1, 2, 4, 5, 8\n 3: 3, 6, 7\n 4: 1, 2, 4, 5, 8\n 5: 1, 2, 4, 5, 8\n 6: 3, 6, 7\n 7: 3, 6, 7\n 8: 1, 2, 4, 5, 8\n```\n:::\n\n```{.r .cell-code}\nst_equals(p, remove_self = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSparse geometry binary predicate list of length 8, where the predicate\nwas `equals', with remove_self = TRUE\n 1: 2, 4, 5, 8\n 2: 1, 4, 5, 8\n 3: 6, 7\n 4: 1, 2, 5, 8\n 5: 1, 2, 4, 8\n 6: 3, 7\n 7: 3, 6\n 8: 1, 2, 4, 5\n```\n:::\n\n```{.r .cell-code}\n(u = st_equals(p, retain_unique = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSparse geometry binary predicate list of length 8, where the predicate\nwas `equals', with retain_unique = TRUE\n 1: 2, 4, 5, 8\n 2: 4, 5, 8\n 3: 6, 7\n 4: 5, 8\n 5: 8\n 6: 7\n 7: (empty)\n 8: (empty)\n```\n:::\n\n```{.r .cell-code}\n# retain the records with unique geometries:\np[-unlist(u),]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 2 features and 1 field\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 0 ymin: 1 xmax: 2 ymax: 1\nCRS:           NA\n  a        geom\n1 a POINT (0 1)\n3 c POINT (2 1)\n```\n:::\n:::\n\n::: {.cell fig.asp='0.68'}\n\n:::\n",
    "supporting": [
      "Self-practise_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}