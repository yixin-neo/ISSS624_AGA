{
  "hash": "45e170cbffba3d06bcb4e192d4913b83",
  "result": {
    "markdown": "---\ntitle: \"In-class Exercise 2\"\nauthor: \"NeoYX\"\ndate: '25 Nov 2023'\ndate-modified: \"2023-11-25\"\neditor: visual\nexecute: \n  freeze: auto\n  warning: false\n  #echo: false\n  #message: false\nformat: \n  html:\n    #fontsize: 20px\n    code-fold: false\n    code-overflow: scroll\n    code-summary: \"Show the code\"\n    code-line-numbers: true\n---\n\n\n## Getting started\n\nInstalling and loading the required R packages.\n\n`dplyr`: reshape data, joins, pivot for instance..\n\n`tidyr`: transform data\n\n`knitr`: generate html table\n\nToday, `sfdep` library will replace the `spdep` library because it is more recent (\\<2 years ago). Allows to [mutate]{.underline} using [spatial function]{.underline}s. `spdep` does not allow for mutate for instance.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tmap, sfdep, tidyverse, knitr, plotly,Kendall, DT)\n```\n:::\n\n\n## The data\n\n-   Hunan, geospatial dataset in shapefile format\n\n-   Hunan_2012, an attribute dataset in csv format\n\n### Part 1: Spatial weights - sfdep methods\n\n#### Import geospatial and aspatial data\n\nIn the code chunk below , import geospatial data using st_read() from `sf` library. The output has projection of WSG84 and 88 observations. Class of 'sf' and 'tibble df', and in tibble df contains a geometry list. In 'sf', each row/observation represents a geographical region/area/unit.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n hunan<- st_read(dsn=\"data/geospatial\", layer = \"Hunan\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `Hunan' from data source \n  `C:\\yixin-neo\\ISSS624_AGA\\In-class_Ex2\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n```\n:::\n\n```{.r .cell-code}\n class(hunan)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"sf\"         \"data.frame\"\n```\n:::\n:::\n\n\nIn the code chunk below , import aspatial data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n```\n:::\n\n\nCombine both files together using left_join hunan (geo) with hunan_2012 (aspatial) to retain the `sf` class. If the unique identifier is not specified, R will use identical columns, in this case 'County' columns in both objects.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_GDPPC <- left_join(hunan, hunan_2012,\n                   by = c('County' = 'County')) %>% \n  select(1:4, 7,15)\n\nhunan\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n     NAME_2  ID_3    NAME_3   ENGTYPE_3 Shape_Leng Shape_Area    County\n1   Changde 21098   Anxiang      County   1.869074 0.10056190   Anxiang\n2   Changde 21100   Hanshou      County   2.360691 0.19978745   Hanshou\n3   Changde 21101    Jinshi County City   1.425620 0.05302413    Jinshi\n4   Changde 21102        Li      County   3.474325 0.18908121        Li\n5   Changde 21103     Linli      County   2.289506 0.11450357     Linli\n6   Changde 21104    Shimen      County   4.171918 0.37194707    Shimen\n7  Changsha 21109   Liuyang County City   4.060579 0.46016789   Liuyang\n8  Changsha 21110 Ningxiang      County   3.323754 0.26614198 Ningxiang\n9  Changsha 21111 Wangcheng      County   2.292093 0.13049161 Wangcheng\n10 Chenzhou 21112     Anren      County   2.240739 0.13343936     Anren\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734...\n```\n:::\n:::\n\n\nPlot a choropleth map\n\n\n::: {.cell fig.asp='0.68'}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\ntm_shape(hunan_GDPPC) +\n  tm_fill(\"GDPPC\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"GDPPC\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Distribution of GDP per capita by district, Hunan Province\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex2_files/figure-html/unnamed-chunk-5-1.png){width=1344}\n:::\n:::\n\n\n#### 1.1 Identifying contiguity neighbours using Queen's method\n\nWe can see the neighbours list in the first column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnb_queen <- hunan_GDPPC %>% \n  mutate(nb = st_contiguity(geometry),\n         .before = 1)\n\nkable(head(nb_queen,3))\n```\n\n::: {.cell-output-display}\n|nb                |NAME_2  |  ID_3|NAME_3  |ENGTYPE_3   |County  | GDPPC|geometry                       |\n|:-----------------|:-------|-----:|:-------|:-----------|:-------|-----:|:------------------------------|\n|2, 3, 4, 57, 85   |Changde | 21098|Anxiang |County      |Anxiang | 23667|POLYGON ((112.0625 29.75523... |\n|1, 57, 58, 78, 85 |Changde | 21100|Hanshou |County      |Hanshou | 20981|POLYGON ((112.2288 29.11684... |\n|1, 4, 5, 85       |Changde | 21101|Jinshi  |County City |Jinshi  | 34592|POLYGON ((111.8927 29.6013,... |\n:::\n:::\n\n\n**Identifying higher order neighbors**\n\nTo identify higher order contiguity nb, we can use `st_nb_lag_cumul()` should be used as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnb2_queen <-  hunan_GDPPC %>% \n  mutate(nb = st_contiguity(geometry),\n         nb2 = st_nb_lag_cumul(nb, 2),\n         .before = 1)\n\nkable(head(nb2_queen,3))\n```\n\n::: {.cell-output-display}\n|nb                |nb2                                                             |NAME_2  |  ID_3|NAME_3  |ENGTYPE_3   |County  | GDPPC|geometry                       |\n|:-----------------|:---------------------------------------------------------------|:-------|-----:|:-------|:-----------|:-------|-----:|:------------------------------|\n|2, 3, 4, 57, 85   |2, 3, 4, 5, 6, 32, 56, 57, 58, 64, 69, 75, 76, 78, 85           |Changde | 21098|Anxiang |County      |Anxiang | 23667|POLYGON ((112.0625 29.75523... |\n|1, 57, 58, 78, 85 |1, 3, 4, 5, 6, 8, 9, 32, 56, 57, 58, 64, 68, 69, 75, 76, 78, 85 |Changde | 21100|Hanshou |County      |Hanshou | 20981|POLYGON ((112.2288 29.11684... |\n|1, 4, 5, 85       |1, 2, 4, 5, 6, 32, 56, 57, 69, 75, 78, 85                       |Changde | 21101|Jinshi  |County City |Jinshi  | 34592|POLYGON ((111.8927 29.6013,... |\n:::\n:::\n\n\n#### **1.2 Deriving Contiguity Spatial Weights**\n\nDeriving Contiguity spatial weights using `sfdep` (wrapper of spdep: allows for mutate using spatial functions) instead of `spdep` library.\n\nIn the code chunk below [`st_contiguity()`](https://sfdep.josiahparry.com/reference/st_contiguity.html) is used to derive a contiguity neighbour list by using Queen's method.\n\nUse two functions from `spdep` library, use less objects.\n\nNote: '*nb*' and '*wt*' fields contain lists.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q <- hunan_GDPPC %>% \n  mutate(nb = st_contiguity(geometry), # calculate by queen default\n         wt = st_weights(nb,           # calculate row-stand spatial weight matrix\n                         style='W'),\n         .before =1)   # put these two columns at front of wm_q sf df\n\nclass(wm_q)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"sf\"         \"data.frame\"\n```\n:::\n:::\n\n\n#### 1.3 Distance based-weights\n\nThere are three popularly used distance-based spatial weights, they are:\n\n-   fixed distance weights,\n\n-   adaptive distance weights, and\n\n-   inverse distance weights (IDW).\n\n##### 1.3.1 **Deriving fixed distance weights**\n\nTo determine the upper limit for distance band:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngeo <- sf::st_geometry(hunan_GDPPC)\nnb <- st_knn(geo, k=1, longlat = TRUE)\n\ndists <- unlist(st_nb_dists(geo, nb))\n```\n:::\n\n\n> -   [`st_nb_dists()`](https://sfdep.josiahparry.com/reference/st_nb_dists.html) of sfdep is used to calculate the nearest neighbour distance. The output is a list of distances for each observation's neighbors list.\n>\n> -   [`unlist()`](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/unlist) of Base R is then used to return the output as a vector so that the summary statistics of the nearest neighbour distances can be derived.\n\nDerieve summary statistics of nearest nb distances\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(dists)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  21.56   29.11   36.89   37.34   43.21   65.80 \n```\n:::\n:::\n\n\nThe maximum nearest neighbour distance is 65.8 km, thus we will use threshold value of 66km to ensure each spatial unit as least one neighbour.\n\nCompute the fixed distance weights by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_fd <- hunan_GDPPC %>%\n  mutate(nb = st_dist_band(geometry,\n                           upper = 66),\n               wt = st_weights(nb,\n                               style = 'W'),\n               .before = 1)\n```\n:::\n\n\n-   [`st_dists_band()`](https://sfdep.josiahparry.com/reference/st_dist_band.html) of sfdep is used to identify neighbors based on a distance band (i.e. 66km). The output is a list of neighbours (i.e. nb).\n\n-   [`st_weights()`](https://sfdep.josiahparry.com/reference/st_weights.html) is then used to calculate polygon spatial weights of the nb list. Note that:\n\n    -   the default `style` argument is set to \"W\" for row standardized weights, and\n\n    -   the default `allow_zero` is set to TRUE, assigns zero as lagged value to zone without neighbors.\n\n##### \n\n1.3.2 **Deriving adaptive distance weights**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_ad <- hunan_GDPPC %>% \n  mutate(nb = st_knn(geometry,\n                     k=8),\n         wt = st_weights(nb),  # refers to `nb` generated above light\n               .before = 1)\n```\n:::\n\n\n-   [`st_knn()`](https://sfdep.josiahparry.com/reference/st_knn.html) of sfdep is used to identify neighbors based on k (i.e. k = 8 indicates the nearest eight neighbours). The output is a list of neighbours (i.e. nb).\n\n-   [`st_weights()`](https://sfdep.josiahparry.com/reference/st_weights.html) is then used to calculate polygon spatial weights of the nb list. Note that:\n\n    -   the default `style` argument is set to \"W\" for row standardized weights, and\n\n    -   the default `allow_zero` is set to TRUE, assigns zero as lagged value to zone without neighbors.\n\n##### **1.3.3 Calculate inverse distance weights**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_idw <- hunan_GDPPC %>%\n  mutate(nb = st_contiguity(geometry),\n         wts = st_inverse_distance(nb, geometry,\n                                   scale = 1,\n                                   alpha = 1),\n         .before = 1)\n```\n:::\n\n\n-   [`st_contiguity()`](https://sfdep.josiahparry.com/reference/st_contiguity.html) of sfdep is used to identify the neighbours by using contiguity criteria. The output is a list of neighbours (i.e. nb).\n\n-   [`st_inverse_distance()`](https://sfdep.josiahparry.com/reference/st_inverse_distance.html) is then used to calculate inverse distance weights of neighbours on the nb list.\n\n### Part 2 : Performing Global and Local autocorrelation of spatial association using sfdep methods\n\nAfter deriving the spatial weights matrix `wm_q` (class: 'sf' and 'df' ) ('nb' and 'wt') using the Queen's method, we can calculate\n\n#### 2.1 C**omputing Global Moran' I (No simulation)**\n\nUsing the sfdep package, it can be calculated using the code chunk below\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_test(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tMoran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n```\n:::\n:::\n\n\n-   The default for `alternative` argument is \"two.sided\". Other supported arguments are \"greater\" or \"less\". randomization, and\n\n-   By default the `randomization` argument is **TRUE**. If FALSE, under the assumption of normality.\n\n#### 2.2 C**omputing Global Moran' I (Simulation)**\n\nMonte carlo simulation should be used to perform the statistical test. For **sfdep**, it is supported by [`globel_moran_perm()`](https://sfdep.josiahparry.com/reference/global_moran_perm.html). Do not assume normality.\n\nIt is always a good practice to use `set.seed()` before performing simulation. This is to ensure that the computation is reproducible.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_perm(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt,\n                  nsim = 99)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.30075, observed rank = 100, p-value < 2.2e-16\nalternative hypothesis: two.sided\n```\n:::\n:::\n\n\nSince p-value is smaller than 0.05 , we can reject the null hypothesis that the spatial patterns spatial independent. Because the Moran's I statistics is **greater than 0**. We can infer the spatial distribution shows sign of **clustering**.\n\n#### 2.3 Local Moran using sfdep.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa <- wm_q %>% \n  mutate(local_moran = local_moran(\n    GDPPC, nb,wt, nsim=99),   # straightaway use simulation instead of typical p-value\n    .before=1) %>%\n  unnest(local_moran)  # due to local_moran() function it produces output in a group object. to see it, need to unnest()\n```\n:::\n\n\nThe output of local_moran() is a sf df containing the columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(lisa)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"ii\"           \"eii\"          \"var_ii\"       \"z_ii\"         \"p_ii\"        \n [6] \"p_ii_sim\"     \"p_folded_sim\" \"skewness\"     \"kurtosis\"     \"mean\"        \n[11] \"median\"       \"pysal\"        \"nb\"           \"wt\"           \"NAME_2\"      \n[16] \"ID_3\"         \"NAME_3\"       \"ENGTYPE_3\"    \"County\"       \"GDPPC\"       \n[21] \"geometry\"    \n```\n:::\n:::\n\n\n-   ii: local moran statistic\n\n-   eii: expectation of local moran statistic; for localmoran_permthe permutation sample means\n\n-   var_ii: variance of local moran statistic; for localmoran_permthe permutation sample standard deviations\n\n-   z_ii: p-value\n\n-   skewness: For `localmoran_perm`, the output of e1071::skewness() for the permutation samples underlying the standard deviates\n\n-   kurtosis: For `localmoran_perm`, the output of e1071::kurtosis() for the permutation samples underlying the standard deviates.\n\nPrint the `lisa` sf df.\n\nThe quadrants (HH, LH, HL, LL) is automatically calculated for us.\n\nUsually we use mean for the Moran-Scatterplot. However, if the data GDPPC is **highly skewed**, use **median** instead of mean.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkable(head(lisa,3))\n```\n\n::: {.cell-output-display}\n|         ii|        eii|    var_ii|       z_ii|      p_ii| p_ii_sim| p_folded_sim|   skewness|  kurtosis|mean     |median    |pysal    |nb                |wt                      |NAME_2  |  ID_3|NAME_3  |ENGTYPE_3   |County  | GDPPC|geometry                       |\n|----------:|----------:|---------:|----------:|---------:|--------:|------------:|----------:|---------:|:--------|:---------|:--------|:-----------------|:-----------------------|:-------|-----:|:-------|:-----------|:-------|-----:|:------------------------------|\n| -0.0014685|  0.0017692| 0.0004180| -0.1583623| 0.8741713|     0.82|         0.41| -0.8122108| 0.6518754|Low-High |High-High |Low-High |2, 3, 4, 57, 85   |0.2, 0.2, 0.2, 0.2, 0.2 |Changde | 21098|Anxiang |County      |Anxiang | 23667|POLYGON ((112.0625 29.75523... |\n|  0.0258782|  0.0064149| 0.0105104|  0.1898479| 0.8494283|     0.96|         0.48| -1.0905447| 1.8891775|Low-Low  |High-High |Low-Low  |1, 57, 58, 78, 85 |0.2, 0.2, 0.2, 0.2, 0.2 |Changde | 21100|Hanshou |County      |Hanshou | 20981|POLYGON ((112.2288 29.11684... |\n| -0.0119876| -0.0374069| 0.1020555|  0.0795690| 0.9365800|     0.76|         0.38|  0.8239085| 0.0460951|High-Low |High-High |High-Low |1, 4, 5, 85       |0.25, 0.25, 0.25, 0.25  |Changde | 21101|Jinshi  |County City |Jinshi  | 34592|POLYGON ((111.8927 29.6013,... |\n:::\n:::\n\n\n#### 2.4 **Visualising local Moran's I**\n\nUse tmap core functions to build a choropleth, using the local moran's I (ii) field\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n\nmap1 <- tm_shape(lisa) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of GDPPC\",\n            main.title.size = 0.8)\n\nmap1\n```\n\n::: {.cell-output-display}\n![](In-class_Ex2_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n#### 2.5 **Visualising the p-value of local Moran's I**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n\nmap2<-tm_shape(lisa) +\n  tm_fill(\"p_ii_sim\",\n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\",\n          title = \"local Moran's I p-values\") + \n  tm_borders(alpha = 0.5) +\n   tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 0.8)\n\nmap2\n```\n\n::: {.cell-output-display}\n![](In-class_Ex2_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\nPutting both maps side by side\n\n\n::: {.cell fig.asp='0.68'}\n\n```{.r .cell-code}\ntmap_arrange(map1, map2, asp=1, ncol = 2)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex2_files/figure-html/unnamed-chunk-22-1.png){width=1344}\n:::\n:::\n\n\n#### 2.6 Visualising LISA map\n\nLISA map is a categorical map showing outliers and clusters. There are two types of outliers namely: High-Low and Low-High outliers. Likewise, there are two type of clusters namely: High-High and Low-Low cluaters. In fact, LISA map is an interpreted map by combining local Moran's I of geographical areas and their respective p-values.\n\nIn lisa sf data.frame, we can find three fields contain the LISA categories. They are ***mean*****, *median* and *pysal*.** In general, classification in ***mean*** will be used as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(lisa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex2_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa_sig <- lisa  %>%\n  filter(p_ii < 0.05)  # lpot only sig region at 95% Conf.lvl\ntmap_mode(\"plot\")\n\ntm_shape(lisa_sig) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.4)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex2_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n::: {.cell fig.asp='0.68'}\n\n```{.r .cell-code}\nlisa_sig <- lisa  %>%\n  filter(p_ii < 0.05)\ntmap_mode(\"plot\")\ntm_shape(lisa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_sig) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.4)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex2_files/figure-html/unnamed-chunk-25-1.png){width=1344}\n:::\n:::\n\n\n#### \n\nPart 3: **Hot Spot and Cold Spot Area Analysis (HCSA)**\n\nHCSA uses spatial weights to identify locations of statistically significant hot spots and cold spots in an spatially weighted attribute that are in proximity to one another based on a calculated distance. The analysis groups features when similar high (hot) or low (cold) values are found in a cluster. The polygon features usually represent administration boundaries or a custom grid structure.\n\n#### \n\n3.1 Computing Local Gi\\* statistics\n\nUsing the inverse distance spatial weights matrix `wm_idw` derived in section 1.3.3, we can use the `local_gstar_perm()` of sfdep library to compute Gi\\* values of each region stored in HCSA, class: 'sf', tbl_df', 'tbl', 'df'.\n\nIt contains not just the Gi\\* values based on simulated data but also the p-values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHCSA <- wm_idw %>% \n  mutate(local_Gi = local_gstar_perm(\n    GDPPC, nb, wt, nsim=99),   # these 3 var are found in wm_idw\n    .before=1) %>% \n  unnest(local_Gi)\n\nHCSA\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 88 features and 16 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n# A tibble: 88 × 17\n   gi_star   e_gi    var_gi p_value   p_sim p_folded_sim skewness kurtosis nb   \n     <dbl>  <dbl>     <dbl>   <dbl>   <dbl>        <dbl>    <dbl>    <dbl> <nb> \n 1  0.0416 0.0114   6.41e-6  0.0493 9.61e-1         0.7      0.35    0.875 <int>\n 2 -0.333  0.0106   3.84e-6 -0.0941 9.25e-1         1        0.5     0.661 <int>\n 3  0.281  0.0126   7.51e-6 -0.151  8.80e-1         0.9      0.45    0.640 <int>\n 4  0.411  0.0118   9.22e-6  0.264  7.92e-1         0.6      0.3     0.853 <int>\n 5  0.387  0.0115   9.56e-6  0.339  7.34e-1         0.62     0.31    1.07  <int>\n 6 -0.368  0.0118   5.91e-6 -0.583  5.60e-1         0.72     0.36    0.594 <int>\n 7  3.56   0.0151   7.31e-6  2.61   9.01e-3         0.06     0.03    1.09  <int>\n 8  2.52   0.0136   6.14e-6  1.49   1.35e-1         0.2      0.1     1.12  <int>\n 9  4.56   0.0144   5.84e-6  3.53   4.17e-4         0.04     0.02    1.23  <int>\n10  1.16   0.0104   3.70e-6  1.82   6.86e-2         0.12     0.06    0.416 <int>\n# ℹ 78 more rows\n# ℹ 8 more variables: wts <list>, NAME_2 <chr>, ID_3 <int>, NAME_3 <chr>,\n#   ENGTYPE_3 <chr>, County <chr>, GDPPC <dbl>, geometry <POLYGON [°]>\n```\n:::\n:::\n\n\n#### 3.3 **Visualising Local Gi\\* (sig and not-sig)**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n\nmap1 <- tm_shape(HCSA) +\n  tm_fill(\"gi_star\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8))+\n  tm_layout(main.title = \"Gi* of GDPPC\",\n            main.title.size = 0.8)\n\nmap1\n```\n\n::: {.cell-output-display}\n![](In-class_Ex2_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n#### 3.4 **Visualising p-value of HCSA (Gi\\*)**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n\nmap2<- tm_shape(HCSA) +\n  tm_fill(\"p_sim\",\n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\",\n          title = \"local Gi* sim p-values\") + \n  tm_borders(alpha = 0.5)+\n  tm_layout(main.title = \"p-value of Gi*\",\n            main.title.size = 0.8)\n\nmap2\n```\n\n::: {.cell-output-display}\n![](In-class_Ex2_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\nPutting both maps side by side\n\n\n::: {.cell fig.asp='0.68'}\n\n```{.r .cell-code}\ntmap_arrange(map1, map2, ncol = 2)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex2_files/figure-html/unnamed-chunk-29-1.png){width=1344}\n:::\n:::\n\n\n#### \n\n3.5 **Visualising hot spot and cold spot areas**\n\nTo plot only the significant (i.e. p-values less than 0.05) hot spot and cold spot areas by using appropriate tmap functions as shown below\n\n\n::: {.cell fig.asp='0.68'}\n\n```{.r .cell-code}\nHCSA_sig <- HCSA  %>%\n  filter(p_sim < 0.05)\ntmap_mode(\"plot\")\ntm_shape(HCSA) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(HCSA_sig) +\n  tm_fill(\"gi_star\") + \n  tm_borders(alpha = 0.4)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex2_files/figure-html/unnamed-chunk-30-1.png){width=1344}\n:::\n:::\n\n\n### Part 4: Emerging hotspots analysis\n\nIn this section, we will load in additional set of data. Requires time series data to perform emerging hot spots analysis. The Hunan_GDPPC.csv file contains 10 years worth of GDPPC for each region.\n\nThe GDPPC has to be in NUMERICAL field. The time field year can be in numerical /pct or date format.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGDPPC <- read_csv('data/aspatial/Hunan_GDPPC.csv')\n```\n:::\n\n\n#### 4.1. Creating a Time series cube\n\nUsing spacetime() of sfdep. Creating OLAP cube on the fly.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGDPPC_st <- spacetime(GDPPC, hunan,\n                      .loc_col = 'County',  #location column\n                      .time_col = 'Year')    # time column\n\nclass(GDPPC_st)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"spacetime\"   \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\" \n```\n:::\n\n```{.r .cell-code}\nstr(GDPPC_st)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nspacetim [1,496 × 3] (S3: spacetime/spec_tbl_df/tbl_df/tbl/data.frame)\n $ Year  : num [1:1496] 2005 2005 2005 2005 2005 ...\n $ County: chr [1:1496] \"Longshan\" \"Changsha\" \"Wangcheng\" \"Ningxiang\" ...\n $ GDPPC : num [1:1496] 3469 24612 14659 11687 13406 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   Year = col_double(),\n  ..   County = col_character(),\n  ..   GDPPC = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n - attr(*, \"active\")= chr \"data\"\n - attr(*, \"data\")= spc_tbl_ [1,496 × 3] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n  ..$ Year  : num [1:1496] 2005 2005 2005 2005 2005 ...\n  ..$ County: chr [1:1496] \"Longshan\" \"Changsha\" \"Wangcheng\" \"Ningxiang\" ...\n  ..$ GDPPC : num [1:1496] 3469 24612 14659 11687 13406 ...\n  ..- attr(*, \"spec\")=\n  .. .. cols(\n  .. ..   Year = col_double(),\n  .. ..   County = col_character(),\n  .. ..   GDPPC = col_double()\n  .. .. )\n  ..- attr(*, \"problems\")=<externalptr> \n - attr(*, \"geometry\")=Classes 'sf' and 'data.frame':\t88 obs. of  8 variables:\n  ..$ NAME_2    : chr [1:88] \"Changde\" \"Changde\" \"Changde\" \"Changde\" ...\n  ..$ ID_3      : int [1:88] 21098 21100 21101 21102 21103 21104 21109 21110 21111 21112 ...\n  ..$ NAME_3    : chr [1:88] \"Anxiang\" \"Hanshou\" \"Jinshi\" \"Li\" ...\n  ..$ ENGTYPE_3 : chr [1:88] \"County\" \"County\" \"County City\" \"County\" ...\n  ..$ Shape_Leng: num [1:88] 1.87 2.36 1.43 3.47 2.29 ...\n  ..$ Shape_Area: num [1:88] 0.101 0.2 0.053 0.189 0.115 ...\n  ..$ County    : chr [1:88] \"Anxiang\" \"Hanshou\" \"Jinshi\" \"Li\" ...\n  ..$ geometry  :sfc_POLYGON of length 88; first list element: List of 1\n  .. ..$ : num [1:427, 1:2] 112 112 112 112 112 ...\n  .. ..- attr(*, \"class\")= chr [1:3] \"XY\" \"POLYGON\" \"sfg\"\n  ..- attr(*, \"sf_column\")= chr \"geometry\"\n  ..- attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA NA NA NA NA NA\n  .. ..- attr(*, \"names\")= chr [1:7] \"NAME_2\" \"ID_3\" \"NAME_3\" \"ENGTYPE_3\" ...\n - attr(*, \"loc_col\")= chr \"County\"\n - attr(*, \"locs\")= chr [1:88] \"Anxiang\" \"Hanshou\" \"Jinshi\" \"Li\" ...\n - attr(*, \"n_locs\")= int 88\n - attr(*, \"time_col\")= chr \"Year\"\n - attr(*, \"times\")= num [1:17] 2005 2006 2007 2008 2009 ...\n - attr(*, \"n_times\")= int 17\n```\n:::\n:::\n\n\nNote: GDPPC_st looks identical to GDPPC but they are not the same class type. To verify, use the code below\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis_spacetime_cube(GDPPC_st)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n#### 4.2 Computing Gi\\*\n\n##### 4.2.1 Derive the spatial weights (need to be distance matrix)\n\nThe code chunk below will identify nb and derive a [*space-time*]{.underline} inverse weights distance weights. The earlier derived were spatial weights matrix, this time round involves time dimension too.\n\nNote that this dataset now has neighbors and weights for **each time-slice**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGDPPC_nb <- GDPPC_st %>% \n  activate('geometry') %>% \n  mutate(nb= include_self(st_contiguity(geometry)),  # need to add gemetry line to ask function to look at each time layer 48min\n         wt = st_inverse_distance(nb, geometry,\n                                  scale =1,\n                                  alpha =1),\n         .before =1) %>% \n  set_nbs('nb') %>% \n  set_wts('wt')\n\nclass(GDPPC_nb)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"spacetime\"  \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n:::\n:::\n\n\n::: callout-note\n-   `activate()` of dplyr package is used to activate the geometry context\n\n-   `mutate()` of dplyr package is used to create two new columns *nb* and *wt*.\n\n-   Then we will activate the data context again and copy over the nb and wt columns to each time-slice using `set_nbs()` and `set_wts()`\n\n    -   row order is very important so do not rearrange the observations after using `set_nbs()` or `set_wts()`.\n:::\n\nExplaining why need to activate geometry, show table later\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(GDPPC_nb)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n   Year County  GDPPC nb        wt       \n  <dbl> <chr>   <dbl> <list>    <list>   \n1  2005 Anxiang  8184 <int [6]> <dbl [6]>\n2  2005 Hanshou  6560 <int [6]> <dbl [6]>\n3  2005 Jinshi   9956 <int [5]> <dbl [5]>\n4  2005 Li       8394 <int [5]> <dbl [5]>\n5  2005 Linli    8850 <int [5]> <dbl [5]>\n6  2005 Shimen   9244 <int [6]> <dbl [6]>\n```\n:::\n:::\n\n\n::: callout-note\nGDPPC_st : space-time cube\n\nGDPPC_nb: space-time weights matrixs\n:::\n\n##### 4.2.2 Computing GI\\*\n\nWe can use the time-space weights matrix `GDPPC_nb` to manually calculate the local Gi\\* for each location.\n\n-   group by *Year* and using `local_gstar_perm()` of sfdep package.\n\n-   use `unnest()` to unnest *gi_star* column of the newly created *gi_stars* data.frame. THe output of this function is grouped and thus we cannot see it unless unnest().\n\n    `gi_stars` df has 1496 rows instead of 88 because we have ten years worth of data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngi_stars <- GDPPC_nb %>% \n  group_by(Year) %>%   # look at a time slice, for all locations\n  mutate(gi_star = local_gstar_perm(\n  GDPPC, nb, wt)) %>% \n  tidyr::unnest(gi_star)\n\ngi_stars\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,496 × 13\n# Groups:   Year [17]\n    Year County    GDPPC nb        wt    gi_star   e_gi  var_gi  p_value   p_sim\n   <dbl> <chr>     <dbl> <list>    <lis>   <dbl>  <dbl>   <dbl>    <dbl>   <dbl>\n 1  2005 Anxiang    8184 <int [6]> <dbl>   0.398 0.0115 2.69e-6  0.382   7.02e-1\n 2  2005 Hanshou    6560 <int [6]> <dbl>  -0.237 0.0109 2.64e-6  0.00199 9.98e-1\n 3  2005 Jinshi     9956 <int [5]> <dbl>   1.05  0.0126 3.33e-6  0.507   6.12e-1\n 4  2005 Li         8394 <int [5]> <dbl>   0.966 0.0117 3.24e-6  0.920   3.57e-1\n 5  2005 Linli      8850 <int [5]> <dbl>   1.05  0.0120 3.23e-6  0.885   3.76e-1\n 6  2005 Shimen     9244 <int [6]> <dbl>   0.210 0.0121 2.99e-6 -0.215   8.30e-1\n 7  2005 Liuyang   13406 <int [5]> <dbl>   3.91  0.0142 2.52e-6  3.36    7.69e-4\n 8  2005 Ningxiang 11687 <int [8]> <dbl>   1.61  0.0127 2.30e-6  0.895   3.71e-1\n 9  2005 Wangcheng 14659 <int [7]> <dbl>   3.88  0.0140 2.49e-6  2.73    6.28e-3\n10  2005 Anren      7423 <int [9]> <dbl>   1.67  0.0113 2.14e-6  1.87    6.21e-2\n# ℹ 1,486 more rows\n# ℹ 3 more variables: p_folded_sim <dbl>, skewness <dbl>, kurtosis <dbl>\n```\n:::\n\n```{.r .cell-code}\nstr(gi_stars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ngropd_df [1,496 × 13] (S3: grouped_df/tbl_df/tbl/data.frame)\n $ Year        : num [1:1496] 2005 2005 2005 2005 2005 ...\n $ County      : chr [1:1496] \"Anxiang\" \"Hanshou\" \"Jinshi\" \"Li\" ...\n $ GDPPC       : num [1:1496] 8184 6560 9956 8394 8850 ...\n $ nb          :List of 1496\n  ..$ : int [1:6] 1 2 3 4 57 85\n  ..$ : int [1:6] 1 2 57 58 78 85\n  ..$ : int [1:5] 1 3 4 5 85\n  ..$ : int [1:5] 1 3 4 5 6\n  ..$ : int [1:5] 3 4 5 6 85\n  ..$ : int [1:6] 4 5 6 69 75 85\n  ..$ : int [1:5] 7 67 71 74 84\n  ..$ : int [1:8] 8 9 46 47 56 78 80 86\n  ..$ : int [1:7] 8 9 66 68 78 84 86\n  ..$ : int [1:9] 10 16 17 19 20 22 70 72 73\n  ..$ : int [1:4] 11 14 17 72\n  ..$ : int [1:6] 12 13 60 61 63 83\n  ..$ : int [1:5] 12 13 15 60 83\n  ..$ : int [1:4] 11 14 15 17\n  ..$ : int [1:5] 13 14 15 17 83\n  ..$ : int [1:6] 10 16 17 22 72 83\n  ..$ : int [1:8] 10 11 14 15 16 17 72 83\n  ..$ : int [1:6] 18 20 22 23 77 83\n  ..$ : int [1:7] 10 19 20 21 73 74 86\n  ..$ : int [1:8] 10 18 19 20 21 22 23 82\n  ..$ : int [1:6] 19 20 21 35 82 86\n  ..$ : int [1:6] 10 16 18 20 22 83\n  ..$ : int [1:8] 18 20 23 38 41 77 79 82\n  ..$ : int [1:6] 24 25 28 31 32 54\n  ..$ : int [1:6] 24 25 28 31 33 81\n  ..$ : int [1:5] 26 27 33 42 81\n  ..$ : int [1:4] 26 27 29 42\n  ..$ : int [1:6] 24 25 28 33 49 54\n  ..$ : int [1:4] 27 29 37 42\n  ..$ : int [1:2] 30 33\n  ..$ : int [1:9] 24 25 31 32 36 39 40 56 81\n  ..$ : int [1:9] 24 31 32 50 54 55 56 75 85\n  ..$ : int [1:6] 25 26 28 30 33 81\n  ..$ : int [1:4] 34 36 45 80\n  ..$ : int [1:7] 21 35 41 47 80 82 86\n  ..$ : int [1:7] 31 34 36 40 45 56 80\n  ..$ : int [1:5] 29 37 42 43 44\n  ..$ : int [1:5] 23 38 44 77 79\n  ..$ : int [1:6] 31 39 40 42 43 81\n  ..$ : int [1:7] 31 36 39 40 43 45 79\n  ..$ : int [1:7] 23 35 41 45 79 80 82\n  ..$ : int [1:8] 26 27 29 37 39 42 43 81\n  ..$ : int [1:7] 37 39 40 42 43 44 79\n  ..$ : int [1:5] 37 38 43 44 79\n  ..$ : int [1:7] 34 36 40 41 45 79 80\n  ..$ : int [1:4] 8 46 47 86\n  ..$ : int [1:6] 8 35 46 47 80 86\n  ..$ : int [1:6] 48 50 51 52 53 55\n  ..$ : int [1:5] 28 49 51 52 54\n  ..$ : int [1:6] 32 48 50 52 54 55\n  ..$ : int [1:4] 48 49 51 52\n  ..$ : int [1:6] 48 49 50 51 52 54\n  ..$ : int [1:4] 48 53 55 75\n  ..$ : int [1:7] 24 28 32 49 50 52 54\n  ..$ : int [1:6] 32 48 50 53 55 75\n  ..$ : int [1:8] 8 31 32 36 56 78 80 85\n  ..$ : int [1:7] 1 2 57 58 64 76 85\n  ..$ : int [1:6] 2 57 58 68 76 78\n  ..$ : int [1:5] 59 60 61 87 88\n  ..$ : int [1:5] 12 13 59 60 61\n  ..$ : int [1:8] 12 59 60 61 62 63 77 87\n  ..$ : int [1:4] 61 62 77 87\n  ..$ : int [1:5] 12 61 63 77 83\n  ..$ : int [1:3] 57 64 76\n  ..$ : int [1:2] 65 76\n  ..$ : int [1:6] 9 66 67 68 76 84\n  ..$ : int [1:5] 7 66 67 76 84\n  ..$ : int [1:6] 9 58 66 68 76 78\n  ..$ : int [1:4] 6 69 75 85\n  ..$ : int [1:4] 10 70 72 73\n  ..$ : int [1:4] 7 71 73 74\n  ..$ : int [1:6] 10 11 16 17 70 72\n  ..$ : int [1:6] 10 19 70 71 73 74\n  ..$ : int [1:7] 7 19 71 73 74 84 86\n  ..$ : int [1:7] 6 32 53 55 69 75 85\n  ..$ : int [1:8] 57 58 64 65 66 67 68 76\n  ..$ : int [1:8] 18 23 38 61 62 63 77 83\n  ..$ : int [1:8] 2 8 9 56 58 68 78 85\n  ..$ : int [1:8] 23 38 40 41 43 44 45 79\n  ..$ : int [1:9] 8 34 35 36 41 45 47 56 80\n  ..$ : int [1:7] 25 26 31 33 39 42 81\n  ..$ : int [1:6] 20 21 23 35 41 82\n  ..$ : int [1:10] 12 13 15 16 17 18 22 63 77 83\n  ..$ : int [1:7] 7 9 66 67 74 84 86\n  ..$ : int [1:12] 1 2 3 5 6 32 56 57 69 75 ...\n  ..$ : int [1:10] 8 9 19 21 35 46 47 74 84 86\n  ..$ : int [1:5] 59 61 62 87 88\n  ..$ : int [1:3] 59 87 88\n  ..$ : int [1:6] 1 2 3 4 57 85\n  ..$ : int [1:6] 1 2 57 58 78 85\n  ..$ : int [1:5] 1 3 4 5 85\n  ..$ : int [1:5] 1 3 4 5 6\n  ..$ : int [1:5] 3 4 5 6 85\n  ..$ : int [1:6] 4 5 6 69 75 85\n  ..$ : int [1:5] 7 67 71 74 84\n  ..$ : int [1:8] 8 9 46 47 56 78 80 86\n  ..$ : int [1:7] 8 9 66 68 78 84 86\n  ..$ : int [1:9] 10 16 17 19 20 22 70 72 73\n  ..$ : int [1:4] 11 14 17 72\n  .. [list output truncated]\n  ..- attr(*, \"class\")= chr [1:2] \"list\" \"nb\"\n $ wt          :List of 1496\n  ..$ : num [1:6] 0 0.0153 0.0352 0.0218 0.0284 ...\n  ..$ : num [1:6] 0.0153 0 0.016 0.0191 0.0233 ...\n  ..$ : num [1:5] 0.0352 0 0.0458 0.0412 0.0121\n  ..$ : num [1:5] 0.0218 0.0458 0 0.0464 0.0159\n  ..$ : num [1:5] 0.0412 0.0464 0 0.019 0.0135\n  ..$ : num [1:6] 0.0159 0.019 0 0.0271 0.0114 ...\n  ..$ : num [1:5] 0 0.0162 0.0154 0.0113 0.0184\n  ..$ : num [1:8] 0 0.0193 0.0268 0.0215 0.0108 ...\n  ..$ : num [1:7] 0.0193 0 0.0165 0.018 0.0147 ...\n  ..$ : num [1:9] 0 0.0274 0.0139 0.0146 0.0216 ...\n  ..$ : num [1:4] 0 0.0234 0.0236 0.0239\n  ..$ : num [1:6] 0 0.0288 0.0271 0.0251 0.0293 ...\n  ..$ : num [1:5] 0.0288 0 0.0449 0.0283 0.0175\n  ..$ : num [1:4] 0.02339 0 0.00972 0.0204\n  ..$ : num [1:5] 0.04488 0.00972 0 0.01052 0.01695\n  ..$ : num [1:6] 0.0274 0 0.0273 0.0233 0.019 ...\n  ..$ : num [1:8] 0.0139 0.0236 0.0204 0.0105 0.0273 ...\n  ..$ : num [1:6] 0 0.0148 0.0188 0.018 0.018 ...\n  ..$ : num [1:7] 0.0146 0 0.0253 0.0454 0.0225 ...\n  ..$ : num [1:8] 0.0216 0.0148 0.0253 0 0.0194 ...\n  ..$ : num [1:6] 0.0454 0.0194 0 0.0147 0.0227 ...\n  ..$ : num [1:6] 0.0242 0.0233 0.0188 0.0255 0 ...\n  ..$ : num [1:8] 0.018 0.0121 0 0.0142 0.0188 ...\n  ..$ : num [1:6] 0 0.0244 0.0185 0.0228 0.012 ...\n  ..$ : num [1:6] 0.0244 0 0.0172 0.019 0.0159 ...\n  ..$ : num [1:5] 0 0.022 0.0187 0.0199 0.0213\n  ..$ : num [1:4] 0.022 0 0.0253 0.0158\n  ..$ : num [1:6] 0.0185 0.0172 0 0.0205 0.0343 ...\n  ..$ : num [1:4] 0.0253 0 0.0166 0.0127\n  ..$ : num [1:2] 0 0.0237\n  ..$ : num [1:9] 0.0228 0.019 0 0.0119 0.0157 ...\n  ..$ : num [1:9] 0.012 0.0119 0 0.0164 0.014 ...\n  ..$ : num [1:6] 0.0159 0.0187 0.0205 0.0237 0 ...\n  ..$ : num [1:4] 0 0.0311 0.039 0.03\n  ..$ : num [1:7] 0.0147 0 0.022 0.0255 0.0218 ...\n  ..$ : num [1:7] 0.0157 0.0311 0 0.015 0.0189 ...\n  ..$ : num [1:5] 0.0166 0 0.0247 0.0149 0.014\n  ..$ : num [1:5] 0.0142 0 0.0205 0.0228 0.0177\n  ..$ : num [1:6] 0.0133 0 0.0237 0.0164 0.0266 ...\n  ..$ : num [1:7] 0.0162 0.015 0.0237 0 0.0153 ...\n  ..$ : num [1:7] 0.0188 0.022 0 0.0236 0.0188 ...\n  ..$ : num [1:8] 0.0199 0.0158 0.0127 0.0247 0.0164 ...\n  ..$ : num [1:7] 0.0149 0.0266 0.0153 0.0201 0 ...\n  ..$ : num [1:5] 0.014 0.0205 0.0316 0 0.0166\n  ..$ : num [1:7] 0.039 0.0189 0.0191 0.0236 0 ...\n  ..$ : num [1:4] 0.0268 0 0.039 0.0267\n  ..$ : num [1:6] 0.0215 0.0255 0.039 0 0.0192 ...\n  ..$ : num [1:6] 0 0.0207 0.0344 0.0214 0.0165 ...\n  ..$ : num [1:5] 0.0343 0 0.0231 0.0266 0.0208\n  ..$ : num [1:6] 0.0164 0.0207 0 0.0269 0.0227 ...\n  ..$ : num [1:4] 0.0344 0.0231 0 0.0306\n  ..$ : num [1:6] 0.0214 0.0266 0.0269 0.0306 0 ...\n  ..$ : num [1:4] 0.0165 0 0.0207 0.0122\n  ..$ : num [1:7] 0.0273 0.0177 0.014 0.0208 0.0227 ...\n  ..$ : num [1:6] 0.0114 0.016 0.0181 0.0207 0 ...\n  ..$ : num [1:8] 0.0108 0.011 0.0131 0.0204 0 ...\n  ..$ : num [1:7] 0.0284 0.016 0 0.0258 0.041 ...\n  ..$ : num [1:6] 0.0191 0.0258 0 0.0309 0.0153 ...\n  ..$ : num [1:5] 0 0.0169 0.0127 0.0162 0.0184\n  ..$ : num [1:5] 0.0271 0.0283 0.0169 0 0.0219\n  ..$ : num [1:8] 0.0251 0.0127 0.0219 0 0.024 ...\n  ..$ : num [1:4] 0.024 0 0.0184 0.0225\n  ..$ : num [1:5] 0.0293 0.0292 0 0.0152 0.0172\n  ..$ : num [1:3] 0.041 0 0.0184\n  ..$ : num [1:2] 0 0.0209\n  ..$ : num [1:6] 0.0165 0 0.0183 0.0344 0.016 ...\n  ..$ : num [1:5] 0.0162 0.0183 0 0.0121 0.0135\n  ..$ : num [1:6] 0.018 0.0309 0.0344 0 0.0154 ...\n  ..$ : num [1:4] 0.0271 0 0.0146 0.0156\n  ..$ : num [1:4] 0.0235 0 0.018 0.0274\n  ..$ : num [1:4] 0.0154 0 0.0158 0.0297\n  ..$ : num [1:6] 0.0178 0.0239 0.019 0.0166 0.018 ...\n  ..$ : num [1:6] 0.0162 0.0225 0.0274 0.0158 0 ...\n  ..$ : num [1:7] 0.0113 0.0175 0.0297 0.0151 0 ...\n  ..$ : num [1:7] 0.0114 0.0108 0.0122 0.0223 0.0146 ...\n  ..$ : num [1:8] 0.0165 0.0153 0.0184 0.0209 0.016 ...\n  ..$ : num [1:8] 0.018 0.0194 0.0228 0.0128 0.0184 ...\n  ..$ : num [1:8] 0.0233 0.0261 0.0147 0.012 0.0164 ...\n  ..$ : num [1:8] 0.013 0.0177 0.0197 0.0188 0.0155 ...\n  ..$ : num [1:9] 0.0152 0.03 0.0218 0.0175 0.0163 ...\n  ..$ : num [1:7] 0.029 0.0213 0.0122 0.0195 0.018 ...\n  ..$ : num [1:6] 0.0171 0.0227 0.0215 0.0197 0.0168 ...\n  ..$ : num [1:10] 0.0207 0.0175 0.017 0.015 0.0159 ...\n  ..$ : num [1:7] 0.0184 0.0302 0.0197 0.0135 0.0134 ...\n  ..$ : num [1:12] 0.0103 0.0159 0.0121 0.0135 0.0108 ...\n  ..$ : num [1:10] 0.0134 0.0161 0.0146 0.0184 0.0142 ...\n  ..$ : num [1:5] 0.0162 0.0209 0.0225 0 0.0233\n  ..$ : num [1:3] 0.0184 0.0233 0\n  ..$ : num [1:6] 0 0.0153 0.0352 0.0218 0.0284 ...\n  ..$ : num [1:6] 0.0153 0 0.016 0.0191 0.0233 ...\n  ..$ : num [1:5] 0.0352 0 0.0458 0.0412 0.0121\n  ..$ : num [1:5] 0.0218 0.0458 0 0.0464 0.0159\n  ..$ : num [1:5] 0.0412 0.0464 0 0.019 0.0135\n  ..$ : num [1:6] 0.0159 0.019 0 0.0271 0.0114 ...\n  ..$ : num [1:5] 0 0.0162 0.0154 0.0113 0.0184\n  ..$ : num [1:8] 0 0.0193 0.0268 0.0215 0.0108 ...\n  ..$ : num [1:7] 0.0193 0 0.0165 0.018 0.0147 ...\n  ..$ : num [1:9] 0 0.0274 0.0139 0.0146 0.0216 ...\n  ..$ : num [1:4] 0 0.0234 0.0236 0.0239\n  .. [list output truncated]\n $ gi_star     : num [1:1496] 0.398 -0.237 1.053 0.966 1.048 ...\n $ e_gi        : num [1:1496] 0.0115 0.0109 0.0126 0.0117 0.012 ...\n $ var_gi      : num [1:1496] 2.69e-06 2.64e-06 3.33e-06 3.24e-06 3.23e-06 ...\n $ p_value     : num [1:1496] 0.3821 0.00199 0.50708 0.92031 0.88485 ...\n $ p_sim       : num [1:1496] 0.702 0.998 0.612 0.357 0.376 ...\n $ p_folded_sim: num [1:1496] 0.608 0.892 0.528 0.308 0.352 0.92 0.008 0.396 0.036 0.08 ...\n $ skewness    : num [1:1496] 0.304 0.446 0.264 0.154 0.176 0.46 0.004 0.198 0.018 0.04 ...\n $ kurtosis    : num [1:1496] 0.893 0.82 0.929 1.185 0.874 ...\n - attr(*, \"groups\")= tibble [17 × 2] (S3: tbl_df/tbl/data.frame)\n  ..$ Year : num [1:17] 2005 2006 2007 2008 2009 ...\n  ..$ .rows: list<int> [1:17] \n  .. ..$ : int [1:88] 1 2 3 4 5 6 7 8 9 10 ...\n  .. ..$ : int [1:88] 89 90 91 92 93 94 95 96 97 98 ...\n  .. ..$ : int [1:88] 177 178 179 180 181 182 183 184 185 186 ...\n  .. ..$ : int [1:88] 265 266 267 268 269 270 271 272 273 274 ...\n  .. ..$ : int [1:88] 353 354 355 356 357 358 359 360 361 362 ...\n  .. ..$ : int [1:88] 441 442 443 444 445 446 447 448 449 450 ...\n  .. ..$ : int [1:88] 529 530 531 532 533 534 535 536 537 538 ...\n  .. ..$ : int [1:88] 617 618 619 620 621 622 623 624 625 626 ...\n  .. ..$ : int [1:88] 705 706 707 708 709 710 711 712 713 714 ...\n  .. ..$ : int [1:88] 793 794 795 796 797 798 799 800 801 802 ...\n  .. ..$ : int [1:88] 881 882 883 884 885 886 887 888 889 890 ...\n  .. ..$ : int [1:88] 969 970 971 972 973 974 975 976 977 978 ...\n  .. ..$ : int [1:88] 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 ...\n  .. ..$ : int [1:88] 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 ...\n  .. ..$ : int [1:88] 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 ...\n  .. ..$ : int [1:88] 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 ...\n  .. ..$ : int [1:88] 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 ...\n  .. ..@ ptype: int(0) \n  ..- attr(*, \".drop\")= logi TRUE\n```\n:::\n:::\n\n\nPrint the `gi_stars` df\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#kable(head(gi_stars,5))\ngi_stars %>% \n  arrange(County) %>% \n  head(5) %>% \n  kable()\n```\n\n::: {.cell-output-display}\n| Year|County | GDPPC|nb                            |wt                                                                                             |    gi_star|      e_gi|  var_gi|    p_value|     p_sim| p_folded_sim| skewness|  kurtosis|\n|----:|:------|-----:|:-----------------------------|:----------------------------------------------------------------------------------------------|----------:|---------:|-------:|----------:|---------:|------------:|--------:|---------:|\n| 2005|Anhua  |  4411|8, 31, 32, 36, 56, 78, 80, 85 |0.01076895, 0.01100041, 0.01312949, 0.02041572, 0.00000000, 0.01199886, 0.01269364, 0.01519702 | -1.1495103| 0.0104408| 2.8e-06| -0.6061786| 0.5443961|        0.632|    0.316| 0.7466849|\n| 2006|Anhua  |  5048|8, 31, 32, 36, 56, 78, 80, 85 |0.01076895, 0.01100041, 0.01312949, 0.02041572, 0.00000000, 0.01199886, 0.01269364, 0.01519702 | -1.2062412| 0.0103340| 2.4e-06| -0.6666373| 0.5050038|        0.532|    0.266| 0.6857186|\n| 2007|Anhua  |  6130|8, 31, 32, 36, 56, 78, 80, 85 |0.01076895, 0.01100041, 0.01312949, 0.02041572, 0.00000000, 0.01199886, 0.01269364, 0.01519702 | -1.0623115| 0.0104177| 2.3e-06| -0.6082854| 0.5429982|        0.580|    0.290| 0.7884648|\n| 2008|Anhua  |  7230|8, 31, 32, 36, 56, 78, 80, 85 |0.01076895, 0.01100041, 0.01312949, 0.02041572, 0.00000000, 0.01199886, 0.01269364, 0.01519702 | -0.9631087| 0.0104526| 3.0e-06| -0.5122872| 0.6084500|        0.696|    0.348| 0.6719202|\n| 2009|Anhua  |  8528|8, 31, 32, 36, 56, 78, 80, 85 |0.01076895, 0.01100041, 0.01312949, 0.02041572, 0.00000000, 0.01199886, 0.01269364, 0.01519702 | -0.7063891| 0.0105453| 4.2e-06| -0.3396736| 0.7341023|        0.848|    0.424| 0.8584200|\n:::\n:::\n\n\n#### 4.3 Mann-Kendall test\n\nWith these yearly Gi\\* measures for each location, we can then evaluate each location for a trend using the Mann-Kendall test. The code chunk below uses Changsha county. Test location by location.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncbg <- gi_stars %>% \n  ungroup() %>%   # we have grouped it earlier by Year\n  filter(County == 'Changsha') %>% \n  select(County, Year, gi_star)\n\ncbg\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 17 × 3\n   County    Year gi_star\n   <chr>    <dbl>   <dbl>\n 1 Changsha  2005    5.03\n 2 Changsha  2006    5.17\n 3 Changsha  2007    5.30\n 4 Changsha  2008    5.60\n 5 Changsha  2009    6.28\n 6 Changsha  2010    5.94\n 7 Changsha  2011    5.75\n 8 Changsha  2012    5.69\n 9 Changsha  2013    5.71\n10 Changsha  2014    5.76\n11 Changsha  2015    6.10\n12 Changsha  2016    6.00\n13 Changsha  2017    6.20\n14 Changsha  2018    6.04\n15 Changsha  2019    6.58\n16 Changsha  2020    5.77\n17 Changsha  2021    5.75\n```\n:::\n:::\n\n\nPlotting using ggplot2() functions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = cbg,\n       aes(x= Year,\n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex2_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n\nUse `ggploty()` from `plotly` library to make the chart interactive.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplotly(ggplot(data = cbg,\n       aes(x= Year,\n           y = gi_star)) +\n  geom_line() +\n  theme_light())\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"plotly html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-9ff13a907ae150a3bad3\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-9ff13a907ae150a3bad3\">{\"x\":{\"data\":[{\"x\":[2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021],\"y\":[5.0282995066289047,5.1692011079782345,5.2958892892912894,5.6039537096873993,6.2788862246004742,5.9357455762937326,5.7508709054298892,5.6942475830114576,5.7085054237054784,5.7608121561733521,6.097127241257188,6.0036547779673146,6.2028053540357906,6.0371816202738318,6.579432171885526,5.7669155664195504,5.7486534794156494],\"text\":[\"Year: 2005<br />gi_star: 5.028300\",\"Year: 2006<br />gi_star: 5.169201\",\"Year: 2007<br />gi_star: 5.295889\",\"Year: 2008<br />gi_star: 5.603954\",\"Year: 2009<br />gi_star: 6.278886\",\"Year: 2010<br />gi_star: 5.935746\",\"Year: 2011<br />gi_star: 5.750871\",\"Year: 2012<br />gi_star: 5.694248\",\"Year: 2013<br />gi_star: 5.708505\",\"Year: 2014<br />gi_star: 5.760812\",\"Year: 2015<br />gi_star: 6.097127\",\"Year: 2016<br />gi_star: 6.003655\",\"Year: 2017<br />gi_star: 6.202805\",\"Year: 2018<br />gi_star: 6.037182\",\"Year: 2019<br />gi_star: 6.579432\",\"Year: 2020<br />gi_star: 5.766916\",\"Year: 2021<br />gi_star: 5.748653\"],\"type\":\"scatter\",\"mode\":\"lines\",\"line\":{\"width\":1.8897637795275593,\"color\":\"rgba(0,0,0,1)\",\"dash\":\"solid\"},\"hoveron\":\"points\",\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null}],\"layout\":{\"margin\":{\"t\":26.228310502283104,\"r\":7.3059360730593621,\"b\":40.182648401826491,\"l\":43.105022831050235},\"plot_bgcolor\":\"rgba(255,255,255,1)\",\"paper_bgcolor\":\"rgba(255,255,255,1)\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[2004.2,2021.8],\"tickmode\":\"array\",\"ticktext\":[\"2005\",\"2010\",\"2015\",\"2020\"],\"tickvals\":[2005,2010,2015,2020],\"categoryorder\":\"array\",\"categoryarray\":[\"2005\",\"2010\",\"2015\",\"2020\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(179,179,179,1)\",\"ticklen\":3.6529680365296811,\"tickwidth\":0.33208800332088001,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(222,222,222,1)\",\"gridwidth\":0.33208800332088001,\"zeroline\":false,\"anchor\":\"y\",\"title\":{\"text\":\"Year\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[4.9507428733660737,6.656988805148357],\"tickmode\":\"array\",\"ticktext\":[\"5.0\",\"5.5\",\"6.0\",\"6.5\"],\"tickvals\":[5,5.5,6,6.5],\"categoryorder\":\"array\",\"categoryarray\":[\"5.0\",\"5.5\",\"6.0\",\"6.5\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(179,179,179,1)\",\"ticklen\":3.6529680365296811,\"tickwidth\":0.33208800332088001,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(222,222,222,1)\",\"gridwidth\":0.33208800332088001,\"zeroline\":false,\"anchor\":\"x\",\"title\":{\"text\":\"gi_star\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"shapes\":[{\"type\":\"rect\",\"fillcolor\":\"transparent\",\"line\":{\"color\":\"rgba(179,179,179,1)\",\"width\":0.66417600664176002,\"linetype\":\"solid\"},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":1,\"y0\":0,\"y1\":1}],\"showlegend\":false,\"legend\":{\"bgcolor\":\"rgba(255,255,255,1)\",\"bordercolor\":\"transparent\",\"borderwidth\":1.8897637795275593,\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":11.68949771689498}},\"hovermode\":\"closest\",\"barmode\":\"relative\"},\"config\":{\"doubleClick\":\"reset\",\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"source\":\"A\",\"attrs\":{\"8adc1cf415c\":{\"x\":{},\"y\":{},\"type\":\"scatter\"}},\"cur_data\":\"8adc1cf415c\",\"visdat\":{\"8adc1cf415c\":[\"function (y) \",\"x\"]},\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nPerforming the Mann-Kendall test.\n\nThe 'sl' column is the p_value. 'tau' column is the trend\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncbg %>%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %>% \n  tidyr::unnest_wider(mk)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 5\n    tau      sl     S     D  varS\n  <dbl>   <dbl> <dbl> <dbl> <dbl>\n1 0.485 0.00742    66  136.  589.\n```\n:::\n:::\n\n\nThere is a slight upward but insignificant trend (\\> 0.05)\n\n##### 4.3.1 Perform Mann-Kendall for all locations\n\nTo replicate this code for each location (to check for statistical sig for trend in all location), use the `group_by` function. The number of rows is back to 88.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa <- gi_stars %>%\n  group_by(County) %>%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %>%\n  tidyr::unnest_wider(mk)\n```\n:::\n\n\nPrint the output in an interactive table\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndatatable(ehsa)\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-abdf314ed31241557a52\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-abdf314ed31241557a52\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\",\"62\",\"63\",\"64\",\"65\",\"66\",\"67\",\"68\",\"69\",\"70\",\"71\",\"72\",\"73\",\"74\",\"75\",\"76\",\"77\",\"78\",\"79\",\"80\",\"81\",\"82\",\"83\",\"84\",\"85\",\"86\",\"87\",\"88\"],[\"Anhua\",\"Anren\",\"Anxiang\",\"Baojing\",\"Chaling\",\"Changning\",\"Changsha\",\"Chengbu\",\"Chenxi\",\"Cili\",\"Dao\",\"Dongan\",\"Dongkou\",\"Fenghuang\",\"Guidong\",\"Guiyang\",\"Guzhang\",\"Hanshou\",\"Hengdong\",\"Hengnan\",\"Hengshan\",\"Hengyang\",\"Hongjiang\",\"Huarong\",\"Huayuan\",\"Huitong\",\"Jiahe\",\"Jianghua\",\"Jiangyong\",\"Jingzhou\",\"Jinshi\",\"Jishou\",\"Lanshan\",\"Leiyang\",\"Lengshuijiang\",\"Li\",\"Lianyuan\",\"Liling\",\"Linli\",\"Linwu\",\"Linxiang\",\"Liuyang\",\"Longhui\",\"Longshan\",\"Luxi\",\"Mayang\",\"Miluo\",\"Nan\",\"Ningxiang\",\"Ningyuan\",\"Pingjiang\",\"Qidong\",\"Qiyang\",\"Rucheng\",\"Sangzhi\",\"Shaodong\",\"Shaoshan\",\"Shaoyang\",\"Shimen\",\"Shuangfeng\",\"Shuangpai\",\"Suining\",\"Taojiang\",\"Taoyuan\",\"Tongdao\",\"Wangcheng\",\"Wugang\",\"Xiangtan\",\"Xiangxiang\",\"Xiangyin\",\"Xinhua\",\"Xinhuang\",\"Xinning\",\"Xinshao\",\"Xintian\",\"Xupu\",\"Yanling\",\"Yizhang\",\"Yongshun\",\"Yongxing\",\"You\",\"Yuanjiang\",\"Yuanling\",\"Yueyang\",\"Zhijiang\",\"Zhongfang\",\"Zhuzhou\",\"Zixing\"],[0.1911764889955521,-0.2941176891326904,0,-0.6911765336990356,-0.08823530375957489,-0.7500000596046448,0.4852941632270813,-0.8235294818878174,-0.1176470741629601,0.1029411852359772,-0.04411765187978745,-0.8235294818878174,-0.7647059559822083,-0.7058824300765991,0.1323529630899429,-0.2500000298023224,-0.617647111415863,0.1029411852359772,0.3823529779911041,-0.5882353782653809,0.4852941632270813,0.1029411852359772,-0.2647059261798859,0.04411765187978745,-0.7941177487373352,-0.3088235557079315,-0.4705882966518402,0.3970588743686676,0.1764706075191498,-0.2647059261798859,0.01470588427037001,-0.7500000596046448,-0.5588235855102539,-0.5882353782653809,-0.7647059559822083,0.02941176854074001,0.1911764889955521,0.7058824300765991,0.08823530375957489,-0.4558824002742767,0.4117647409439087,0.7794118523597717,0.1176470741629601,0,-0.3970588743686676,0,0.5147059559822083,-0.01470588427037001,0.4264706373214722,-0.5294118523597717,0.64705890417099,-0.2058823704719543,-0.4264706373214722,-0.1764706075191498,-0.1911764889955521,0.64705890417099,0.7941177487373352,0.2352941483259201,0.1617647260427475,0.8676471710205078,-0.279411792755127,-0.7205883264541626,0.2941176891326904,0.2058823704719543,-0.7500000596046448,0.4264706373214722,-0.8088236451148987,0.8676471710205078,0.8676471710205078,0.5588235855102539,-0.2500000298023224,0.1470588445663452,-0.7647059559822083,-0.2500000298023224,-0.1029411852359772,-0.05882353708148003,0.2058823704719543,-0.2352941483259201,-0.2205882668495178,0.07352942228317261,0.1470588445663452,0.4558824002742767,-0.2058823704719543,0.4264706373214722,0.05882353708148003,0.04411765187978745,0.7647059559822083,-0.07352942228317261],[0.3030965328216553,0.1081613376736641,1,0.0001276678376598284,0.6504631042480469,3.176133031956851e-05,0.007416963577270508,4.822107712243451e-06,0.5366482734680176,0.5923012495040894,0.8368197083473206,4.822107712243451e-06,2.207080615335144e-05,9.104339551413432e-05,0.4837558269500732,0.1740335673093796,0.0006285444251261652,0.5923012495040894,0.03565645217895508,0.00113705126568675,0.007416963577270508,0.5923012495040894,0.1493751555681229,0.8368196487426758,1.045168482960435e-05,0.09123902767896652,0.009455357678234577,0.02902042865753174,0.3434194326400757,0.1493751555681229,0.9671423435211182,3.176133031956851e-05,0.002005293034017086,0.00113705126568675,2.207080615335144e-05,0.9016494750976562,0.3030965328216553,9.107589721679688e-05,0.6504631042480469,0.01197940856218338,0.023476243019104,1.52587890625e-05,0.5366482734680176,1,0.0290203932672739,1,0.004479050636291504,0.9671423435211182,0.0188755989074707,0.003448142670094967,0.0003386735916137695,0.266051709651947,0.01887554675340652,0.3434194326400757,0.3030965328216553,0.0003386735916137695,1.049041748046875e-05,0.2016122341156006,0.3870139122009277,1.430511474609375e-06,0.1274769306182861,6.450741784647107e-05,0.1081613302230835,0.2660517692565918,3.176133031956851e-05,0.0188755989074707,7.122434453776805e-06,1.430511474609375e-06,1.430511474609375e-06,0.002005338668823242,0.1740335673093796,0.4338268041610718,2.207080615335144e-05,0.1740335673093796,0.5923012495040894,0.773080050945282,0.2660517692565918,0.2016122937202454,0.2322487235069275,0.7108359336853027,0.4338268041610718,0.01197946071624756,0.266051709651947,0.0188755989074707,0.7730801105499268,0.8368196487426758,2.205371856689453e-05,0.7108359336853027],[26,-40,0,-94,-12,-102,66,-112,-16,14,-6,-112,-104,-96,18,-34,-84,14,52,-80,66,14,-36,6,-108,-42,-64,54,24,-36,2,-102,-76,-80,-104,4,26,96,12,-62,56,106,16,0,-54,0,70,-2,58,-72,88,-28,-58,-24,-26,88,108,32,22,118,-38,-98,40,28,-102,58,-110,118,118,76,-34,20,-104,-34,-14,-8,28,-32,-30,10,20,62,-28,58,8,6,104,-10],[135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109,135.9999847412109],[589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812,589.3333129882812]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>County<\\/th>\\n      <th>tau<\\/th>\\n      <th>sl<\\/th>\\n      <th>S<\\/th>\\n      <th>D<\\/th>\\n      <th>varS<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[2,3,4,5,6]},{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n##### \n\n##### 4.3.1 Sort by top 5 emerging and significant hotspots\n\n\n::: {.cell}\n\n```{.r .cell-code}\nemerging <- ehsa %>% \n  arrange(sl, abs(tau)) %>% \n  slice(1:5)\n\nkable(emerging)\n```\n\n::: {.cell-output-display}\n|County     |        tau|      sl|    S|   D|     varS|\n|:----------|----------:|-------:|----:|---:|--------:|\n|Shuangfeng |  0.8676472| 1.4e-06|  118| 136| 589.3333|\n|Xiangtan   |  0.8676472| 1.4e-06|  118| 136| 589.3333|\n|Xiangxiang |  0.8676472| 1.4e-06|  118| 136| 589.3333|\n|Chengbu    | -0.8235295| 4.8e-06| -112| 136| 589.3333|\n|Dongan     | -0.8235295| 4.8e-06| -112| 136| 589.3333|\n:::\n:::\n\n\n#### 4.4 Emerging hot spot analysis\n\n##### 4.4.2 **Calculating ehsa using spacetime cube**\n\nWe will perform EHSA analysis by using [`emerging_hotspot_analysis()`](https://sfdep.josiahparry.com/reference/emerging_hotspot_analysis.html) of sfdep package. It requires\n\n1.   a spacetime object, x (i.e. GDPPC_st)\n2.  the quoted name of the variable of interest, .var (i.e. GDPPC)\n3.  k argument is used to specify the number of time lags which is set to 1 by default.\n4.  nsim map numbers of simulation to be performed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa <- emerging_hotspot_analysis(\n  x = GDPPC_st, # timeseries data stored in this spacetime cube\n  .var='GDPPC',  # spatial element found inside this column\n  k=1,   # timelag\n  nsim=99\n)\n```\n:::\n\n\nPrint the output\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndatatable(ehsa)\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-182c25701bfa220289d2\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-182c25701bfa220289d2\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\",\"62\",\"63\",\"64\",\"65\",\"66\",\"67\",\"68\",\"69\",\"70\",\"71\",\"72\",\"73\",\"74\",\"75\",\"76\",\"77\",\"78\",\"79\",\"80\",\"81\",\"82\",\"83\",\"84\",\"85\",\"86\",\"87\",\"88\"],[\"Anxiang\",\"Hanshou\",\"Jinshi\",\"Li\",\"Linli\",\"Shimen\",\"Liuyang\",\"Ningxiang\",\"Wangcheng\",\"Anren\",\"Guidong\",\"Jiahe\",\"Linwu\",\"Rucheng\",\"Yizhang\",\"Yongxing\",\"Zixing\",\"Changning\",\"Hengdong\",\"Hengnan\",\"Hengshan\",\"Leiyang\",\"Qidong\",\"Chenxi\",\"Zhongfang\",\"Huitong\",\"Jingzhou\",\"Mayang\",\"Tongdao\",\"Xinhuang\",\"Xupu\",\"Yuanling\",\"Zhijiang\",\"Lengshuijiang\",\"Shuangfeng\",\"Xinhua\",\"Chengbu\",\"Dongan\",\"Dongkou\",\"Longhui\",\"Shaodong\",\"Suining\",\"Wugang\",\"Xinning\",\"Xinshao\",\"Shaoshan\",\"Xiangxiang\",\"Baojing\",\"Fenghuang\",\"Guzhang\",\"Huayuan\",\"Jishou\",\"Longshan\",\"Luxi\",\"Yongshun\",\"Anhua\",\"Nan\",\"Yuanjiang\",\"Jianghua\",\"Lanshan\",\"Ningyuan\",\"Shuangpai\",\"Xintian\",\"Huarong\",\"Linxiang\",\"Miluo\",\"Pingjiang\",\"Xiangyin\",\"Cili\",\"Chaling\",\"Liling\",\"Yanling\",\"You\",\"Zhuzhou\",\"Sangzhi\",\"Yueyang\",\"Qiyang\",\"Taojiang\",\"Shaoyang\",\"Lianyuan\",\"Hongjiang\",\"Hengyang\",\"Guiyang\",\"Changsha\",\"Taoyuan\",\"Xiangtan\",\"Dao\",\"Jiangyong\"],[0.2205882668495178,0.1470588445663452,0.4411765336990356,-0.8235294818878174,0.1176470741629601,-0.4705882966518402,0.8676471710205078,-0.5588235855102539,-0.1617647260427475,0.4558824002742767,0.279411792755127,-0.4852941632270813,-0.3382353186607361,-0.8088236451148987,0.1176470741629601,-0.04411765187978745,-0.6323530077934265,0.4117647409439087,0.4264706373214722,-0.3529412150382996,0.5294118523597717,0.367647111415863,-0.1617647260427475,0.7205883264541626,-0.8235294818878174,-0.2058823704719543,-0.1176470741629601,0.3970588743686676,0.323529452085495,-0.1617647260427475,0.1617647260427475,-0.7647059559822083,-0.2500000298023224,-0.01470588427037001,-0.4705882966518402,0.1323529630899429,0.3529412150382996,0.89705890417099,0.3970588743686676,-0.1911764889955521,0.6911765336990356,0.8382353782653809,0.01470588427037001,-0.2500000298023224,-0.367647111415863,0.08823530375957489,0.8382353782653809,0.2352941483259201,0.7647059559822083,-0.1176470741629601,0.8823530673980713,0.1470588445663452,-0.279411792755127,-0.07352942228317261,0.1323529630899429,0.4264706373214722,0.9117648005485535,0.3088235557079315,0.3970588743686676,0.7941177487373352,0.02941176854074001,-0.3970588743686676,0.5147059559822083,0.4558824002742767,-0.5588235855102539,0.7500000596046448,-0.5000000596046448,0.8235294818878174,0.8235294818878174,0.8235294818878174,-0.3088235557079315,0.01470588427037001,-0.5147059559822083,-0.1323529630899429,0.1470588445663452,-0.05882353708148003,0.279411792755127,-0.02941176854074001,-0.2941176891326904,0.2941176891326904,0.3823529779911041,0.5441176891326904,-0.05882353708148003,0.7794118523597717,0.1323529630899429,0.02941176854074001,0.8235294818878174,0.07352942228317261],[0.2322487831115723,0.4338268041610718,0.0150836706161499,4.822107712243451e-06,0.5366482734680176,0.009455357678234577,1.430511474609375e-06,0.002005293034017086,0.3870139718055725,0.01197946071624756,0.1274769306182861,0.007416919805109501,0.06378662586212158,7.122434453776805e-06,0.5366482734680176,0.8368197083473206,0.0004628665337804705,0.023476243019104,0.0188755989074707,0.05286114662885666,0.003448128700256348,0.04354560375213623,0.3870139718055725,6.449222564697266e-05,4.822107712243451e-06,0.266051709651947,0.5366482734680176,0.02902042865753174,0.07651364803314209,0.3870139718055725,0.3870139122009277,2.207080615335144e-05,0.1740335673093796,0.9671423435211182,0.009455357678234577,0.4837558269500732,0.05286109447479248,5.960464477539062e-07,0.02902042865753174,0.3030965328216553,0.0001276731491088867,3.218650817871094e-06,0.9671423435211182,0.1740335673093796,0.04354557767510414,0.6504631042480469,3.218650817871094e-06,0.2016122341156006,2.205371856689453e-05,0.5366482734680176,9.5367431640625e-07,0.4338268041610718,0.1274769306182861,0.7108359336853027,0.4837558269500732,0.0188755989074707,3.576278686523438e-07,0.09123897552490234,0.02902042865753174,1.049041748046875e-05,0.9016494750976562,0.0290203932672739,0.004479050636291504,0.01197946071624756,0.002005293034017086,3.170967102050781e-05,0.00578179769217968,4.76837158203125e-06,4.76837158203125e-06,4.76837158203125e-06,0.09123902767896652,0.9671423435211182,0.004479054361581802,0.4837557673454285,0.4338268041610718,0.773080050945282,0.1274769306182861,0.9016494750976562,0.1081613376736641,0.1081613302230835,0.03565645217895508,0.002637863159179688,0.773080050945282,1.52587890625e-05,0.4837558269500732,0.9016494750976562,4.76837158203125e-06,0.7108359336853027],[\"sporadic coldspot\",\"sporadic hotspot\",\"oscilating hotspot\",\"sporadic coldspot\",\"oscilating hotspot\",\"oscilating coldspot\",\"sporadic hotspot\",\"sporadic coldspot\",\"sporadic coldspot\",\"sporadic coldspot\",\"sporadic coldspot\",\"sporadic coldspot\",\"sporadic coldspot\",\"sporadic coldspot\",\"sporadic hotspot\",\"sporadic hotspot\",\"sporadic coldspot\",\"sporadic coldspot\",\"oscilating hotspot\",\"oscilating coldspot\",\"sporadic coldspot\",\"sporadic coldspot\",\"sporadic coldspot\",\"oscilating hotspot\",\"sporadic coldspot\",\"sporadic coldspot\",\"no pattern detected\",\"sporadic coldspot\",\"sporadic coldspot\",\"sporadic coldspot\",\"sporadic hotspot\",\"sporadic coldspot\",\"sporadic coldspot\",\"oscilating coldspot\",\"sporadic hotspot\",\"sporadic hotspot\",\"oscilating hotspot\",\"sporadic hotspot\",\"sporadic hotspot\",\"sporadic hotspot\",\"oscilating hotspot\",\"sporadic hotspot\",\"sporadic coldspot\",\"sporadic coldspot\",\"sporadic coldspot\",\"sporadic coldspot\",\"sporadic hotspot\",\"oscilating hotspot\",\"sporadic hotspot\",\"sporadic coldspot\",\"consecutive hotspot\",\"sporadic coldspot\",\"sporadic coldspot\",\"no pattern detected\",\"sporadic coldspot\",\"sporadic coldspot\",\"sporadic hotspot\",\"sporadic coldspot\",\"oscilating coldspot\",\"oscilating hotspot\",\"sporadic coldspot\",\"sporadic coldspot\",\"sporadic hotspot\",\"sporadic coldspot\",\"sporadic coldspot\",\"sporadic hotspot\",\"sporadic coldspot\",\"sporadic hotspot\",\"sporadic hotspot\",\"sporadic hotspot\",\"sporadic coldspot\",\"sporadic coldspot\",\"sporadic coldspot\",\"sporadic coldspot\",\"sporadic coldspot\",\"sporadic coldspot\",\"sporadic hotspot\",\"sporadic hotspot\",\"sporadic coldspot\",\"sporadic hotspot\",\"sporadic hotspot\",\"oscilating hotspot\",\"sporadic coldspot\",\"oscilating hotspot\",\"sporadic coldspot\",\"sporadic coldspot\",\"sporadic hotspot\",\"oscilating hotspot\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>location<\\/th>\\n      <th>tau<\\/th>\\n      <th>p_value<\\/th>\\n      <th>classification<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[2,3]},{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n##### 4.4.2 **Visualising the distribution of EHSA classes**\n\nplot barchart to check distribution of EHSA classes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplotly(ggplot(data = ehsa,\n       aes(x = classification)) +\n  geom_bar())\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"plotly html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-ffb0a1dc5031e673a973\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-ffb0a1dc5031e673a973\">{\"x\":{\"data\":[{\"orientation\":\"v\",\"width\":[0.89999999999999991,0.90000000000000013,0.90000000000000036,0.90000000000000036,0.90000000000000036,0.90000000000000036],\"base\":[0,0,0,0,0,0],\"x\":[1,2,3,4,5,6],\"y\":[1,2,4,11,46,24],\"text\":[\"count:  1<br />classification: consecutive hotspot\",\"count:  2<br />classification: no pattern detected\",\"count:  4<br />classification: oscilating coldspot\",\"count: 11<br />classification: oscilating hotspot\",\"count: 46<br />classification: sporadic coldspot\",\"count: 24<br />classification: sporadic hotspot\"],\"type\":\"bar\",\"textposition\":\"none\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(89,89,89,1)\",\"line\":{\"width\":1.8897637795275593,\"color\":\"transparent\"}},\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null}],\"layout\":{\"margin\":{\"t\":26.228310502283104,\"r\":7.3059360730593621,\"b\":40.182648401826491,\"l\":37.260273972602747},\"plot_bgcolor\":\"rgba(235,235,235,1)\",\"paper_bgcolor\":\"rgba(255,255,255,1)\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[0.40000000000000002,6.5999999999999996],\"tickmode\":\"array\",\"ticktext\":[\"consecutive hotspot\",\"no pattern detected\",\"oscilating coldspot\",\"oscilating hotspot\",\"sporadic coldspot\",\"sporadic hotspot\"],\"tickvals\":[1,2,3,3.9999999999999996,5,6],\"categoryorder\":\"array\",\"categoryarray\":[\"consecutive hotspot\",\"no pattern detected\",\"oscilating coldspot\",\"oscilating hotspot\",\"sporadic coldspot\",\"sporadic hotspot\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.6529680365296811,\"tickwidth\":0.66417600664176002,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(255,255,255,1)\",\"gridwidth\":0.66417600664176002,\"zeroline\":false,\"anchor\":\"y\",\"title\":{\"text\":\"classification\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[-2.3000000000000003,48.299999999999997],\"tickmode\":\"array\",\"ticktext\":[\"0\",\"10\",\"20\",\"30\",\"40\"],\"tickvals\":[0,10,20,29.999999999999996,40],\"categoryorder\":\"array\",\"categoryarray\":[\"0\",\"10\",\"20\",\"30\",\"40\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.6529680365296811,\"tickwidth\":0.66417600664176002,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(255,255,255,1)\",\"gridwidth\":0.66417600664176002,\"zeroline\":false,\"anchor\":\"x\",\"title\":{\"text\":\"count\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"shapes\":[{\"type\":\"rect\",\"fillcolor\":null,\"line\":{\"color\":null,\"width\":0,\"linetype\":[]},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":1,\"y0\":0,\"y1\":1}],\"showlegend\":false,\"legend\":{\"bgcolor\":\"rgba(255,255,255,1)\",\"bordercolor\":\"transparent\",\"borderwidth\":1.8897637795275593,\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":11.68949771689498}},\"hovermode\":\"closest\",\"barmode\":\"relative\"},\"config\":{\"doubleClick\":\"reset\",\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"source\":\"A\",\"attrs\":{\"8adc1273795c\":{\"x\":{},\"type\":\"bar\"}},\"cur_data\":\"8adc1273795c\",\"visdat\":{\"8adc1273795c\":[\"function (y) \",\"x\"]},\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nSporadic cold spots has the highest numbers of county\n\n##### 4.4.3 Visualising EHSA on map\n\nBecause ehsa df does not have geometry data, we can join both hunan geospatial df with ehsa to make a sf object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_ehsa <-left_join(hunan, ehsa,\n            by=c('County' = 'location'))\n\nclass(hunan_ehsa)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"sf\"         \"data.frame\"\n```\n:::\n:::\n\n\nUse tmap functions to plot choropleth map\nWe can use the p-value inside to plot only the significant emerging hot/cold spots, by filtering rows with p_values \\< 0.05\n\nTake note: no pattern (yellow) doesnt mean not-sig (grey)\n\n\n::: {.cell fig.asp='0.68'}\n\n```{.r .cell-code}\nehsa_sig <-  hunan_ehsa %>% \n  filter(p_value < 0.05)\n\ntmap_mode('plot')\n#base\ntm_shape(hunan_ehsa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\n  #sif\n  tm_shape(ehsa_sig) +\n  tm_fill('classification') +\n  tm_borders(alpha = 0.4)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex2_files/figure-html/unnamed-chunk-49-1.png){width=1344}\n:::\n:::\n\n::: {.cell fig.asp='0.68'}\n\n:::\n",
    "supporting": [
      "In-class_Ex2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/htmlwidgets-1.6.2/htmlwidgets.js\"></script>\r\n<script src=\"../site_libs/plotly-binding-4.10.3/plotly.js\"></script>\r\n<script src=\"../site_libs/typedarray-0.1/typedarray.min.js\"></script>\r\n<script src=\"../site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\r\n<link href=\"../site_libs/crosstalk-1.2.0/css/crosstalk.min.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/crosstalk-1.2.0/js/crosstalk.min.js\"></script>\r\n<link href=\"../site_libs/plotly-htmlwidgets-css-2.11.1/plotly-htmlwidgets.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/plotly-main-2.11.1/plotly-latest.min.js\"></script>\r\n<link href=\"../site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/datatables-binding-0.30/datatables.js\"></script>\r\n<link href=\"../site_libs/dt-core-1.13.4/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\r\n<link href=\"../site_libs/dt-core-1.13.4/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/dt-core-1.13.4/js/jquery.dataTables.min.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}